/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/troika-three-text";
exports.ids = ["vendor-chunks/troika-three-text"];
exports.modules = {

/***/ "(ssr)/./node_modules/troika-three-text/dist/troika-three-text.umd.js":
/*!**********************************************************************!*\
  !*** ./node_modules/troika-three-text/dist/troika-three-text.umd.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("(function (global, factory) {\n   true ? factory(exports, __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.cjs\"), __webpack_require__(/*! troika-worker-utils */ \"(ssr)/./node_modules/troika-worker-utils/dist/troika-worker-utils.umd.js\"), __webpack_require__(/*! webgl-sdf-generator */ \"(ssr)/./node_modules/webgl-sdf-generator/dist/webgl-sdf-generator.js\"), __webpack_require__(/*! bidi-js */ \"(ssr)/./node_modules/bidi-js/dist/bidi.js\"), __webpack_require__(/*! troika-three-utils */ \"(ssr)/./node_modules/troika-three-utils/dist/troika-three-utils.umd.js\")) :\n  0;\n}(this, (function (exports, three, troikaWorkerUtils, createSDFGenerator, bidiFactory, troikaThreeUtils) { 'use strict';\n\n  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\n  var createSDFGenerator__default = /*#__PURE__*/_interopDefaultLegacy(createSDFGenerator);\n  var bidiFactory__default = /*#__PURE__*/_interopDefaultLegacy(bidiFactory);\n\n  /**\n   * Factory function that creates a self-contained environment for processing text typesetting requests.\n   *\n   * It is important that this function has no closure dependencies, so that it can be easily injected\n   * into the source for a Worker without requiring a build step or complex dependency loading. All its\n   * dependencies must be passed in at initialization.\n   *\n   * @param {function} fontParser - a function that accepts an ArrayBuffer of the font data and returns\n   * a standardized structure giving access to the font and its glyphs:\n   *   {\n   *     unitsPerEm: number,\n   *     ascender: number,\n   *     descender: number,\n   *     capHeight: number,\n   *     xHeight: number,\n   *     lineGap: number,\n   *     forEachGlyph(string, fontSize, letterSpacing, callback) {\n   *       //invokes callback for each glyph to render, passing it an object:\n   *       callback({\n   *         index: number,\n   *         advanceWidth: number,\n   *         xMin: number,\n   *         yMin: number,\n   *         xMax: number,\n   *         yMax: number,\n   *         path: string,\n   *         pathCommandCount: number\n   *       })\n   *     }\n   *   }\n   * @param {object} bidi - the bidi.js implementation object\n   * @param {Object} config\n   * @return {Object}\n   */\n  function createTypesetter(fontParser, bidi, config) {\n\n    const {\n      defaultFontURL\n    } = config;\n\n    /**\n     * Holds parsed font objects by url\n     */\n    const fonts = Object.create(null);\n\n    const INF = Infinity;\n\n    // Set of Unicode Default_Ignorable_Code_Point characters, these will not produce visible glyphs\n    // eslint-disable-next-line no-misleading-character-class\n    const DEFAULT_IGNORABLE_CHARS = /[\\u00AD\\u034F\\u061C\\u115F-\\u1160\\u17B4-\\u17B5\\u180B-\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u206F\\u3164\\uFE00-\\uFE0F\\uFEFF\\uFFA0\\uFFF0-\\uFFF8]/;\n\n    // This regex (instead of /\\s/) allows us to select all whitespace EXCEPT for non-breaking white spaces\n    const lineBreakingWhiteSpace = `[^\\\\S\\\\u00A0]`;\n\n    // Incomplete set of characters that allow line breaking after them\n    // In the future we may consider a full Unicode line breaking algorithm impl: https://www.unicode.org/reports/tr14\n    const BREAK_AFTER_CHARS = new RegExp(`${lineBreakingWhiteSpace}|[\\\\-\\\\u007C\\\\u00AD\\\\u2010\\\\u2012-\\\\u2014\\\\u2027\\\\u2056\\\\u2E17\\\\u2E40]`);\n\n    /**\n     * Load a given font url\n     */\n    function doLoadFont(url, callback) {\n      function tryLoad() {\n        const onError = err => {\n          console.error(`Failure loading font ${url}${url === defaultFontURL ? '' : '; trying fallback'}`, err);\n          if (url !== defaultFontURL) {\n            url = defaultFontURL;\n            tryLoad();\n          }\n        };\n        try {\n          const request = new XMLHttpRequest();\n          request.open('get', url, true);\n          request.responseType = 'arraybuffer';\n          request.onload = function () {\n            if (request.status >= 400) {\n              onError(new Error(request.statusText));\n            }\n            else if (request.status > 0) {\n              try {\n                const fontObj = fontParser(request.response);\n                callback(fontObj);\n              } catch (e) {\n                onError(e);\n              }\n            }\n          };\n          request.onerror = onError;\n          request.send();\n        } catch(err) {\n          onError(err);\n        }\n      }\n      tryLoad();\n    }\n\n\n    /**\n     * Load a given font url if needed, invoking a callback when it's loaded. If already\n     * loaded, the callback will be called synchronously.\n     */\n    function loadFont(fontUrl, callback) {\n      if (!fontUrl) fontUrl = defaultFontURL;\n      let font = fonts[fontUrl];\n      if (font) {\n        // if currently loading font, add to callbacks, otherwise execute immediately\n        if (font.pending) {\n          font.pending.push(callback);\n        } else {\n          callback(font);\n        }\n      } else {\n        fonts[fontUrl] = {pending: [callback]};\n        doLoadFont(fontUrl, fontObj => {\n          let callbacks = fonts[fontUrl].pending;\n          fonts[fontUrl] = fontObj;\n          callbacks.forEach(cb => cb(fontObj));\n        });\n      }\n    }\n\n\n    /**\n     * Main entry point.\n     * Process a text string with given font and formatting parameters, and return all info\n     * necessary to render all its glyphs.\n     */\n    function typeset(\n      {\n        text='',\n        font=defaultFontURL,\n        sdfGlyphSize=64,\n        fontSize=1,\n        letterSpacing=0,\n        lineHeight='normal',\n        maxWidth=INF,\n        direction,\n        textAlign='left',\n        textIndent=0,\n        whiteSpace='normal',\n        overflowWrap='normal',\n        anchorX = 0,\n        anchorY = 0,\n        includeCaretPositions=false,\n        chunkedBoundsSize=8192,\n        colorRanges=null\n      },\n      callback,\n      metricsOnly=false\n    ) {\n      const mainStart = now();\n      const timings = {fontLoad: 0, typesetting: 0};\n\n      // Ensure newlines are normalized\n      if (text.indexOf('\\r') > -1) {\n        console.info('Typesetter: got text with \\\\r chars; normalizing to \\\\n');\n        text = text.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n      }\n\n      // Ensure we've got numbers not strings\n      fontSize = +fontSize;\n      letterSpacing = +letterSpacing;\n      maxWidth = +maxWidth;\n      lineHeight = lineHeight || 'normal';\n      textIndent = +textIndent;\n\n      loadFont(font, fontObj => {\n        const hasMaxWidth = isFinite(maxWidth);\n        let glyphIds = null;\n        let glyphPositions = null;\n        let glyphData = null;\n        let glyphColors = null;\n        let caretPositions = null;\n        let visibleBounds = null;\n        let chunkedBounds = null;\n        let maxLineWidth = 0;\n        let renderableGlyphCount = 0;\n        let canWrap = whiteSpace !== 'nowrap';\n        const {ascender, descender, unitsPerEm, lineGap, capHeight, xHeight} = fontObj;\n        timings.fontLoad = now() - mainStart;\n        const typesetStart = now();\n\n        // Find conversion between native font units and fontSize units; this will already be done\n        // for the gx/gy values below but everything else we'll need to convert\n        const fontSizeMult = fontSize / unitsPerEm;\n\n        // Determine appropriate value for 'normal' line height based on the font's actual metrics\n        // TODO this does not guarantee individual glyphs won't exceed the line height, e.g. Roboto; should we use yMin/Max instead?\n        if (lineHeight === 'normal') {\n          lineHeight = (ascender - descender + lineGap) / unitsPerEm;\n        }\n\n        // Determine line height and leading adjustments\n        lineHeight = lineHeight * fontSize;\n        const halfLeading = (lineHeight - (ascender - descender) * fontSizeMult) / 2;\n        const topBaseline = -(ascender * fontSizeMult + halfLeading);\n        const caretHeight = Math.min(lineHeight, (ascender - descender) * fontSizeMult);\n        const caretBottomOffset = (ascender + descender) / 2 * fontSizeMult - caretHeight / 2;\n\n        // Distribute glyphs into lines based on wrapping\n        let lineXOffset = textIndent;\n        let currentLine = new TextLine();\n        const lines = [currentLine];\n\n        fontObj.forEachGlyph(text, fontSize, letterSpacing, (glyphObj, glyphX, charIndex) => {\n          const char = text.charAt(charIndex);\n          const glyphWidth = glyphObj.advanceWidth * fontSizeMult;\n          const curLineCount = currentLine.count;\n          let nextLine;\n\n          // Calc isWhitespace and isEmpty once per glyphObj\n          if (!('isEmpty' in glyphObj)) {\n            glyphObj.isWhitespace = !!char && new RegExp(lineBreakingWhiteSpace).test(char);\n            glyphObj.canBreakAfter = !!char && BREAK_AFTER_CHARS.test(char);\n            glyphObj.isEmpty = glyphObj.xMin === glyphObj.xMax || glyphObj.yMin === glyphObj.yMax || DEFAULT_IGNORABLE_CHARS.test(char);\n          }\n          if (!glyphObj.isWhitespace && !glyphObj.isEmpty) {\n            renderableGlyphCount++;\n          }\n\n          // If a non-whitespace character overflows the max width, we need to soft-wrap\n          if (canWrap && hasMaxWidth && !glyphObj.isWhitespace && glyphX + glyphWidth + lineXOffset > maxWidth && curLineCount) {\n            // If it's the first char after a whitespace, start a new line\n            if (currentLine.glyphAt(curLineCount - 1).glyphObj.canBreakAfter) {\n              nextLine = new TextLine();\n              lineXOffset = -glyphX;\n            } else {\n              // Back up looking for a whitespace character to wrap at\n              for (let i = curLineCount; i--;) {\n                // If we got the start of the line there's no soft break point; make hard break if overflowWrap='break-word'\n                if (i === 0 && overflowWrap === 'break-word') {\n                  nextLine = new TextLine();\n                  lineXOffset = -glyphX;\n                  break\n                }\n                // Found a soft break point; move all chars since it to a new line\n                else if (currentLine.glyphAt(i).glyphObj.canBreakAfter) {\n                  nextLine = currentLine.splitAt(i + 1);\n                  const adjustX = nextLine.glyphAt(0).x;\n                  lineXOffset -= adjustX;\n                  for (let j = nextLine.count; j--;) {\n                    nextLine.glyphAt(j).x -= adjustX;\n                  }\n                  break\n                }\n              }\n            }\n            if (nextLine) {\n              currentLine.isSoftWrapped = true;\n              currentLine = nextLine;\n              lines.push(currentLine);\n              maxLineWidth = maxWidth; //after soft wrapping use maxWidth as calculated width\n            }\n          }\n\n          let fly = currentLine.glyphAt(currentLine.count);\n          fly.glyphObj = glyphObj;\n          fly.x = glyphX + lineXOffset;\n          fly.width = glyphWidth;\n          fly.charIndex = charIndex;\n\n          // Handle hard line breaks\n          if (char === '\\n') {\n            currentLine = new TextLine();\n            lines.push(currentLine);\n            lineXOffset = -(glyphX + glyphWidth + (letterSpacing * fontSize)) + textIndent;\n          }\n        });\n\n        // Calculate width of each line (excluding trailing whitespace) and maximum block width\n        lines.forEach(line => {\n          for (let i = line.count; i--;) {\n            let {glyphObj, x, width} = line.glyphAt(i);\n            if (!glyphObj.isWhitespace) {\n              line.width = x + width;\n              if (line.width > maxLineWidth) {\n                maxLineWidth = line.width;\n              }\n              return\n            }\n          }\n        });\n\n        // Find overall position adjustments for anchoring\n        let anchorXOffset = 0;\n        let anchorYOffset = 0;\n        if (anchorX) {\n          if (typeof anchorX === 'number') {\n            anchorXOffset = -anchorX;\n          }\n          else if (typeof anchorX === 'string') {\n            anchorXOffset = -maxLineWidth * (\n              anchorX === 'left' ? 0 :\n              anchorX === 'center' ? 0.5 :\n              anchorX === 'right' ? 1 :\n              parsePercent(anchorX)\n            );\n          }\n        }\n        if (anchorY) {\n          if (typeof anchorY === 'number') {\n            anchorYOffset = -anchorY;\n          }\n          else if (typeof anchorY === 'string') {\n            let height = lines.length * lineHeight;\n            anchorYOffset = anchorY === 'top' ? 0 :\n              anchorY === 'top-baseline' ? -topBaseline :\n              anchorY === 'top-cap' ? -topBaseline - capHeight * fontSizeMult :\n              anchorY === 'top-ex' ? -topBaseline - xHeight * fontSizeMult :\n              anchorY === 'middle' ? height / 2 :\n              anchorY === 'bottom' ? height :\n              anchorY === 'bottom-baseline' ? height - halfLeading + descender * fontSizeMult :\n              parsePercent(anchorY) * height;\n          }\n        }\n\n        if (!metricsOnly) {\n          // Resolve bidi levels\n          const bidiLevelsResult = bidi.getEmbeddingLevels(text, direction);\n\n          // Process each line, applying alignment offsets, adding each glyph to the atlas, and\n          // collecting all renderable glyphs into a single collection.\n          glyphIds = new Uint16Array(renderableGlyphCount);\n          glyphPositions = new Float32Array(renderableGlyphCount * 2);\n          glyphData = {};\n          visibleBounds = [INF, INF, -INF, -INF];\n          chunkedBounds = [];\n          let lineYOffset = topBaseline;\n          if (includeCaretPositions) {\n            caretPositions = new Float32Array(text.length * 3);\n          }\n          if (colorRanges) {\n            glyphColors = new Uint8Array(renderableGlyphCount * 3);\n          }\n          let renderableGlyphIndex = 0;\n          let prevCharIndex = -1;\n          let colorCharIndex = -1;\n          let chunk;\n          let currentColor;\n          lines.forEach((line, lineIndex) => {\n            let {count:lineGlyphCount, width:lineWidth} = line;\n\n            // Ignore empty lines\n            if (lineGlyphCount > 0) {\n              // Count trailing whitespaces, we want to ignore these for certain things\n              let trailingWhitespaceCount = 0;\n              for (let i = lineGlyphCount; i-- && line.glyphAt(i).glyphObj.isWhitespace;) {\n                trailingWhitespaceCount++;\n              }\n\n              // Apply horizontal alignment adjustments\n              let lineXOffset = 0;\n              let justifyAdjust = 0;\n              if (textAlign === 'center') {\n                lineXOffset = (maxLineWidth - lineWidth) / 2;\n              } else if (textAlign === 'right') {\n                lineXOffset = maxLineWidth - lineWidth;\n              } else if (textAlign === 'justify' && line.isSoftWrapped) {\n                // count non-trailing whitespace characters, and we'll adjust the offsets per character in the next loop\n                let whitespaceCount = 0;\n                for (let i = lineGlyphCount - trailingWhitespaceCount; i--;) {\n                  if (line.glyphAt(i).glyphObj.isWhitespace) {\n                    whitespaceCount++;\n                  }\n                }\n                justifyAdjust = (maxLineWidth - lineWidth) / whitespaceCount;\n              }\n              if (justifyAdjust || lineXOffset) {\n                let justifyOffset = 0;\n                for (let i = 0; i < lineGlyphCount; i++) {\n                  let glyphInfo = line.glyphAt(i);\n                  const glyphObj = glyphInfo.glyphObj;\n                  glyphInfo.x += lineXOffset + justifyOffset;\n                  // Expand non-trailing whitespaces for justify alignment\n                  if (justifyAdjust !== 0 && glyphObj.isWhitespace && i < lineGlyphCount - trailingWhitespaceCount) {\n                    justifyOffset += justifyAdjust;\n                    glyphInfo.width += justifyAdjust;\n                  }\n                }\n              }\n\n              // Perform bidi range flipping\n              const flips = bidi.getReorderSegments(\n                text, bidiLevelsResult, line.glyphAt(0).charIndex, line.glyphAt(line.count - 1).charIndex\n              );\n              for (let fi = 0; fi < flips.length; fi++) {\n                const [start, end] = flips[fi];\n                // Map start/end string indices to indices in the line\n                let left = Infinity, right = -Infinity;\n                for (let i = 0; i < lineGlyphCount; i++) {\n                  if (line.glyphAt(i).charIndex >= start) { // gte to handle removed characters\n                    let startInLine = i, endInLine = i;\n                    for (; endInLine < lineGlyphCount; endInLine++) {\n                      let info = line.glyphAt(endInLine);\n                      if (info.charIndex > end) {\n                        break\n                      }\n                      if (endInLine < lineGlyphCount - trailingWhitespaceCount) { //don't include trailing ws in flip width\n                        left = Math.min(left, info.x);\n                        right = Math.max(right, info.x + info.width);\n                      }\n                    }\n                    for (let j = startInLine; j < endInLine; j++) {\n                      const glyphInfo = line.glyphAt(j);\n                      glyphInfo.x = right - (glyphInfo.x + glyphInfo.width - left);\n                    }\n                    break\n                  }\n                }\n              }\n\n              // Assemble final data arrays\n              let glyphObj;\n              const setGlyphObj = g => glyphObj = g;\n              for (let i = 0; i < lineGlyphCount; i++) {\n                let glyphInfo = line.glyphAt(i);\n                glyphObj = glyphInfo.glyphObj;\n                const glyphId = glyphObj.index;\n\n                // Replace mirrored characters in rtl\n                const rtl = bidiLevelsResult.levels[glyphInfo.charIndex] & 1; //odd level means rtl\n                if (rtl) {\n                  const mirrored = bidi.getMirroredCharacter(text[glyphInfo.charIndex]);\n                  if (mirrored) {\n                    fontObj.forEachGlyph(mirrored, 0, 0, setGlyphObj);\n                  }\n                }\n\n                // Add caret positions\n                if (includeCaretPositions) {\n                  const {charIndex} = glyphInfo;\n                  const caretLeft = glyphInfo.x + anchorXOffset;\n                  const caretRight = glyphInfo.x + glyphInfo.width + anchorXOffset;\n                  caretPositions[charIndex * 3] = rtl ? caretRight : caretLeft; //start edge x\n                  caretPositions[charIndex * 3 + 1] = rtl ? caretLeft : caretRight; //end edge x\n                  caretPositions[charIndex * 3 + 2] = lineYOffset + caretBottomOffset + anchorYOffset; //common bottom y\n\n                  // If we skipped any chars from the previous glyph (due to ligature subs), fill in caret\n                  // positions for those missing char indices; currently this uses a best-guess by dividing\n                  // the ligature's width evenly. In the future we may try to use the font's LigatureCaretList\n                  // table to get better interior caret positions.\n                  const ligCount = charIndex - prevCharIndex;\n                  if (ligCount > 1) {\n                    fillLigatureCaretPositions(caretPositions, prevCharIndex, ligCount);\n                  }\n                  prevCharIndex = charIndex;\n                }\n\n                // Track current color range\n                if (colorRanges) {\n                  const {charIndex} = glyphInfo;\n                  while(charIndex > colorCharIndex) {\n                    colorCharIndex++;\n                    if (colorRanges.hasOwnProperty(colorCharIndex)) {\n                      currentColor = colorRanges[colorCharIndex];\n                    }\n                  }\n                }\n\n                // Get atlas data for renderable glyphs\n                if (!glyphObj.isWhitespace && !glyphObj.isEmpty) {\n                  const idx = renderableGlyphIndex++;\n\n                  // Add this glyph's path data\n                  if (!glyphData[glyphId]) {\n                    glyphData[glyphId] = {\n                      path: glyphObj.path,\n                      pathBounds: [glyphObj.xMin, glyphObj.yMin, glyphObj.xMax, glyphObj.yMax]\n                    };\n                  }\n\n                  // Determine final glyph position and add to glyphPositions array\n                  const glyphX = glyphInfo.x + anchorXOffset;\n                  const glyphY = lineYOffset + anchorYOffset;\n                  glyphPositions[idx * 2] = glyphX;\n                  glyphPositions[idx * 2 + 1] = glyphY;\n\n                  // Track total visible bounds\n                  const visX0 = glyphX + glyphObj.xMin * fontSizeMult;\n                  const visY0 = glyphY + glyphObj.yMin * fontSizeMult;\n                  const visX1 = glyphX + glyphObj.xMax * fontSizeMult;\n                  const visY1 = glyphY + glyphObj.yMax * fontSizeMult;\n                  if (visX0 < visibleBounds[0]) visibleBounds[0] = visX0;\n                  if (visY0 < visibleBounds[1]) visibleBounds[1] = visY0;\n                  if (visX1 > visibleBounds[2]) visibleBounds[2] = visX1;\n                  if (visY1 > visibleBounds[3]) visibleBounds[3] = visY1;\n\n                  // Track bounding rects for each chunk of N glyphs\n                  if (idx % chunkedBoundsSize === 0) {\n                    chunk = {start: idx, end: idx, rect: [INF, INF, -INF, -INF]};\n                    chunkedBounds.push(chunk);\n                  }\n                  chunk.end++;\n                  const chunkRect = chunk.rect;\n                  if (visX0 < chunkRect[0]) chunkRect[0] = visX0;\n                  if (visY0 < chunkRect[1]) chunkRect[1] = visY0;\n                  if (visX1 > chunkRect[2]) chunkRect[2] = visX1;\n                  if (visY1 > chunkRect[3]) chunkRect[3] = visY1;\n\n                  // Add to glyph ids array\n                  glyphIds[idx] = glyphId;\n\n                  // Add colors\n                  if (colorRanges) {\n                    const start = idx * 3;\n                    glyphColors[start] = currentColor >> 16 & 255;\n                    glyphColors[start + 1] = currentColor >> 8 & 255;\n                    glyphColors[start + 2] = currentColor & 255;\n                  }\n                }\n              }\n            }\n\n            // Increment y offset for next line\n            lineYOffset -= lineHeight;\n          });\n\n          // Fill in remaining caret positions in case the final character was a ligature\n          if (caretPositions) {\n            const ligCount = text.length - prevCharIndex;\n            if (ligCount > 1) {\n              fillLigatureCaretPositions(caretPositions, prevCharIndex, ligCount);\n            }\n          }\n        }\n\n        // Timing stats\n        timings.typesetting = now() - typesetStart;\n\n        callback({\n          glyphIds, //font indices for each glyph\n          glyphPositions, //x,y of each glyph's origin in layout\n          glyphData, //dict holding data about each glyph appearing in the text\n          caretPositions, //startX,endX,bottomY caret positions for each char\n          caretHeight, //height of cursor from bottom to top\n          glyphColors, //color for each glyph, if color ranges supplied\n          chunkedBounds, //total rects per (n=chunkedBoundsSize) consecutive glyphs\n          fontSize, //calculated em height\n          unitsPerEm, //font units per em\n          ascender: ascender * fontSizeMult, //font ascender\n          descender: descender * fontSizeMult, //font descender\n          capHeight: capHeight * fontSizeMult, //font cap-height\n          xHeight: xHeight * fontSizeMult, //font x-height\n          lineHeight, //computed line height\n          topBaseline, //y coordinate of the top line's baseline\n          blockBounds: [ //bounds for the whole block of text, including vertical padding for lineHeight\n            anchorXOffset,\n            anchorYOffset - lines.length * lineHeight,\n            anchorXOffset + maxLineWidth,\n            anchorYOffset\n          ],\n          visibleBounds, //total bounds of visible text paths, may be larger or smaller than blockBounds\n          timings\n        });\n      });\n    }\n\n\n    /**\n     * For a given text string and font parameters, determine the resulting block dimensions\n     * after wrapping for the given maxWidth.\n     * @param args\n     * @param callback\n     */\n    function measure(args, callback) {\n      typeset(args, (result) => {\n        const [x0, y0, x1, y1] = result.blockBounds;\n        callback({\n          width: x1 - x0,\n          height: y1 - y0\n        });\n      }, {metricsOnly: true});\n    }\n\n    function parsePercent(str) {\n      let match = str.match(/^([\\d.]+)%$/);\n      let pct = match ? parseFloat(match[1]) : NaN;\n      return isNaN(pct) ? 0 : pct / 100\n    }\n\n    function fillLigatureCaretPositions(caretPositions, ligStartIndex, ligCount) {\n      const ligStartX = caretPositions[ligStartIndex * 3];\n      const ligEndX = caretPositions[ligStartIndex * 3 + 1];\n      const ligY = caretPositions[ligStartIndex * 3 + 2];\n      const guessedAdvanceX = (ligEndX - ligStartX) / ligCount;\n      for (let i = 0; i < ligCount; i++) {\n        const startIndex = (ligStartIndex + i) * 3;\n        caretPositions[startIndex] = ligStartX + guessedAdvanceX * i;\n        caretPositions[startIndex + 1] = ligStartX + guessedAdvanceX * (i + 1);\n        caretPositions[startIndex + 2] = ligY;\n      }\n    }\n\n    function now() {\n      return (self.performance || Date).now()\n    }\n\n    // Array-backed structure for a single line's glyphs data\n    function TextLine() {\n      this.data = [];\n    }\n    const textLineProps = ['glyphObj', 'x', 'width', 'charIndex'];\n    TextLine.prototype = {\n      width: 0,\n      isSoftWrapped: false,\n      get count() {\n        return Math.ceil(this.data.length / textLineProps.length)\n      },\n      glyphAt(i) {\n        let fly = TextLine.flyweight;\n        fly.data = this.data;\n        fly.index = i;\n        return fly\n      },\n      splitAt(i) {\n        let newLine = new TextLine();\n        newLine.data = this.data.splice(i * textLineProps.length);\n        return newLine\n      }\n    };\n    TextLine.flyweight = textLineProps.reduce((obj, prop, i, all) => {\n      Object.defineProperty(obj, prop, {\n        get() {\n          return this.data[this.index * textLineProps.length + i]\n        },\n        set(val) {\n          this.data[this.index * textLineProps.length + i] = val;\n        }\n      });\n      return obj\n    }, {data: null, index: 0});\n\n\n    return {\n      typeset,\n      measure,\n      loadFont\n    }\n  }\n\n  const now = () => (self.performance || Date).now();\n\n  const mainThreadGenerator = /*#__PURE__*/ createSDFGenerator__default['default']();\n\n  let warned;\n\n  /**\n   * Generate an SDF texture image for a single glyph path, placing the result into a webgl canvas at a\n   * given location and channel. Utilizes the webgl-sdf-generator external package for GPU-accelerated SDF\n   * generation when supported.\n   */\n  function generateSDF(width, height, path, viewBox, distance, exponent, canvas, x, y, channel, useWebGL = true) {\n    // Allow opt-out\n    if (!useWebGL) {\n      return generateSDF_JS_Worker(width, height, path, viewBox, distance, exponent, canvas, x, y, channel)\n    }\n\n    // Attempt GPU-accelerated generation first\n    return generateSDF_GL(width, height, path, viewBox, distance, exponent, canvas, x, y, channel).then(\n      null,\n      err => {\n        // WebGL failed either due to a hard error or unexpected results; fall back to JS in workers\n        if (!warned) {\n          console.warn(`WebGL SDF generation failed, falling back to JS`, err);\n          warned = true;\n        }\n        return generateSDF_JS_Worker(width, height, path, viewBox, distance, exponent, canvas, x, y, channel)\n      }\n    )\n  }\n\n  const queue = [];\n  const chunkTimeBudget = 5; // ms\n  let timer = 0;\n\n  function nextChunk() {\n    const start = now();\n    while (queue.length && now() - start < chunkTimeBudget) {\n      queue.shift()();\n    }\n    timer = queue.length ? setTimeout(nextChunk, 0) : 0;\n  }\n\n  /**\n   * WebGL-based implementation executed on the main thread. Requests are executed in time-bounded\n   * macrotask chunks to allow render frames to execute in between.\n   */\n  const generateSDF_GL = (...args) => {\n    return new Promise((resolve, reject) => {\n      queue.push(() => {\n        const start = now();\n        try {\n          mainThreadGenerator.webgl.generateIntoCanvas(...args);\n          resolve({ timing: now() - start });\n        } catch (err) {\n          reject(err);\n        }\n      });\n      if (!timer) {\n        timer = setTimeout(nextChunk, 0);\n      }\n    })\n  };\n\n  const threadCount = 4; // how many workers to spawn\n  const idleTimeout = 2000; // workers will be terminated after being idle this many milliseconds\n  const threads = {};\n  let callNum = 0;\n\n  /**\n   * Fallback JS-based implementation, fanned out to a number of worker threads for parallelism\n   */\n  function generateSDF_JS_Worker(width, height, path, viewBox, distance, exponent, canvas, x, y, channel) {\n    const workerId = 'TroikaTextSDFGenerator_JS_' + ((callNum++) % threadCount);\n    let thread = threads[workerId];\n    if (!thread) {\n      thread = threads[workerId] = {\n        workerModule: troikaWorkerUtils.defineWorkerModule({\n          name: workerId,\n          workerId,\n          dependencies: [\n            createSDFGenerator__default['default'],\n            now\n          ],\n          init(_createSDFGenerator, now) {\n            const generate = _createSDFGenerator().javascript.generate;\n            return function (...args) {\n              const start = now();\n              const textureData = generate(...args);\n              return {\n                textureData,\n                timing: now() - start\n              }\n            }\n          },\n          getTransferables(result) {\n            return [result.textureData.buffer]\n          }\n        }),\n        requests: 0,\n        idleTimer: null\n      };\n    }\n\n    thread.requests++;\n    clearTimeout(thread.idleTimer);\n    return thread.workerModule(width, height, path, viewBox, distance, exponent)\n      .then(({ textureData, timing }) => {\n        // copy result data into the canvas\n        const start = now();\n        // expand single-channel data into rgba\n        const imageData = new Uint8Array(textureData.length * 4);\n        for (let i = 0; i < textureData.length; i++) {\n          imageData[i * 4 + channel] = textureData[i];\n        }\n        mainThreadGenerator.webglUtils.renderImageData(canvas, imageData, x, y, width, height, 1 << (3 - channel));\n        timing += now() - start;\n\n        // clean up workers after a while\n        if (--thread.requests === 0) {\n          thread.idleTimer = setTimeout(() => { troikaWorkerUtils.terminateWorker(workerId); }, idleTimeout);\n        }\n        return { timing }\n      })\n  }\n\n  function warmUpSDFCanvas(canvas) {\n    if (!canvas._warm) {\n      mainThreadGenerator.webgl.isSupported(canvas);\n      canvas._warm = true;\n    }\n  }\n\n  const resizeWebGLCanvasWithoutClearing = mainThreadGenerator.webglUtils.resizeWebGLCanvasWithoutClearing;\n\n  /*!\n  Custom build of Typr.ts (https://github.com/fredli74/Typr.ts) for use in Troika text rendering.\n  Original MIT license applies: https://github.com/fredli74/Typr.ts/blob/master/LICENSE\n  */\n  function typrFactory(){return \"undefined\"==typeof window&&(self.window=self),function(r){var e={parse:function(r){var t=e._bin,a=new Uint8Array(r);if(\"ttcf\"==t.readASCII(a,0,4)){var n=4;t.readUshort(a,n),n+=2,t.readUshort(a,n),n+=2;var o=t.readUint(a,n);n+=4;for(var s=[],i=0;i<o;i++){var h=t.readUint(a,n);n+=4,s.push(e._readFont(a,h));}return s}return [e._readFont(a,0)]},_readFont:function(r,t){var a=e._bin,n=t;a.readFixed(r,t),t+=4;var o=a.readUshort(r,t);t+=2,a.readUshort(r,t),t+=2,a.readUshort(r,t),t+=2,a.readUshort(r,t),t+=2;for(var s=[\"cmap\",\"head\",\"hhea\",\"maxp\",\"hmtx\",\"name\",\"OS/2\",\"post\",\"loca\",\"glyf\",\"kern\",\"CFF \",\"GPOS\",\"GSUB\",\"SVG \"],i={_data:r,_offset:n},h={},f=0;f<o;f++){var d=a.readASCII(r,t,4);t+=4,a.readUint(r,t),t+=4;var u=a.readUint(r,t);t+=4;var l=a.readUint(r,t);t+=4,h[d]={offset:u,length:l};}for(f=0;f<s.length;f++){var v=s[f];h[v]&&(i[v.trim()]=e[v.trim()].parse(r,h[v].offset,h[v].length,i));}return i},_tabOffset:function(r,t,a){for(var n=e._bin,o=n.readUshort(r,a+4),s=a+12,i=0;i<o;i++){var h=n.readASCII(r,s,4);s+=4,n.readUint(r,s),s+=4;var f=n.readUint(r,s);if(s+=4,n.readUint(r,s),s+=4,h==t)return f}return 0}};e._bin={readFixed:function(r,e){return (r[e]<<8|r[e+1])+(r[e+2]<<8|r[e+3])/65540},readF2dot14:function(r,t){return e._bin.readShort(r,t)/16384},readInt:function(r,t){return e._bin._view(r).getInt32(t)},readInt8:function(r,t){return e._bin._view(r).getInt8(t)},readShort:function(r,t){return e._bin._view(r).getInt16(t)},readUshort:function(r,t){return e._bin._view(r).getUint16(t)},readUshorts:function(r,t,a){for(var n=[],o=0;o<a;o++)n.push(e._bin.readUshort(r,t+2*o));return n},readUint:function(r,t){return e._bin._view(r).getUint32(t)},readUint64:function(r,t){return 4294967296*e._bin.readUint(r,t)+e._bin.readUint(r,t+4)},readASCII:function(r,e,t){for(var a=\"\",n=0;n<t;n++)a+=String.fromCharCode(r[e+n]);return a},readUnicode:function(r,e,t){for(var a=\"\",n=0;n<t;n++){var o=r[e++]<<8|r[e++];a+=String.fromCharCode(o);}return a},_tdec:\"undefined\"!=typeof window&&window.TextDecoder?new window.TextDecoder:null,readUTF8:function(r,t,a){var n=e._bin._tdec;return n&&0==t&&a==r.length?n.decode(r):e._bin.readASCII(r,t,a)},readBytes:function(r,e,t){for(var a=[],n=0;n<t;n++)a.push(r[e+n]);return a},readASCIIArray:function(r,e,t){for(var a=[],n=0;n<t;n++)a.push(String.fromCharCode(r[e+n]));return a},_view:function(r){return r._dataView||(r._dataView=r.buffer?new DataView(r.buffer,r.byteOffset,r.byteLength):new DataView(new Uint8Array(r).buffer))}},e._lctf={},e._lctf.parse=function(r,t,a,n,o){var s=e._bin,i={},h=t;s.readFixed(r,t),t+=4;var f=s.readUshort(r,t);t+=2;var d=s.readUshort(r,t);t+=2;var u=s.readUshort(r,t);return t+=2,i.scriptList=e._lctf.readScriptList(r,h+f),i.featureList=e._lctf.readFeatureList(r,h+d),i.lookupList=e._lctf.readLookupList(r,h+u,o),i},e._lctf.readLookupList=function(r,t,a){var n=e._bin,o=t,s=[],i=n.readUshort(r,t);t+=2;for(var h=0;h<i;h++){var f=n.readUshort(r,t);t+=2;var d=e._lctf.readLookupTable(r,o+f,a);s.push(d);}return s},e._lctf.readLookupTable=function(r,t,a){var n=e._bin,o=t,s={tabs:[]};s.ltype=n.readUshort(r,t),t+=2,s.flag=n.readUshort(r,t),t+=2;var i=n.readUshort(r,t);t+=2;for(var h=s.ltype,f=0;f<i;f++){var d=n.readUshort(r,t);t+=2;var u=a(r,h,o+d,s);s.tabs.push(u);}return s},e._lctf.numOfOnes=function(r){for(var e=0,t=0;t<32;t++)0!=(r>>>t&1)&&e++;return e},e._lctf.readClassDef=function(r,t){var a=e._bin,n=[],o=a.readUshort(r,t);if(t+=2,1==o){var s=a.readUshort(r,t);t+=2;var i=a.readUshort(r,t);t+=2;for(var h=0;h<i;h++)n.push(s+h),n.push(s+h),n.push(a.readUshort(r,t)),t+=2;}if(2==o){var f=a.readUshort(r,t);t+=2;for(h=0;h<f;h++)n.push(a.readUshort(r,t)),t+=2,n.push(a.readUshort(r,t)),t+=2,n.push(a.readUshort(r,t)),t+=2;}return n},e._lctf.getInterval=function(r,e){for(var t=0;t<r.length;t+=3){var a=r[t],n=r[t+1];if(r[t+2],a<=e&&e<=n)return t}return -1},e._lctf.readCoverage=function(r,t){var a=e._bin,n={};n.fmt=a.readUshort(r,t),t+=2;var o=a.readUshort(r,t);return t+=2,1==n.fmt&&(n.tab=a.readUshorts(r,t,o)),2==n.fmt&&(n.tab=a.readUshorts(r,t,3*o)),n},e._lctf.coverageIndex=function(r,t){var a=r.tab;if(1==r.fmt)return a.indexOf(t);if(2==r.fmt){var n=e._lctf.getInterval(a,t);if(-1!=n)return a[n+2]+(t-a[n])}return -1},e._lctf.readFeatureList=function(r,t){var a=e._bin,n=t,o=[],s=a.readUshort(r,t);t+=2;for(var i=0;i<s;i++){var h=a.readASCII(r,t,4);t+=4;var f=a.readUshort(r,t);t+=2;var d=e._lctf.readFeatureTable(r,n+f);d.tag=h.trim(),o.push(d);}return o},e._lctf.readFeatureTable=function(r,t){var a=e._bin,n=t,o={},s=a.readUshort(r,t);t+=2,s>0&&(o.featureParams=n+s);var i=a.readUshort(r,t);t+=2,o.tab=[];for(var h=0;h<i;h++)o.tab.push(a.readUshort(r,t+2*h));return o},e._lctf.readScriptList=function(r,t){var a=e._bin,n=t,o={},s=a.readUshort(r,t);t+=2;for(var i=0;i<s;i++){var h=a.readASCII(r,t,4);t+=4;var f=a.readUshort(r,t);t+=2,o[h.trim()]=e._lctf.readScriptTable(r,n+f);}return o},e._lctf.readScriptTable=function(r,t){var a=e._bin,n=t,o={},s=a.readUshort(r,t);t+=2,o.default=e._lctf.readLangSysTable(r,n+s);var i=a.readUshort(r,t);t+=2;for(var h=0;h<i;h++){var f=a.readASCII(r,t,4);t+=4;var d=a.readUshort(r,t);t+=2,o[f.trim()]=e._lctf.readLangSysTable(r,n+d);}return o},e._lctf.readLangSysTable=function(r,t){var a=e._bin,n={};a.readUshort(r,t),t+=2,n.reqFeature=a.readUshort(r,t),t+=2;var o=a.readUshort(r,t);return t+=2,n.features=a.readUshorts(r,t,o),n},e.CFF={},e.CFF.parse=function(r,t,a){var n=e._bin;(r=new Uint8Array(r.buffer,t,a))[t=0],r[++t],r[++t],r[++t],t++;var o=[];t=e.CFF.readIndex(r,t,o);for(var s=[],i=0;i<o.length-1;i++)s.push(n.readASCII(r,t+o[i],o[i+1]-o[i]));t+=o[o.length-1];var h=[];t=e.CFF.readIndex(r,t,h);var f=[];for(i=0;i<h.length-1;i++)f.push(e.CFF.readDict(r,t+h[i],t+h[i+1]));t+=h[h.length-1];var d=f[0],u=[];t=e.CFF.readIndex(r,t,u);var l=[];for(i=0;i<u.length-1;i++)l.push(n.readASCII(r,t+u[i],u[i+1]-u[i]));if(t+=u[u.length-1],e.CFF.readSubrs(r,t,d),d.CharStrings){t=d.CharStrings;u=[];t=e.CFF.readIndex(r,t,u);var v=[];for(i=0;i<u.length-1;i++)v.push(n.readBytes(r,t+u[i],u[i+1]-u[i]));d.CharStrings=v;}if(d.ROS){t=d.FDArray;var c=[];t=e.CFF.readIndex(r,t,c),d.FDArray=[];for(i=0;i<c.length-1;i++){var p=e.CFF.readDict(r,t+c[i],t+c[i+1]);e.CFF._readFDict(r,p,l),d.FDArray.push(p);}t+=c[c.length-1],t=d.FDSelect,d.FDSelect=[];var U=r[t];if(t++,3!=U)throw U;var g=n.readUshort(r,t);t+=2;for(i=0;i<g+1;i++)d.FDSelect.push(n.readUshort(r,t),r[t+2]),t+=3;}return d.Encoding&&(d.Encoding=e.CFF.readEncoding(r,d.Encoding,d.CharStrings.length)),d.charset&&(d.charset=e.CFF.readCharset(r,d.charset,d.CharStrings.length)),e.CFF._readFDict(r,d,l),d},e.CFF._readFDict=function(r,t,a){var n;for(var o in t.Private&&(n=t.Private[1],t.Private=e.CFF.readDict(r,n,n+t.Private[0]),t.Private.Subrs&&e.CFF.readSubrs(r,n+t.Private.Subrs,t.Private)),t)-1!=[\"FamilyName\",\"FontName\",\"FullName\",\"Notice\",\"version\",\"Copyright\"].indexOf(o)&&(t[o]=a[t[o]-426+35]);},e.CFF.readSubrs=function(r,t,a){var n=e._bin,o=[];t=e.CFF.readIndex(r,t,o);var s,i=o.length;s=i<1240?107:i<33900?1131:32768,a.Bias=s,a.Subrs=[];for(var h=0;h<o.length-1;h++)a.Subrs.push(n.readBytes(r,t+o[h],o[h+1]-o[h]));},e.CFF.tableSE=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,0,111,112,113,114,0,115,116,117,118,119,120,121,122,0,123,0,124,125,126,127,128,129,130,131,0,132,133,0,134,135,136,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,0,139,0,0,0,0,140,141,142,143,0,0,0,0,0,144,0,0,0,145,0,0,146,147,148,149,0,0,0,0],e.CFF.glyphByUnicode=function(r,e){for(var t=0;t<r.charset.length;t++)if(r.charset[t]==e)return t;return -1},e.CFF.glyphBySE=function(r,t){return t<0||t>255?-1:e.CFF.glyphByUnicode(r,e.CFF.tableSE[t])},e.CFF.readEncoding=function(r,t,a){e._bin;var n=[\".notdef\"],o=r[t];if(t++,0!=o)throw \"error: unknown encoding format: \"+o;var s=r[t];t++;for(var i=0;i<s;i++)n.push(r[t+i]);return n},e.CFF.readCharset=function(r,t,a){var n=e._bin,o=[\".notdef\"],s=r[t];if(t++,0==s)for(var i=0;i<a;i++){var h=n.readUshort(r,t);t+=2,o.push(h);}else {if(1!=s&&2!=s)throw \"error: format: \"+s;for(;o.length<a;){h=n.readUshort(r,t);t+=2;var f=0;1==s?(f=r[t],t++):(f=n.readUshort(r,t),t+=2);for(i=0;i<=f;i++)o.push(h),h++;}}return o},e.CFF.readIndex=function(r,t,a){var n=e._bin,o=n.readUshort(r,t)+1,s=r[t+=2];if(t++,1==s)for(var i=0;i<o;i++)a.push(r[t+i]);else if(2==s)for(i=0;i<o;i++)a.push(n.readUshort(r,t+2*i));else if(3==s)for(i=0;i<o;i++)a.push(16777215&n.readUint(r,t+3*i-1));else if(1!=o)throw \"unsupported offset size: \"+s+\", count: \"+o;return (t+=o*s)-1},e.CFF.getCharString=function(r,t,a){var n=e._bin,o=r[t],s=r[t+1];r[t+2],r[t+3],r[t+4];var i=1,h=null,f=null;o<=20&&(h=o,i=1),12==o&&(h=100*o+s,i=2),21<=o&&o<=27&&(h=o,i=1),28==o&&(f=n.readShort(r,t+1),i=3),29<=o&&o<=31&&(h=o,i=1),32<=o&&o<=246&&(f=o-139,i=1),247<=o&&o<=250&&(f=256*(o-247)+s+108,i=2),251<=o&&o<=254&&(f=256*-(o-251)-s-108,i=2),255==o&&(f=n.readInt(r,t+1)/65535,i=5),a.val=null!=f?f:\"o\"+h,a.size=i;},e.CFF.readCharString=function(r,t,a){for(var n=t+a,o=e._bin,s=[];t<n;){var i=r[t],h=r[t+1];r[t+2],r[t+3],r[t+4];var f=1,d=null,u=null;i<=20&&(d=i,f=1),12==i&&(d=100*i+h,f=2),19!=i&&20!=i||(d=i,f=2),21<=i&&i<=27&&(d=i,f=1),28==i&&(u=o.readShort(r,t+1),f=3),29<=i&&i<=31&&(d=i,f=1),32<=i&&i<=246&&(u=i-139,f=1),247<=i&&i<=250&&(u=256*(i-247)+h+108,f=2),251<=i&&i<=254&&(u=256*-(i-251)-h-108,f=2),255==i&&(u=o.readInt(r,t+1)/65535,f=5),s.push(null!=u?u:\"o\"+d),t+=f;}return s},e.CFF.readDict=function(r,t,a){for(var n=e._bin,o={},s=[];t<a;){var i=r[t],h=r[t+1];r[t+2],r[t+3],r[t+4];var f=1,d=null,u=null;if(28==i&&(u=n.readShort(r,t+1),f=3),29==i&&(u=n.readInt(r,t+1),f=5),32<=i&&i<=246&&(u=i-139,f=1),247<=i&&i<=250&&(u=256*(i-247)+h+108,f=2),251<=i&&i<=254&&(u=256*-(i-251)-h-108,f=2),255==i)throw u=n.readInt(r,t+1)/65535,f=5,\"unknown number\";if(30==i){var l=[];for(f=1;;){var v=r[t+f];f++;var c=v>>4,p=15&v;if(15!=c&&l.push(c),15!=p&&l.push(p),15==p)break}for(var U=\"\",g=[0,1,2,3,4,5,6,7,8,9,\".\",\"e\",\"e-\",\"reserved\",\"-\",\"endOfNumber\"],S=0;S<l.length;S++)U+=g[l[S]];u=parseFloat(U);}if(i<=21)if(d=[\"version\",\"Notice\",\"FullName\",\"FamilyName\",\"Weight\",\"FontBBox\",\"BlueValues\",\"OtherBlues\",\"FamilyBlues\",\"FamilyOtherBlues\",\"StdHW\",\"StdVW\",\"escape\",\"UniqueID\",\"XUID\",\"charset\",\"Encoding\",\"CharStrings\",\"Private\",\"Subrs\",\"defaultWidthX\",\"nominalWidthX\"][i],f=1,12==i)d=[\"Copyright\",\"isFixedPitch\",\"ItalicAngle\",\"UnderlinePosition\",\"UnderlineThickness\",\"PaintType\",\"CharstringType\",\"FontMatrix\",\"StrokeWidth\",\"BlueScale\",\"BlueShift\",\"BlueFuzz\",\"StemSnapH\",\"StemSnapV\",\"ForceBold\",0,0,\"LanguageGroup\",\"ExpansionFactor\",\"initialRandomSeed\",\"SyntheticBase\",\"PostScript\",\"BaseFontName\",\"BaseFontBlend\",0,0,0,0,0,0,\"ROS\",\"CIDFontVersion\",\"CIDFontRevision\",\"CIDFontType\",\"CIDCount\",\"UIDBase\",\"FDArray\",\"FDSelect\",\"FontName\"][h],f=2;null!=d?(o[d]=1==s.length?s[0]:s,s=[]):s.push(u),t+=f;}return o},e.cmap={},e.cmap.parse=function(r,t,a){r=new Uint8Array(r.buffer,t,a),t=0;var n=e._bin,o={};n.readUshort(r,t),t+=2;var s=n.readUshort(r,t);t+=2;var i=[];o.tables=[];for(var h=0;h<s;h++){var f=n.readUshort(r,t);t+=2;var d=n.readUshort(r,t);t+=2;var u=n.readUint(r,t);t+=4;var l=\"p\"+f+\"e\"+d,v=i.indexOf(u);if(-1==v){var c;v=o.tables.length,i.push(u);var p=n.readUshort(r,u);0==p?c=e.cmap.parse0(r,u):4==p?c=e.cmap.parse4(r,u):6==p?c=e.cmap.parse6(r,u):12==p?c=e.cmap.parse12(r,u):console.debug(\"unknown format: \"+p,f,d,u),o.tables.push(c);}if(null!=o[l])throw \"multiple tables for one platform+encoding\";o[l]=v;}return o},e.cmap.parse0=function(r,t){var a=e._bin,n={};n.format=a.readUshort(r,t),t+=2;var o=a.readUshort(r,t);t+=2,a.readUshort(r,t),t+=2,n.map=[];for(var s=0;s<o-6;s++)n.map.push(r[t+s]);return n},e.cmap.parse4=function(r,t){var a=e._bin,n=t,o={};o.format=a.readUshort(r,t),t+=2;var s=a.readUshort(r,t);t+=2,a.readUshort(r,t),t+=2;var i=a.readUshort(r,t);t+=2;var h=i/2;o.searchRange=a.readUshort(r,t),t+=2,o.entrySelector=a.readUshort(r,t),t+=2,o.rangeShift=a.readUshort(r,t),t+=2,o.endCount=a.readUshorts(r,t,h),t+=2*h,t+=2,o.startCount=a.readUshorts(r,t,h),t+=2*h,o.idDelta=[];for(var f=0;f<h;f++)o.idDelta.push(a.readShort(r,t)),t+=2;for(o.idRangeOffset=a.readUshorts(r,t,h),t+=2*h,o.glyphIdArray=[];t<n+s;)o.glyphIdArray.push(a.readUshort(r,t)),t+=2;return o},e.cmap.parse6=function(r,t){var a=e._bin,n={};n.format=a.readUshort(r,t),t+=2,a.readUshort(r,t),t+=2,a.readUshort(r,t),t+=2,n.firstCode=a.readUshort(r,t),t+=2;var o=a.readUshort(r,t);t+=2,n.glyphIdArray=[];for(var s=0;s<o;s++)n.glyphIdArray.push(a.readUshort(r,t)),t+=2;return n},e.cmap.parse12=function(r,t){var a=e._bin,n={};n.format=a.readUshort(r,t),t+=2,t+=2,a.readUint(r,t),t+=4,a.readUint(r,t),t+=4;var o=a.readUint(r,t);t+=4,n.groups=[];for(var s=0;s<o;s++){var i=t+12*s,h=a.readUint(r,i+0),f=a.readUint(r,i+4),d=a.readUint(r,i+8);n.groups.push([h,f,d]);}return n},e.glyf={},e.glyf.parse=function(r,e,t,a){for(var n=[],o=0;o<a.maxp.numGlyphs;o++)n.push(null);return n},e.glyf._parseGlyf=function(r,t){var a=e._bin,n=r._data,o=e._tabOffset(n,\"glyf\",r._offset)+r.loca[t];if(r.loca[t]==r.loca[t+1])return null;var s={};if(s.noc=a.readShort(n,o),o+=2,s.xMin=a.readShort(n,o),o+=2,s.yMin=a.readShort(n,o),o+=2,s.xMax=a.readShort(n,o),o+=2,s.yMax=a.readShort(n,o),o+=2,s.xMin>=s.xMax||s.yMin>=s.yMax)return null;if(s.noc>0){s.endPts=[];for(var i=0;i<s.noc;i++)s.endPts.push(a.readUshort(n,o)),o+=2;var h=a.readUshort(n,o);if(o+=2,n.length-o<h)return null;s.instructions=a.readBytes(n,o,h),o+=h;var f=s.endPts[s.noc-1]+1;s.flags=[];for(i=0;i<f;i++){var d=n[o];if(o++,s.flags.push(d),0!=(8&d)){var u=n[o];o++;for(var l=0;l<u;l++)s.flags.push(d),i++;}}s.xs=[];for(i=0;i<f;i++){var v=0!=(2&s.flags[i]),c=0!=(16&s.flags[i]);v?(s.xs.push(c?n[o]:-n[o]),o++):c?s.xs.push(0):(s.xs.push(a.readShort(n,o)),o+=2);}s.ys=[];for(i=0;i<f;i++){v=0!=(4&s.flags[i]),c=0!=(32&s.flags[i]);v?(s.ys.push(c?n[o]:-n[o]),o++):c?s.ys.push(0):(s.ys.push(a.readShort(n,o)),o+=2);}var p=0,U=0;for(i=0;i<f;i++)p+=s.xs[i],U+=s.ys[i],s.xs[i]=p,s.ys[i]=U;}else {var g;s.parts=[];do{g=a.readUshort(n,o),o+=2;var S={m:{a:1,b:0,c:0,d:1,tx:0,ty:0},p1:-1,p2:-1};if(s.parts.push(S),S.glyphIndex=a.readUshort(n,o),o+=2,1&g){var m=a.readShort(n,o);o+=2;var b=a.readShort(n,o);o+=2;}else {m=a.readInt8(n,o);o++;b=a.readInt8(n,o);o++;}2&g?(S.m.tx=m,S.m.ty=b):(S.p1=m,S.p2=b),8&g?(S.m.a=S.m.d=a.readF2dot14(n,o),o+=2):64&g?(S.m.a=a.readF2dot14(n,o),o+=2,S.m.d=a.readF2dot14(n,o),o+=2):128&g&&(S.m.a=a.readF2dot14(n,o),o+=2,S.m.b=a.readF2dot14(n,o),o+=2,S.m.c=a.readF2dot14(n,o),o+=2,S.m.d=a.readF2dot14(n,o),o+=2);}while(32&g);if(256&g){var y=a.readUshort(n,o);o+=2,s.instr=[];for(i=0;i<y;i++)s.instr.push(n[o]),o++;}}return s},e.GPOS={},e.GPOS.parse=function(r,t,a,n){return e._lctf.parse(r,t,a,n,e.GPOS.subt)},e.GPOS.subt=function(r,t,a,n){var o=e._bin,s=a,i={};if(i.fmt=o.readUshort(r,a),a+=2,1==t||2==t||3==t||7==t||8==t&&i.fmt<=2){var h=o.readUshort(r,a);a+=2,i.coverage=e._lctf.readCoverage(r,h+s);}if(1==t&&1==i.fmt){var f=o.readUshort(r,a);a+=2;var d=e._lctf.numOfOnes(f);0!=f&&(i.pos=e.GPOS.readValueRecord(r,a,f));}else if(2==t&&i.fmt>=1&&i.fmt<=2){f=o.readUshort(r,a);a+=2;var u=o.readUshort(r,a);a+=2;d=e._lctf.numOfOnes(f);var l=e._lctf.numOfOnes(u);if(1==i.fmt){i.pairsets=[];var v=o.readUshort(r,a);a+=2;for(var c=0;c<v;c++){var p=s+o.readUshort(r,a);a+=2;var U=o.readUshort(r,p);p+=2;for(var g=[],S=0;S<U;S++){var m=o.readUshort(r,p);p+=2,0!=f&&(x=e.GPOS.readValueRecord(r,p,f),p+=2*d),0!=u&&(P=e.GPOS.readValueRecord(r,p,u),p+=2*l),g.push({gid2:m,val1:x,val2:P});}i.pairsets.push(g);}}if(2==i.fmt){var b=o.readUshort(r,a);a+=2;var y=o.readUshort(r,a);a+=2;var F=o.readUshort(r,a);a+=2;var _=o.readUshort(r,a);a+=2,i.classDef1=e._lctf.readClassDef(r,s+b),i.classDef2=e._lctf.readClassDef(r,s+y),i.matrix=[];for(c=0;c<F;c++){var C=[];for(S=0;S<_;S++){var x=null,P=null;0!=f&&(x=e.GPOS.readValueRecord(r,a,f),a+=2*d),0!=u&&(P=e.GPOS.readValueRecord(r,a,u),a+=2*l),C.push({val1:x,val2:P});}i.matrix.push(C);}}}else {if(9==t&&1==i.fmt){var I=o.readUshort(r,a);a+=2;var w=o.readUint(r,a);if(a+=4,9==n.ltype)n.ltype=I;else if(n.ltype!=I)throw \"invalid extension substitution\";return e.GPOS.subt(r,n.ltype,s+w)}console.debug(\"unsupported GPOS table LookupType\",t,\"format\",i.fmt);}return i},e.GPOS.readValueRecord=function(r,t,a){var n=e._bin,o=[];return o.push(1&a?n.readShort(r,t):0),t+=1&a?2:0,o.push(2&a?n.readShort(r,t):0),t+=2&a?2:0,o.push(4&a?n.readShort(r,t):0),t+=4&a?2:0,o.push(8&a?n.readShort(r,t):0),t+=8&a?2:0,o},e.GSUB={},e.GSUB.parse=function(r,t,a,n){return e._lctf.parse(r,t,a,n,e.GSUB.subt)},e.GSUB.subt=function(r,t,a,n){var o=e._bin,s=a,i={};if(i.fmt=o.readUshort(r,a),a+=2,1!=t&&4!=t&&5!=t&&6!=t)return null;if(1==t||4==t||5==t&&i.fmt<=2||6==t&&i.fmt<=2){var h=o.readUshort(r,a);a+=2,i.coverage=e._lctf.readCoverage(r,s+h);}if(1==t&&i.fmt>=1&&i.fmt<=2){if(1==i.fmt)i.delta=o.readShort(r,a),a+=2;else if(2==i.fmt){var f=o.readUshort(r,a);a+=2,i.newg=o.readUshorts(r,a,f),a+=2*i.newg.length;}}else if(4==t){i.vals=[];f=o.readUshort(r,a);a+=2;for(var d=0;d<f;d++){var u=o.readUshort(r,a);a+=2,i.vals.push(e.GSUB.readLigatureSet(r,s+u));}}else if(5==t&&2==i.fmt){if(2==i.fmt){var l=o.readUshort(r,a);a+=2,i.cDef=e._lctf.readClassDef(r,s+l),i.scset=[];var v=o.readUshort(r,a);a+=2;for(d=0;d<v;d++){var c=o.readUshort(r,a);a+=2,i.scset.push(0==c?null:e.GSUB.readSubClassSet(r,s+c));}}}else if(6==t&&3==i.fmt){if(3==i.fmt){for(d=0;d<3;d++){f=o.readUshort(r,a);a+=2;for(var p=[],U=0;U<f;U++)p.push(e._lctf.readCoverage(r,s+o.readUshort(r,a+2*U)));a+=2*f,0==d&&(i.backCvg=p),1==d&&(i.inptCvg=p),2==d&&(i.ahedCvg=p);}f=o.readUshort(r,a);a+=2,i.lookupRec=e.GSUB.readSubstLookupRecords(r,a,f);}}else {if(7==t&&1==i.fmt){var g=o.readUshort(r,a);a+=2;var S=o.readUint(r,a);if(a+=4,9==n.ltype)n.ltype=g;else if(n.ltype!=g)throw \"invalid extension substitution\";return e.GSUB.subt(r,n.ltype,s+S)}console.debug(\"unsupported GSUB table LookupType\",t,\"format\",i.fmt);}return i},e.GSUB.readSubClassSet=function(r,t){var a=e._bin.readUshort,n=t,o=[],s=a(r,t);t+=2;for(var i=0;i<s;i++){var h=a(r,t);t+=2,o.push(e.GSUB.readSubClassRule(r,n+h));}return o},e.GSUB.readSubClassRule=function(r,t){var a=e._bin.readUshort,n={},o=a(r,t),s=a(r,t+=2);t+=2,n.input=[];for(var i=0;i<o-1;i++)n.input.push(a(r,t)),t+=2;return n.substLookupRecords=e.GSUB.readSubstLookupRecords(r,t,s),n},e.GSUB.readSubstLookupRecords=function(r,t,a){for(var n=e._bin.readUshort,o=[],s=0;s<a;s++)o.push(n(r,t),n(r,t+2)),t+=4;return o},e.GSUB.readChainSubClassSet=function(r,t){var a=e._bin,n=t,o=[],s=a.readUshort(r,t);t+=2;for(var i=0;i<s;i++){var h=a.readUshort(r,t);t+=2,o.push(e.GSUB.readChainSubClassRule(r,n+h));}return o},e.GSUB.readChainSubClassRule=function(r,t){for(var a=e._bin,n={},o=[\"backtrack\",\"input\",\"lookahead\"],s=0;s<o.length;s++){var i=a.readUshort(r,t);t+=2,1==s&&i--,n[o[s]]=a.readUshorts(r,t,i),t+=2*n[o[s]].length;}i=a.readUshort(r,t);return t+=2,n.subst=a.readUshorts(r,t,2*i),t+=2*n.subst.length,n},e.GSUB.readLigatureSet=function(r,t){var a=e._bin,n=t,o=[],s=a.readUshort(r,t);t+=2;for(var i=0;i<s;i++){var h=a.readUshort(r,t);t+=2,o.push(e.GSUB.readLigature(r,n+h));}return o},e.GSUB.readLigature=function(r,t){var a=e._bin,n={chain:[]};n.nglyph=a.readUshort(r,t),t+=2;var o=a.readUshort(r,t);t+=2;for(var s=0;s<o-1;s++)n.chain.push(a.readUshort(r,t)),t+=2;return n},e.head={},e.head.parse=function(r,t,a){var n=e._bin,o={};return n.readFixed(r,t),t+=4,o.fontRevision=n.readFixed(r,t),t+=4,n.readUint(r,t),t+=4,n.readUint(r,t),t+=4,o.flags=n.readUshort(r,t),t+=2,o.unitsPerEm=n.readUshort(r,t),t+=2,o.created=n.readUint64(r,t),t+=8,o.modified=n.readUint64(r,t),t+=8,o.xMin=n.readShort(r,t),t+=2,o.yMin=n.readShort(r,t),t+=2,o.xMax=n.readShort(r,t),t+=2,o.yMax=n.readShort(r,t),t+=2,o.macStyle=n.readUshort(r,t),t+=2,o.lowestRecPPEM=n.readUshort(r,t),t+=2,o.fontDirectionHint=n.readShort(r,t),t+=2,o.indexToLocFormat=n.readShort(r,t),t+=2,o.glyphDataFormat=n.readShort(r,t),t+=2,o},e.hhea={},e.hhea.parse=function(r,t,a){var n=e._bin,o={};return n.readFixed(r,t),t+=4,o.ascender=n.readShort(r,t),t+=2,o.descender=n.readShort(r,t),t+=2,o.lineGap=n.readShort(r,t),t+=2,o.advanceWidthMax=n.readUshort(r,t),t+=2,o.minLeftSideBearing=n.readShort(r,t),t+=2,o.minRightSideBearing=n.readShort(r,t),t+=2,o.xMaxExtent=n.readShort(r,t),t+=2,o.caretSlopeRise=n.readShort(r,t),t+=2,o.caretSlopeRun=n.readShort(r,t),t+=2,o.caretOffset=n.readShort(r,t),t+=2,t+=8,o.metricDataFormat=n.readShort(r,t),t+=2,o.numberOfHMetrics=n.readUshort(r,t),t+=2,o},e.hmtx={},e.hmtx.parse=function(r,t,a,n){for(var o=e._bin,s={aWidth:[],lsBearing:[]},i=0,h=0,f=0;f<n.maxp.numGlyphs;f++)f<n.hhea.numberOfHMetrics&&(i=o.readUshort(r,t),t+=2,h=o.readShort(r,t),t+=2),s.aWidth.push(i),s.lsBearing.push(h);return s},e.kern={},e.kern.parse=function(r,t,a,n){var o=e._bin,s=o.readUshort(r,t);if(t+=2,1==s)return e.kern.parseV1(r,t-2,a,n);var i=o.readUshort(r,t);t+=2;for(var h={glyph1:[],rval:[]},f=0;f<i;f++){t+=2;a=o.readUshort(r,t);t+=2;var d=o.readUshort(r,t);t+=2;var u=d>>>8;if(0!=(u&=15))throw \"unknown kern table format: \"+u;t=e.kern.readFormat0(r,t,h);}return h},e.kern.parseV1=function(r,t,a,n){var o=e._bin;o.readFixed(r,t),t+=4;var s=o.readUint(r,t);t+=4;for(var i={glyph1:[],rval:[]},h=0;h<s;h++){o.readUint(r,t),t+=4;var f=o.readUshort(r,t);t+=2,o.readUshort(r,t),t+=2;var d=f>>>8;if(0!=(d&=15))throw \"unknown kern table format: \"+d;t=e.kern.readFormat0(r,t,i);}return i},e.kern.readFormat0=function(r,t,a){var n=e._bin,o=-1,s=n.readUshort(r,t);t+=2,n.readUshort(r,t),t+=2,n.readUshort(r,t),t+=2,n.readUshort(r,t),t+=2;for(var i=0;i<s;i++){var h=n.readUshort(r,t);t+=2;var f=n.readUshort(r,t);t+=2;var d=n.readShort(r,t);t+=2,h!=o&&(a.glyph1.push(h),a.rval.push({glyph2:[],vals:[]}));var u=a.rval[a.rval.length-1];u.glyph2.push(f),u.vals.push(d),o=h;}return t},e.loca={},e.loca.parse=function(r,t,a,n){var o=e._bin,s=[],i=n.head.indexToLocFormat,h=n.maxp.numGlyphs+1;if(0==i)for(var f=0;f<h;f++)s.push(o.readUshort(r,t+(f<<1))<<1);if(1==i)for(f=0;f<h;f++)s.push(o.readUint(r,t+(f<<2)));return s},e.maxp={},e.maxp.parse=function(r,t,a){var n=e._bin,o={},s=n.readUint(r,t);return t+=4,o.numGlyphs=n.readUshort(r,t),t+=2,65536==s&&(o.maxPoints=n.readUshort(r,t),t+=2,o.maxContours=n.readUshort(r,t),t+=2,o.maxCompositePoints=n.readUshort(r,t),t+=2,o.maxCompositeContours=n.readUshort(r,t),t+=2,o.maxZones=n.readUshort(r,t),t+=2,o.maxTwilightPoints=n.readUshort(r,t),t+=2,o.maxStorage=n.readUshort(r,t),t+=2,o.maxFunctionDefs=n.readUshort(r,t),t+=2,o.maxInstructionDefs=n.readUshort(r,t),t+=2,o.maxStackElements=n.readUshort(r,t),t+=2,o.maxSizeOfInstructions=n.readUshort(r,t),t+=2,o.maxComponentElements=n.readUshort(r,t),t+=2,o.maxComponentDepth=n.readUshort(r,t),t+=2),o},e.name={},e.name.parse=function(r,t,a){var n=e._bin,o={};n.readUshort(r,t),t+=2;var s=n.readUshort(r,t);t+=2,n.readUshort(r,t);for(var i,h=[\"copyright\",\"fontFamily\",\"fontSubfamily\",\"ID\",\"fullName\",\"version\",\"postScriptName\",\"trademark\",\"manufacturer\",\"designer\",\"description\",\"urlVendor\",\"urlDesigner\",\"licence\",\"licenceURL\",\"---\",\"typoFamilyName\",\"typoSubfamilyName\",\"compatibleFull\",\"sampleText\",\"postScriptCID\",\"wwsFamilyName\",\"wwsSubfamilyName\",\"lightPalette\",\"darkPalette\"],f=t+=2,d=0;d<s;d++){var u=n.readUshort(r,t);t+=2;var l=n.readUshort(r,t);t+=2;var v=n.readUshort(r,t);t+=2;var c=n.readUshort(r,t);t+=2;var p=n.readUshort(r,t);t+=2;var U=n.readUshort(r,t);t+=2;var g,S=h[c],m=f+12*s+U;if(0==u)g=n.readUnicode(r,m,p/2);else if(3==u&&0==l)g=n.readUnicode(r,m,p/2);else if(0==l)g=n.readASCII(r,m,p);else if(1==l)g=n.readUnicode(r,m,p/2);else if(3==l)g=n.readUnicode(r,m,p/2);else {if(1!=u)throw \"unknown encoding \"+l+\", platformID: \"+u;g=n.readASCII(r,m,p),console.debug(\"reading unknown MAC encoding \"+l+\" as ASCII\");}var b=\"p\"+u+\",\"+v.toString(16);null==o[b]&&(o[b]={}),o[b][void 0!==S?S:c]=g,o[b]._lang=v;}for(var y in o)if(null!=o[y].postScriptName&&1033==o[y]._lang)return o[y];for(var y in o)if(null!=o[y].postScriptName&&0==o[y]._lang)return o[y];for(var y in o)if(null!=o[y].postScriptName&&3084==o[y]._lang)return o[y];for(var y in o)if(null!=o[y].postScriptName)return o[y];for(var y in o){i=y;break}return console.debug(\"returning name table with languageID \"+o[i]._lang),o[i]},e[\"OS/2\"]={},e[\"OS/2\"].parse=function(r,t,a){var n=e._bin.readUshort(r,t);t+=2;var o={};if(0==n)e[\"OS/2\"].version0(r,t,o);else if(1==n)e[\"OS/2\"].version1(r,t,o);else if(2==n||3==n||4==n)e[\"OS/2\"].version2(r,t,o);else {if(5!=n)throw \"unknown OS/2 table version: \"+n;e[\"OS/2\"].version5(r,t,o);}return o},e[\"OS/2\"].version0=function(r,t,a){var n=e._bin;return a.xAvgCharWidth=n.readShort(r,t),t+=2,a.usWeightClass=n.readUshort(r,t),t+=2,a.usWidthClass=n.readUshort(r,t),t+=2,a.fsType=n.readUshort(r,t),t+=2,a.ySubscriptXSize=n.readShort(r,t),t+=2,a.ySubscriptYSize=n.readShort(r,t),t+=2,a.ySubscriptXOffset=n.readShort(r,t),t+=2,a.ySubscriptYOffset=n.readShort(r,t),t+=2,a.ySuperscriptXSize=n.readShort(r,t),t+=2,a.ySuperscriptYSize=n.readShort(r,t),t+=2,a.ySuperscriptXOffset=n.readShort(r,t),t+=2,a.ySuperscriptYOffset=n.readShort(r,t),t+=2,a.yStrikeoutSize=n.readShort(r,t),t+=2,a.yStrikeoutPosition=n.readShort(r,t),t+=2,a.sFamilyClass=n.readShort(r,t),t+=2,a.panose=n.readBytes(r,t,10),t+=10,a.ulUnicodeRange1=n.readUint(r,t),t+=4,a.ulUnicodeRange2=n.readUint(r,t),t+=4,a.ulUnicodeRange3=n.readUint(r,t),t+=4,a.ulUnicodeRange4=n.readUint(r,t),t+=4,a.achVendID=[n.readInt8(r,t),n.readInt8(r,t+1),n.readInt8(r,t+2),n.readInt8(r,t+3)],t+=4,a.fsSelection=n.readUshort(r,t),t+=2,a.usFirstCharIndex=n.readUshort(r,t),t+=2,a.usLastCharIndex=n.readUshort(r,t),t+=2,a.sTypoAscender=n.readShort(r,t),t+=2,a.sTypoDescender=n.readShort(r,t),t+=2,a.sTypoLineGap=n.readShort(r,t),t+=2,a.usWinAscent=n.readUshort(r,t),t+=2,a.usWinDescent=n.readUshort(r,t),t+=2},e[\"OS/2\"].version1=function(r,t,a){var n=e._bin;return t=e[\"OS/2\"].version0(r,t,a),a.ulCodePageRange1=n.readUint(r,t),t+=4,a.ulCodePageRange2=n.readUint(r,t),t+=4},e[\"OS/2\"].version2=function(r,t,a){var n=e._bin;return t=e[\"OS/2\"].version1(r,t,a),a.sxHeight=n.readShort(r,t),t+=2,a.sCapHeight=n.readShort(r,t),t+=2,a.usDefault=n.readUshort(r,t),t+=2,a.usBreak=n.readUshort(r,t),t+=2,a.usMaxContext=n.readUshort(r,t),t+=2},e[\"OS/2\"].version5=function(r,t,a){var n=e._bin;return t=e[\"OS/2\"].version2(r,t,a),a.usLowerOpticalPointSize=n.readUshort(r,t),t+=2,a.usUpperOpticalPointSize=n.readUshort(r,t),t+=2},e.post={},e.post.parse=function(r,t,a){var n=e._bin,o={};return o.version=n.readFixed(r,t),t+=4,o.italicAngle=n.readFixed(r,t),t+=4,o.underlinePosition=n.readShort(r,t),t+=2,o.underlineThickness=n.readShort(r,t),t+=2,o},null==e&&(e={}),null==e.U&&(e.U={}),e.U.codeToGlyph=function(r,e){var t=r.cmap,a=-1;if(null!=t.p0e4?a=t.p0e4:null!=t.p3e1?a=t.p3e1:null!=t.p1e0?a=t.p1e0:null!=t.p0e3&&(a=t.p0e3),-1==a)throw \"no familiar platform and encoding!\";var n=t.tables[a];if(0==n.format)return e>=n.map.length?0:n.map[e];if(4==n.format){for(var o=-1,s=0;s<n.endCount.length;s++)if(e<=n.endCount[s]){o=s;break}if(-1==o)return 0;if(n.startCount[o]>e)return 0;return 65535&(0!=n.idRangeOffset[o]?n.glyphIdArray[e-n.startCount[o]+(n.idRangeOffset[o]>>1)-(n.idRangeOffset.length-o)]:e+n.idDelta[o])}if(12==n.format){if(e>n.groups[n.groups.length-1][1])return 0;for(s=0;s<n.groups.length;s++){var i=n.groups[s];if(i[0]<=e&&e<=i[1])return i[2]+(e-i[0])}return 0}throw \"unknown cmap table format \"+n.format},e.U.glyphToPath=function(r,t){var a={cmds:[],crds:[]};if(r.SVG&&r.SVG.entries[t]){var n=r.SVG.entries[t];return null==n?a:(\"string\"==typeof n&&(n=e.SVG.toPath(n),r.SVG.entries[t]=n),n)}if(r.CFF){var o={x:0,y:0,stack:[],nStems:0,haveWidth:!1,width:r.CFF.Private?r.CFF.Private.defaultWidthX:0,open:!1},s=r.CFF,i=r.CFF.Private;if(s.ROS){for(var h=0;s.FDSelect[h+2]<=t;)h+=2;i=s.FDArray[s.FDSelect[h+1]].Private;}e.U._drawCFF(r.CFF.CharStrings[t],o,s,i,a);}else r.glyf&&e.U._drawGlyf(t,r,a);return a},e.U._drawGlyf=function(r,t,a){var n=t.glyf[r];null==n&&(n=t.glyf[r]=e.glyf._parseGlyf(t,r)),null!=n&&(n.noc>-1?e.U._simpleGlyph(n,a):e.U._compoGlyph(n,t,a));},e.U._simpleGlyph=function(r,t){for(var a=0;a<r.noc;a++){for(var n=0==a?0:r.endPts[a-1]+1,o=r.endPts[a],s=n;s<=o;s++){var i=s==n?o:s-1,h=s==o?n:s+1,f=1&r.flags[s],d=1&r.flags[i],u=1&r.flags[h],l=r.xs[s],v=r.ys[s];if(s==n)if(f){if(!d){e.U.P.moveTo(t,l,v);continue}e.U.P.moveTo(t,r.xs[i],r.ys[i]);}else d?e.U.P.moveTo(t,r.xs[i],r.ys[i]):e.U.P.moveTo(t,(r.xs[i]+l)/2,(r.ys[i]+v)/2);f?d&&e.U.P.lineTo(t,l,v):u?e.U.P.qcurveTo(t,l,v,r.xs[h],r.ys[h]):e.U.P.qcurveTo(t,l,v,(l+r.xs[h])/2,(v+r.ys[h])/2);}e.U.P.closePath(t);}},e.U._compoGlyph=function(r,t,a){for(var n=0;n<r.parts.length;n++){var o={cmds:[],crds:[]},s=r.parts[n];e.U._drawGlyf(s.glyphIndex,t,o);for(var i=s.m,h=0;h<o.crds.length;h+=2){var f=o.crds[h],d=o.crds[h+1];a.crds.push(f*i.a+d*i.b+i.tx),a.crds.push(f*i.c+d*i.d+i.ty);}for(h=0;h<o.cmds.length;h++)a.cmds.push(o.cmds[h]);}},e.U._getGlyphClass=function(r,t){var a=e._lctf.getInterval(t,r);return -1==a?0:t[a+2]},e.U.getPairAdjustment=function(r,t,a){var n=!1;if(r.GPOS)for(var o=r.GPOS,s=o.lookupList,i=o.featureList,h=[],f=0;f<i.length;f++){var d=i[f];if(\"kern\"==d.tag){n=!0;for(var u=0;u<d.tab.length;u++)if(!h[d.tab[u]]){h[d.tab[u]]=!0;for(var l=s[d.tab[u]],v=0;v<l.tabs.length;v++)if(null!=l.tabs[v]){var c,p=l.tabs[v];if(!p.coverage||-1!=(c=e._lctf.coverageIndex(p.coverage,t)))if(1==l.ltype);else if(2==l.ltype){var U=null;if(1==p.fmt){var g=p.pairsets[c];for(f=0;f<g.length;f++)g[f].gid2==a&&(U=g[f]);}else if(2==p.fmt){var S=e.U._getGlyphClass(t,p.classDef1),m=e.U._getGlyphClass(a,p.classDef2);U=p.matrix[S][m];}if(U){var b=0;return U.val1&&U.val1[2]&&(b+=U.val1[2]),U.val2&&U.val2[0]&&(b+=U.val2[0]),b}}}}}}if(r.kern&&!n){var y=r.kern.glyph1.indexOf(t);if(-1!=y){var F=r.kern.rval[y].glyph2.indexOf(a);if(-1!=F)return r.kern.rval[y].vals[F]}}return 0},e.U._applySubs=function(r,t,a,n){for(var o=r.length-t-1,s=0;s<a.tabs.length;s++)if(null!=a.tabs[s]){var i,h=a.tabs[s];if(!h.coverage||-1!=(i=e._lctf.coverageIndex(h.coverage,r[t])))if(1==a.ltype)r[t],1==h.fmt?r[t]=r[t]+h.delta:r[t]=h.newg[i];else if(4==a.ltype)for(var f=h.vals[i],d=0;d<f.length;d++){var u=f[d],l=u.chain.length;if(!(l>o)){for(var v=!0,c=0,p=0;p<l;p++){for(;-1==r[t+c+(1+p)];)c++;u.chain[p]!=r[t+c+(1+p)]&&(v=!1);}if(v){r[t]=u.nglyph;for(p=0;p<l+c;p++)r[t+p+1]=-1;break}}}else if(5==a.ltype&&2==h.fmt)for(var U=e._lctf.getInterval(h.cDef,r[t]),g=h.cDef[U+2],S=h.scset[g],m=0;m<S.length;m++){var b=S[m],y=b.input;if(!(y.length>o)){for(v=!0,p=0;p<y.length;p++){var F=e._lctf.getInterval(h.cDef,r[t+1+p]);if(-1==U&&h.cDef[F+2]!=y[p]){v=!1;break}}if(v){var _=b.substLookupRecords;for(d=0;d<_.length;d+=2)_[d],_[d+1];}}}else if(6==a.ltype&&3==h.fmt){if(!e.U._glsCovered(r,h.backCvg,t-h.backCvg.length))continue;if(!e.U._glsCovered(r,h.inptCvg,t))continue;if(!e.U._glsCovered(r,h.ahedCvg,t+h.inptCvg.length))continue;var C=h.lookupRec;for(m=0;m<C.length;m+=2){U=C[m];var x=n[C[m+1]];e.U._applySubs(r,t+U,x,n);}}}},e.U._glsCovered=function(r,t,a){for(var n=0;n<t.length;n++){if(-1==e._lctf.coverageIndex(t[n],r[a+n]))return !1}return !0},e.U.glyphsToPath=function(r,t,a){for(var n={cmds:[],crds:[]},o=0,s=0;s<t.length;s++){var i=t[s];if(-1!=i){for(var h=s<t.length-1&&-1!=t[s+1]?t[s+1]:0,f=e.U.glyphToPath(r,i),d=0;d<f.crds.length;d+=2)n.crds.push(f.crds[d]+o),n.crds.push(f.crds[d+1]);a&&n.cmds.push(a);for(d=0;d<f.cmds.length;d++)n.cmds.push(f.cmds[d]);a&&n.cmds.push(\"X\"),o+=r.hmtx.aWidth[i],s<t.length-1&&(o+=e.U.getPairAdjustment(r,i,h));}}return n},e.U.P={},e.U.P.moveTo=function(r,e,t){r.cmds.push(\"M\"),r.crds.push(e,t);},e.U.P.lineTo=function(r,e,t){r.cmds.push(\"L\"),r.crds.push(e,t);},e.U.P.curveTo=function(r,e,t,a,n,o,s){r.cmds.push(\"C\"),r.crds.push(e,t,a,n,o,s);},e.U.P.qcurveTo=function(r,e,t,a,n){r.cmds.push(\"Q\"),r.crds.push(e,t,a,n);},e.U.P.closePath=function(r){r.cmds.push(\"Z\");},e.U._drawCFF=function(r,t,a,n,o){for(var s=t.stack,i=t.nStems,h=t.haveWidth,f=t.width,d=t.open,u=0,l=t.x,v=t.y,c=0,p=0,U=0,g=0,S=0,m=0,b=0,y=0,F=0,_=0,C={val:0,size:0};u<r.length;){e.CFF.getCharString(r,u,C);var x=C.val;if(u+=C.size,\"o1\"==x||\"o18\"==x)s.length%2!=0&&!h&&(f=s.shift()+n.nominalWidthX),i+=s.length>>1,s.length=0,h=!0;else if(\"o3\"==x||\"o23\"==x){s.length%2!=0&&!h&&(f=s.shift()+n.nominalWidthX),i+=s.length>>1,s.length=0,h=!0;}else if(\"o4\"==x)s.length>1&&!h&&(f=s.shift()+n.nominalWidthX,h=!0),d&&e.U.P.closePath(o),v+=s.pop(),e.U.P.moveTo(o,l,v),d=!0;else if(\"o5\"==x)for(;s.length>0;)l+=s.shift(),v+=s.shift(),e.U.P.lineTo(o,l,v);else if(\"o6\"==x||\"o7\"==x)for(var P=s.length,I=\"o6\"==x,w=0;w<P;w++){var O=s.shift();I?l+=O:v+=O,I=!I,e.U.P.lineTo(o,l,v);}else if(\"o8\"==x||\"o24\"==x){P=s.length;for(var T=0;T+6<=P;)c=l+s.shift(),p=v+s.shift(),U=c+s.shift(),g=p+s.shift(),l=U+s.shift(),v=g+s.shift(),e.U.P.curveTo(o,c,p,U,g,l,v),T+=6;\"o24\"==x&&(l+=s.shift(),v+=s.shift(),e.U.P.lineTo(o,l,v));}else {if(\"o11\"==x)break;if(\"o1234\"==x||\"o1235\"==x||\"o1236\"==x||\"o1237\"==x)\"o1234\"==x&&(p=v,U=(c=l+s.shift())+s.shift(),_=g=p+s.shift(),m=g,y=v,l=(b=(S=(F=U+s.shift())+s.shift())+s.shift())+s.shift(),e.U.P.curveTo(o,c,p,U,g,F,_),e.U.P.curveTo(o,S,m,b,y,l,v)),\"o1235\"==x&&(c=l+s.shift(),p=v+s.shift(),U=c+s.shift(),g=p+s.shift(),F=U+s.shift(),_=g+s.shift(),S=F+s.shift(),m=_+s.shift(),b=S+s.shift(),y=m+s.shift(),l=b+s.shift(),v=y+s.shift(),s.shift(),e.U.P.curveTo(o,c,p,U,g,F,_),e.U.P.curveTo(o,S,m,b,y,l,v)),\"o1236\"==x&&(c=l+s.shift(),p=v+s.shift(),U=c+s.shift(),_=g=p+s.shift(),m=g,b=(S=(F=U+s.shift())+s.shift())+s.shift(),y=m+s.shift(),l=b+s.shift(),e.U.P.curveTo(o,c,p,U,g,F,_),e.U.P.curveTo(o,S,m,b,y,l,v)),\"o1237\"==x&&(c=l+s.shift(),p=v+s.shift(),U=c+s.shift(),g=p+s.shift(),F=U+s.shift(),_=g+s.shift(),S=F+s.shift(),m=_+s.shift(),b=S+s.shift(),y=m+s.shift(),Math.abs(b-l)>Math.abs(y-v)?l=b+s.shift():v=y+s.shift(),e.U.P.curveTo(o,c,p,U,g,F,_),e.U.P.curveTo(o,S,m,b,y,l,v));else if(\"o14\"==x){if(s.length>0&&!h&&(f=s.shift()+a.nominalWidthX,h=!0),4==s.length){var k=s.shift(),G=s.shift(),D=s.shift(),B=s.shift(),L=e.CFF.glyphBySE(a,D),R=e.CFF.glyphBySE(a,B);e.U._drawCFF(a.CharStrings[L],t,a,n,o),t.x=k,t.y=G,e.U._drawCFF(a.CharStrings[R],t,a,n,o);}d&&(e.U.P.closePath(o),d=!1);}else if(\"o19\"==x||\"o20\"==x){s.length%2!=0&&!h&&(f=s.shift()+n.nominalWidthX),i+=s.length>>1,s.length=0,h=!0,u+=i+7>>3;}else if(\"o21\"==x)s.length>2&&!h&&(f=s.shift()+n.nominalWidthX,h=!0),v+=s.pop(),l+=s.pop(),d&&e.U.P.closePath(o),e.U.P.moveTo(o,l,v),d=!0;else if(\"o22\"==x)s.length>1&&!h&&(f=s.shift()+n.nominalWidthX,h=!0),l+=s.pop(),d&&e.U.P.closePath(o),e.U.P.moveTo(o,l,v),d=!0;else if(\"o25\"==x){for(;s.length>6;)l+=s.shift(),v+=s.shift(),e.U.P.lineTo(o,l,v);c=l+s.shift(),p=v+s.shift(),U=c+s.shift(),g=p+s.shift(),l=U+s.shift(),v=g+s.shift(),e.U.P.curveTo(o,c,p,U,g,l,v);}else if(\"o26\"==x)for(s.length%2&&(l+=s.shift());s.length>0;)c=l,p=v+s.shift(),l=U=c+s.shift(),v=(g=p+s.shift())+s.shift(),e.U.P.curveTo(o,c,p,U,g,l,v);else if(\"o27\"==x)for(s.length%2&&(v+=s.shift());s.length>0;)p=v,U=(c=l+s.shift())+s.shift(),g=p+s.shift(),l=U+s.shift(),v=g,e.U.P.curveTo(o,c,p,U,g,l,v);else if(\"o10\"==x||\"o29\"==x){var A=\"o10\"==x?n:a;if(0==s.length)console.debug(\"error: empty stack\");else {var W=s.pop(),M=A.Subrs[W+A.Bias];t.x=l,t.y=v,t.nStems=i,t.haveWidth=h,t.width=f,t.open=d,e.U._drawCFF(M,t,a,n,o),l=t.x,v=t.y,i=t.nStems,h=t.haveWidth,f=t.width,d=t.open;}}else if(\"o30\"==x||\"o31\"==x){var V=s.length,N=(T=0,\"o31\"==x);for(T+=V-(P=-3&V);T<P;)N?(p=v,U=(c=l+s.shift())+s.shift(),v=(g=p+s.shift())+s.shift(),P-T==5?(l=U+s.shift(),T++):l=U,N=!1):(c=l,p=v+s.shift(),U=c+s.shift(),g=p+s.shift(),l=U+s.shift(),P-T==5?(v=g+s.shift(),T++):v=g,N=!0),e.U.P.curveTo(o,c,p,U,g,l,v),T+=4;}else {if(\"o\"==(x+\"\").charAt(0))throw console.debug(\"Unknown operation: \"+x,r),x;s.push(x);}}}t.x=l,t.y=v,t.nStems=i,t.haveWidth=h,t.width=f,t.open=d;};var t=e,a={Typr:t};return r.Typr=t,r.default=a,Object.defineProperty(r,\"__esModule\",{value:!0}),r}({}).Typr}\n\n  /*!\n  Custom bundle of woff2otf (https://github.com/arty-name/woff2otf) with fflate\n  (https://github.com/101arrowz/fflate) for use in Troika text rendering. \n  Original licenses apply: \n  - fflate: https://github.com/101arrowz/fflate/blob/master/LICENSE (MIT)\n  - woff2otf.js: https://github.com/arty-name/woff2otf/blob/master/woff2otf.js (Apache2)\n  */\n  function woff2otfFactory(){return function(r){var e=Uint8Array,n=Uint16Array,t=Uint32Array,a=new e([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),i=new e([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),o=new e([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),f=function(r,e){for(var a=new n(31),i=0;i<31;++i)a[i]=e+=1<<r[i-1];var o=new t(a[30]);for(i=1;i<30;++i)for(var f=a[i];f<a[i+1];++f)o[f]=f-a[i]<<5|i;return [a,o]},u=f(a,2),v=u[0],s=u[1];v[28]=258,s[258]=28;for(var l=f(i,0)[0],c=new n(32768),g=0;g<32768;++g){var h=(43690&g)>>>1|(21845&g)<<1;h=(61680&(h=(52428&h)>>>2|(13107&h)<<2))>>>4|(3855&h)<<4,c[g]=((65280&h)>>>8|(255&h)<<8)>>>1;}var w=function(r,e,t){for(var a=r.length,i=0,o=new n(e);i<a;++i)++o[r[i]-1];var f,u=new n(e);for(i=0;i<e;++i)u[i]=u[i-1]+o[i-1]<<1;if(t){f=new n(1<<e);var v=15-e;for(i=0;i<a;++i)if(r[i])for(var s=i<<4|r[i],l=e-r[i],g=u[r[i]-1]++<<l,h=g|(1<<l)-1;g<=h;++g)f[c[g]>>>v]=s;}else for(f=new n(a),i=0;i<a;++i)r[i]&&(f[i]=c[u[r[i]-1]++]>>>15-r[i]);return f},d=new e(288);for(g=0;g<144;++g)d[g]=8;for(g=144;g<256;++g)d[g]=9;for(g=256;g<280;++g)d[g]=7;for(g=280;g<288;++g)d[g]=8;var m=new e(32);for(g=0;g<32;++g)m[g]=5;var b=w(d,9,1),p=w(m,5,1),y=function(r){for(var e=r[0],n=1;n<r.length;++n)r[n]>e&&(e=r[n]);return e},L=function(r,e,n){var t=e/8|0;return (r[t]|r[t+1]<<8)>>(7&e)&n},U=function(r,e){var n=e/8|0;return (r[n]|r[n+1]<<8|r[n+2]<<16)>>(7&e)},k=[\"unexpected EOF\",\"invalid block type\",\"invalid length/literal\",\"invalid distance\",\"stream finished\",\"no stream handler\",,\"no callback\",\"invalid UTF-8 data\",\"extra field too long\",\"date not in range 1980-2099\",\"filename too long\",\"stream finishing\",\"invalid zip data\"],T=function(r,e,n){var t=new Error(e||k[r]);if(t.code=r,Error.captureStackTrace&&Error.captureStackTrace(t,T),!n)throw t;return t},O=function(r,f,u){var s=r.length;if(!s||u&&!u.l&&s<5)return f||new e(0);var c=!f||u,g=!u||u.i;u||(u={}),f||(f=new e(3*s));var h,d=function(r){var n=f.length;if(r>n){var t=new e(Math.max(2*n,r));t.set(f),f=t;}},m=u.f||0,k=u.p||0,O=u.b||0,A=u.l,x=u.d,E=u.m,D=u.n,M=8*s;do{if(!A){u.f=m=L(r,k,1);var S=L(r,k+1,3);if(k+=3,!S){var V=r[(I=((h=k)/8|0)+(7&h&&1)+4)-4]|r[I-3]<<8,_=I+V;if(_>s){g&&T(0);break}c&&d(O+V),f.set(r.subarray(I,_),O),u.b=O+=V,u.p=k=8*_;continue}if(1==S)A=b,x=p,E=9,D=5;else if(2==S){var j=L(r,k,31)+257,z=L(r,k+10,15)+4,C=j+L(r,k+5,31)+1;k+=14;for(var F=new e(C),P=new e(19),q=0;q<z;++q)P[o[q]]=L(r,k+3*q,7);k+=3*z;var B=y(P),G=(1<<B)-1,H=w(P,B,1);for(q=0;q<C;){var I,J=H[L(r,k,G)];if(k+=15&J,(I=J>>>4)<16)F[q++]=I;else {var K=0,N=0;for(16==I?(N=3+L(r,k,3),k+=2,K=F[q-1]):17==I?(N=3+L(r,k,7),k+=3):18==I&&(N=11+L(r,k,127),k+=7);N--;)F[q++]=K;}}var Q=F.subarray(0,j),R=F.subarray(j);E=y(Q),D=y(R),A=w(Q,E,1),x=w(R,D,1);}else T(1);if(k>M){g&&T(0);break}}c&&d(O+131072);for(var W=(1<<E)-1,X=(1<<D)-1,Y=k;;Y=k){var Z=(K=A[U(r,k)&W])>>>4;if((k+=15&K)>M){g&&T(0);break}if(K||T(2),Z<256)f[O++]=Z;else {if(256==Z){Y=k,A=null;break}var $=Z-254;if(Z>264){var rr=a[q=Z-257];$=L(r,k,(1<<rr)-1)+v[q],k+=rr;}var er=x[U(r,k)&X],nr=er>>>4;er||T(3),k+=15&er;R=l[nr];if(nr>3){rr=i[nr];R+=U(r,k)&(1<<rr)-1,k+=rr;}if(k>M){g&&T(0);break}c&&d(O+131072);for(var tr=O+$;O<tr;O+=4)f[O]=f[O-R],f[O+1]=f[O+1-R],f[O+2]=f[O+2-R],f[O+3]=f[O+3-R];O=tr;}}u.l=A,u.p=Y,u.b=O,A&&(m=1,u.m=E,u.d=x,u.n=D);}while(!m);return O==f.length?f:function(r,a,i){(null==a||a<0)&&(a=0),(null==i||i>r.length)&&(i=r.length);var o=new(r instanceof n?n:r instanceof t?t:e)(i-a);return o.set(r.subarray(a,i)),o}(f,0,O)},A=new e(0);var x=\"undefined\"!=typeof TextDecoder&&new TextDecoder;try{x.decode(A,{stream:!0}),1;}catch(r){}return r.convert_streams=function(r){var e=new DataView(r),n=0;function t(){var r=e.getUint16(n);return n+=2,r}function a(){var r=e.getUint32(n);return n+=4,r}function i(r){m.setUint16(b,r),b+=2;}function o(r){m.setUint32(b,r),b+=4;}for(var f={signature:a(),flavor:a(),length:a(),numTables:t(),reserved:t(),totalSfntSize:a(),majorVersion:t(),minorVersion:t(),metaOffset:a(),metaLength:a(),metaOrigLength:a(),privOffset:a(),privLength:a()},u=0;Math.pow(2,u)<=f.numTables;)u++;u--;for(var v=16*Math.pow(2,u),s=16*f.numTables-v,l=12,c=[],g=0;g<f.numTables;g++)c.push({tag:a(),offset:a(),compLength:a(),origLength:a(),origChecksum:a()}),l+=16;var h,w=new Uint8Array(12+16*c.length+c.reduce((function(r,e){return r+e.origLength+4}),0)),d=w.buffer,m=new DataView(d),b=0;return o(f.flavor),i(f.numTables),i(v),i(u),i(s),c.forEach((function(r){o(r.tag),o(r.origChecksum),o(l),o(r.origLength),r.outOffset=l,(l+=r.origLength)%4!=0&&(l+=4-l%4);})),c.forEach((function(e){var n,t=r.slice(e.offset,e.offset+e.compLength);if(e.compLength!=e.origLength){var a=new Uint8Array(e.origLength);n=new Uint8Array(t,2),O(n,a);}else a=new Uint8Array(t);w.set(a,e.outOffset);var i=0;(l=e.outOffset+e.origLength)%4!=0&&(i=4-l%4),w.set(new Uint8Array(i).buffer,e.outOffset+e.origLength),h=l+i;})),d.slice(0,h)},Object.defineProperty(r,\"__esModule\",{value:!0}),r}({}).convert_streams}\n\n  /**\n   * A factory wrapper parsing a font file using Typr.\n   * Also adds support for WOFF files (not WOFF2).\n   */\n\n  function parserFactory(Typr, woff2otf) {\n    const cmdArgLengths = {\n      M: 2,\n      L: 2,\n      Q: 4,\n      C: 6,\n      Z: 0\n    };\n\n    // {joinType: \"skip+step,...\"}\n    const joiningTypeRawData = {\"C\":\"18g,ca,368,1kz\",\"D\":\"17k,6,2,2+4,5+c,2+6,2+1,10+1,9+f,j+11,2+1,a,2,2+1,15+2,3,j+2,6+3,2+8,2,2,2+1,w+a,4+e,3+3,2,3+2,3+5,23+w,2f+4,3,2+9,2,b,2+3,3,1k+9,6+1,3+1,2+2,2+d,30g,p+y,1,1+1g,f+x,2,sd2+1d,jf3+4,f+3,2+4,2+2,b+3,42,2,4+2,2+1,2,3,t+1,9f+w,2,el+2,2+g,d+2,2l,2+1,5,3+1,2+1,2,3,6,16wm+1v\",\"R\":\"17m+3,2,2,6+3,m,15+2,2+2,h+h,13,3+8,2,2,3+1,2,p+1,x,5+4,5,a,2,2,3,u,c+2,g+1,5,2+1,4+1,5j,6+1,2,b,2+2,f,2+1,1s+2,2,3+1,7,1ez0,2,2+1,4+4,b,4,3,b,42,2+2,4,3,2+1,2,o+3,ae,ep,x,2o+2,3+1,3,5+1,6\",\"L\":\"x9u,jff,a,fd,jv\",\"T\":\"4t,gj+33,7o+4,1+1,7c+18,2,2+1,2+1,2,21+a,2,1b+k,h,2u+6,3+5,3+1,2+3,y,2,v+q,2k+a,1n+8,a,p+3,2+8,2+2,2+4,18+2,3c+e,2+v,1k,2,5+7,5,4+6,b+1,u,1n,5+3,9,l+1,r,3+1,1m,5+1,5+1,3+2,4,v+1,4,c+1,1m,5+4,2+1,5,l+1,n+5,2,1n,3,2+3,9,8+1,c+1,v,1q,d,1f,4,1m+2,6+2,2+3,8+1,c+1,u,1n,3,7,6+1,l+1,t+1,1m+1,5+3,9,l+1,u,21,8+2,2,2j,3+6,d+7,2r,3+8,c+5,23+1,s,2,2,1k+d,2+4,2+1,6+a,2+z,a,2v+3,2+5,2+1,3+1,q+1,5+2,h+3,e,3+1,7,g,jk+2,qb+2,u+2,u+1,v+1,1t+1,2+6,9,3+a,a,1a+2,3c+1,z,3b+2,5+1,a,7+2,64+1,3,1n,2+6,2,2,3+7,7+9,3,1d+d,1,1+1,1s+3,1d,2+4,2,6,15+8,d+1,x+3,3+1,2+2,1l,2+1,4,2+2,1n+7,3+1,49+2,2+c,2+6,5,7,4+1,5j+1l,2+4,ek,3+1,r+4,1e+4,6+5,2p+c,1+3,1,1+2,1+b,2db+2,3y,2p+v,ff+3,30+1,n9x,1+2,2+9,x+1,29+1,7l,4,5,q+1,6,48+1,r+h,e,13+7,q+a,1b+2,1d,3+3,3+1,14,1w+5,3+1,3+1,d,9,1c,1g,2+2,3+1,6+1,2,17+1,9,6n,3,5,fn5,ki+f,h+f,5s,6y+2,ea,6b,46+4,1af+2,2+1,6+3,15+2,5,4m+1,fy+3,as+1,4a+a,4x,1j+e,1l+2,1e+3,3+1,1y+2,11+4,2+7,1r,d+1,1h+8,b+3,3,2o+2,3,2+1,7,4h,4+7,m+1,1m+1,4,12+6,4+4,5g+7,3+2,2,o,2d+5,2,5+1,2+1,6n+3,7+1,2+1,s+1,2e+7,3,2+1,2z,2,3+5,2,2u+2,3+3,2+4,78+8,2+1,75+1,2,5,41+3,3+1,5,x+9,15+5,3+3,9,a+5,3+2,1b+c,2+1,bb+6,2+5,2,2b+l,3+6,2+1,2+1,3f+5,4,2+1,2+6,2,21+1,4,2,9o+1,470+8,at4+4,1o+6,t5,1s+3,2a,f5l+1,2+3,43o+2,a+7,1+7,3+6,v+3,45+2,1j0+1i,5+1d,9,f,n+4,2+e,11t+6,2+g,3+6,2+1,2+4,7a+6,c6+3,15t+6,32+6,1,gzau,v+2n,3l+6n\"};\n\n    const JT_LEFT = 1, //indicates that a character joins with the subsequent character, but does not join with the preceding character.\n      JT_RIGHT = 2, //indicates that a character joins with the preceding character, but does not join with the subsequent character.\n      JT_DUAL = 4, //indicates that a character joins with the preceding character and joins with the subsequent character.\n      JT_TRANSPARENT = 8, //indicates that the character does not join with adjacent characters and that the character must be skipped over when the shaping engine is evaluating the joining positions in a sequence of characters. When a JT_TRANSPARENT character is encountered in a sequence, the JOINING_TYPE of the preceding character passes through. Diacritical marks are frequently assigned this value.\n      JT_JOIN_CAUSING = 16, //indicates that the character forces the use of joining forms with the preceding and subsequent characters. Kashidas and the Zero Width Joiner (U+200D) are both JOIN_CAUSING characters.\n      JT_NON_JOINING = 32; //indicates that a character does not join with the preceding or with the subsequent character.,\n\n    let joiningTypeMap;\n    function getCharJoiningType(ch) {\n      if (!joiningTypeMap) {\n        const m = {\n          R: JT_RIGHT,\n          L: JT_LEFT,\n          D: JT_DUAL,\n          C: JT_JOIN_CAUSING,\n          U: JT_NON_JOINING,\n          T: JT_TRANSPARENT\n        };\n        joiningTypeMap = new Map();\n        for (let type in joiningTypeRawData) {\n          let lastCode = 0;\n          joiningTypeRawData[type].split(',').forEach(range => {\n            let [skip, step] = range.split('+');\n            skip = parseInt(skip,36);\n            step = step ? parseInt(step, 36) : 0;\n            joiningTypeMap.set(lastCode += skip, m[type]);\n            for (let i = step; i--;) {\n              joiningTypeMap.set(++lastCode, m[type]);\n            }\n          });\n        }\n      }\n      return joiningTypeMap.get(ch) || JT_NON_JOINING\n    }\n\n    const ISOL = 1, INIT = 2, FINA = 3, MEDI = 4;\n    const formsToFeatures = [null, 'isol', 'init', 'fina', 'medi'];\n\n    function detectJoiningForms(str) {\n      // This implements the algorithm described here:\n      // https://github.com/n8willis/opentype-shaping-documents/blob/master/opentype-shaping-arabic-general.md\n      const joiningForms = new Uint8Array(str.length);\n      let prevJoiningType = JT_NON_JOINING;\n      let prevForm = ISOL;\n      let prevIndex = -1;\n      for (let i = 0; i < str.length; i++) {\n        const code = str.codePointAt(i);\n        let joiningType = getCharJoiningType(code) | 0;\n        let form = ISOL;\n        if (joiningType & JT_TRANSPARENT) {\n          continue\n        }\n        if (prevJoiningType & (JT_LEFT | JT_DUAL | JT_JOIN_CAUSING)) {\n          if (joiningType & (JT_RIGHT | JT_DUAL | JT_JOIN_CAUSING)) {\n            form = FINA;\n            // isol->init, fina->medi\n            if (prevForm === ISOL || prevForm === FINA) {\n              joiningForms[prevIndex]++;\n            }\n          }\n          else if (joiningType & (JT_LEFT | JT_NON_JOINING)) {\n            // medi->fina, init->isol\n            if (prevForm === INIT || prevForm === MEDI) {\n              joiningForms[prevIndex]--;\n            }\n          }\n        }\n        else if (prevJoiningType & (JT_RIGHT | JT_NON_JOINING)) {\n          // medi->fina, init->isol\n          if (prevForm === INIT || prevForm === MEDI) {\n            joiningForms[prevIndex]--;\n          }\n        }\n        prevForm = joiningForms[i] = form;\n        prevJoiningType = joiningType;\n        prevIndex = i;\n        if (code > 0xffff) i++;\n      }\n      // console.log(str.split('').map(ch => ch.codePointAt(0).toString(16)))\n      // console.log(str.split('').map(ch => getCharJoiningType(ch.codePointAt(0))))\n      // console.log(Array.from(joiningForms).map(f => formsToFeatures[f] || 'none'))\n      return joiningForms\n    }\n\n    function stringToGlyphs (font, str) {\n      const glyphIds = [];\n      for (let i = 0; i < str.length; i++) {\n        const cc = str.codePointAt(i);\n        if (cc > 0xffff) i++;\n        glyphIds.push(Typr.U.codeToGlyph(font, cc));\n      }\n\n      const gsub = font['GSUB'];\n      if (gsub) {\n        const {lookupList, featureList} = gsub;\n        let joiningForms;\n        const supportedFeatures = /^(rlig|liga|mset|isol|init|fina|medi|half|pres|blws)$/;\n        const usedLookups = [];\n        featureList.forEach(feature => {\n          if (supportedFeatures.test(feature.tag)) {\n            for (let ti = 0; ti < feature.tab.length; ti++) {\n              if (usedLookups[feature.tab[ti]]) continue\n              usedLookups[feature.tab[ti]] = true;\n              const tab = lookupList[feature.tab[ti]];\n              const isJoiningFeature = /^(isol|init|fina|medi)$/.test(feature.tag);\n              if (isJoiningFeature && !joiningForms) { //lazy\n                joiningForms = detectJoiningForms(str);\n              }\n              for (let ci = 0; ci < glyphIds.length; ci++) {\n                if (!joiningForms || !isJoiningFeature || formsToFeatures[joiningForms[ci]] === feature.tag) {\n                  Typr.U._applySubs(glyphIds, ci, tab, lookupList);\n                }\n              }\n            }\n          }\n        });\n      }\n\n      return glyphIds\n    }\n\n    function firstNum(...args) {\n      for (let i = 0; i < args.length; i++) {\n        if (typeof args[i] === 'number') {\n          return args[i]\n        }\n      }\n    }\n\n    function wrapFontObj(typrFont) {\n      const glyphMap = Object.create(null);\n\n      const os2 = typrFont['OS/2'];\n      const hhea = typrFont.hhea;\n      const unitsPerEm = typrFont.head.unitsPerEm;\n      const ascender = firstNum(os2 && os2.sTypoAscender, hhea && hhea.ascender, unitsPerEm);\n\n      const fontObj = {\n        unitsPerEm,\n        ascender,\n        descender: firstNum(os2 && os2.sTypoDescender, hhea && hhea.descender, 0),\n        capHeight: firstNum(os2 && os2.sCapHeight, ascender),\n        xHeight: firstNum(os2 && os2.sxHeight, ascender),\n        lineGap: firstNum(os2 && os2.sTypoLineGap, hhea && hhea.lineGap),\n        forEachGlyph(text, fontSize, letterSpacing, callback) {\n          let glyphX = 0;\n          const fontScale = 1 / fontObj.unitsPerEm * fontSize;\n\n          const glyphIndices = stringToGlyphs(typrFont, text);\n          let charIndex = 0;\n          let prevGlyphIndex = -1;\n          glyphIndices.forEach((glyphIndex, i) => {\n            // Typr returns a glyph index per string codepoint, with -1s in place of those that\n            // were omitted due to ligature substitution. So we can track original index in the\n            // string via simple increment, and skip everything else when seeing a -1.\n            if (glyphIndex !== -1) {\n              let glyphObj = glyphMap[glyphIndex];\n              if (!glyphObj) {\n                const {cmds, crds} = Typr.U.glyphToPath(typrFont, glyphIndex);\n\n                // Build path string\n                let path = '';\n                let crdsIdx = 0;\n                for (let i = 0, len = cmds.length; i < len; i++) {\n                  const numArgs = cmdArgLengths[cmds[i]];\n                  path += cmds[i];\n                  for (let j = 1; j <= numArgs; j++) {\n                    path += (j > 1 ? ',' : '') + crds[crdsIdx++];\n                  }\n                }\n\n                // Find extents - Glyf gives this in metadata but not CFF, and Typr doesn't\n                // normalize the two, so it's simplest just to iterate ourselves.\n                let xMin, yMin, xMax, yMax;\n                if (crds.length) {\n                  xMin = yMin = Infinity;\n                  xMax = yMax = -Infinity;\n                  for (let i = 0, len = crds.length; i < len; i += 2) {\n                    let x = crds[i];\n                    let y = crds[i + 1];\n                    if (x < xMin) xMin = x;\n                    if (y < yMin) yMin = y;\n                    if (x > xMax) xMax = x;\n                    if (y > yMax) yMax = y;\n                  }\n                } else {\n                  xMin = xMax = yMin = yMax = 0;\n                }\n\n                glyphObj = glyphMap[glyphIndex] = {\n                  index: glyphIndex,\n                  advanceWidth: typrFont.hmtx.aWidth[glyphIndex],\n                  xMin,\n                  yMin,\n                  xMax,\n                  yMax,\n                  path,\n                  pathCommandCount: cmds.length,\n                  // forEachPathCommand(callback) {\n                  //   let argsIndex = 0\n                  //   const argsArray = []\n                  //   for (let i = 0, len = cmds.length; i < len; i++) {\n                  //     const numArgs = cmdArgLengths[cmds[i]]\n                  //     argsArray.length = 1 + numArgs\n                  //     argsArray[0] = cmds[i]\n                  //     for (let j = 1; j <= numArgs; j++) {\n                  //       argsArray[j] = crds[argsIndex++]\n                  //     }\n                  //     callback.apply(null, argsArray)\n                  //   }\n                  // }\n                };\n              }\n\n              // Kerning\n              if (prevGlyphIndex !== -1) {\n                glyphX += Typr.U.getPairAdjustment(typrFont, prevGlyphIndex, glyphIndex) * fontScale;\n              }\n\n              callback.call(null, glyphObj, glyphX, charIndex);\n\n              if (glyphObj.advanceWidth) {\n                glyphX += glyphObj.advanceWidth * fontScale;\n              }\n              if (letterSpacing) {\n                glyphX += letterSpacing * fontSize;\n              }\n\n              prevGlyphIndex = glyphIndex;\n            }\n            charIndex += (text.codePointAt(charIndex) > 0xffff ? 2 : 1);\n          });\n          return glyphX\n        }\n      };\n\n      return fontObj\n    }\n\n    return function parse(buffer) {\n      // Look to see if we have a WOFF file and convert it if so:\n      const peek = new Uint8Array(buffer, 0, 4);\n      const tag = Typr._bin.readASCII(peek, 0, 4);\n      if (tag === 'wOFF') {\n        buffer = woff2otf(buffer);\n      } else if (tag === 'wOF2') {\n        throw new Error('woff2 fonts not supported')\n      }\n      return wrapFontObj(Typr.parse(buffer)[0])\n    }\n  }\n\n\n  const workerModule = /*#__PURE__*/troikaWorkerUtils.defineWorkerModule({\n    name: 'Typr Font Parser',\n    dependencies: [typrFactory, woff2otfFactory, parserFactory],\n    init(typrFactory, woff2otfFactory, parserFactory) {\n      const Typr = typrFactory();\n      const woff2otf = woff2otfFactory();\n      return parserFactory(Typr, woff2otf)\n    }\n  });\n\n  const CONFIG = {\n    defaultFontURL: 'https://fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu4mxM.woff', //Roboto Regular\n    sdfGlyphSize: 64,\n    sdfMargin: 1 / 16,\n    sdfExponent: 9,\n    textureWidth: 2048\n  };\n  const tempColor = /*#__PURE__*/new three.Color();\n  let hasRequested = false;\n\n  function now$1() {\n    return (self.performance || Date).now()\n  }\n\n  /**\n   * Customizes the text builder configuration. This must be called prior to the first font processing\n   * request, and applies to all fonts.\n   *\n   * @param {String} config.defaultFontURL - The URL of the default font to use for text processing\n   *                 requests, in case none is specified or the specifiede font fails to load or parse.\n   *                 Defaults to \"Roboto Regular\" from Google Fonts.\n   * @param {Number} config.sdfGlyphSize - The default size of each glyph's SDF (signed distance field)\n   *                 texture used for rendering. Must be a power-of-two number, and applies to all fonts,\n   *                 but note that this can also be overridden per call to `getTextRenderInfo()`.\n   *                 Larger sizes can improve the quality of glyph rendering by increasing the sharpness\n   *                 of corners and preventing loss of very thin lines, at the expense of memory. Defaults\n   *                 to 64 which is generally a good balance of size and quality.\n   * @param {Number} config.sdfExponent - The exponent used when encoding the SDF values. A higher exponent\n   *                 shifts the encoded 8-bit values to achieve higher precision/accuracy at texels nearer\n   *                 the glyph's path, with lower precision further away. Defaults to 9.\n   * @param {Number} config.sdfMargin - How much space to reserve in the SDF as margin outside the glyph's\n   *                 path, as a percentage of the SDF width. A larger margin increases the quality of\n   *                 extruded glyph outlines, but decreases the precision available for the glyph itself.\n   *                 Defaults to 1/16th of the glyph size.\n   * @param {Number} config.textureWidth - The width of the SDF texture; must be a power of 2. Defaults to\n   *                 2048 which is a safe maximum texture dimension according to the stats at\n   *                 https://webglstats.com/webgl/parameter/MAX_TEXTURE_SIZE and should allow for a\n   *                 reasonably large number of glyphs (default glyph size of 64^2 and safe texture size of\n   *                 2048^2, times 4 channels, allows for 4096 glyphs.) This can be increased if you need to\n   *                 increase the glyph size and/or have an extraordinary number of glyphs.\n   */\n  function configureTextBuilder(config) {\n    if (hasRequested) {\n      console.warn('configureTextBuilder called after first font request; will be ignored.');\n    } else {\n      assign(CONFIG, config);\n    }\n  }\n\n  /**\n   * Repository for all font SDF atlas textures and their glyph mappings. There is a separate atlas for\n   * each sdfGlyphSize. Each atlas has a single Texture that holds all glyphs for all fonts.\n   *\n   *   {\n   *     [sdfGlyphSize]: {\n   *       glyphCount: number,\n   *       sdfGlyphSize: number,\n   *       sdfTexture: Texture,\n   *       sdfCanvas: HTMLCanvasElement,\n   *       contextLost: boolean,\n   *       glyphsByFont: Map<fontURL, Map<glyphID, {path, atlasIndex, sdfViewBox}>>\n   *     }\n   *   }\n   */\n  const atlases = Object.create(null);\n\n  /**\n   * @typedef {object} TroikaTextRenderInfo - Format of the result from `getTextRenderInfo`.\n   * @property {object} parameters - The normalized input arguments to the render call.\n   * @property {Texture} sdfTexture - The SDF atlas texture.\n   * @property {number} sdfGlyphSize - The size of each glyph's SDF; see `configureTextBuilder`.\n   * @property {number} sdfExponent - The exponent used in encoding the SDF's values; see `configureTextBuilder`.\n   * @property {Float32Array} glyphBounds - List of [minX, minY, maxX, maxY] quad bounds for each glyph.\n   * @property {Float32Array} glyphAtlasIndices - List holding each glyph's index in the SDF atlas.\n   * @property {Uint8Array} [glyphColors] - List holding each glyph's [r, g, b] color, if `colorRanges` was supplied.\n   * @property {Float32Array} [caretPositions] - A list of caret positions for all characters in the string; each is\n   *           three elements: the starting X, the ending X, and the bottom Y for the caret.\n   * @property {number} [caretHeight] - An appropriate height for all selection carets.\n   * @property {number} ascender - The font's ascender metric.\n   * @property {number} descender - The font's descender metric.\n   * @property {number} capHeight - The font's cap height metric, based on the height of Latin capital letters.\n   * @property {number} xHeight - The font's x height metric, based on the height of Latin lowercase letters.\n   * @property {number} lineHeight - The final computed lineHeight measurement.\n   * @property {number} topBaseline - The y position of the top line's baseline.\n   * @property {Array<number>} blockBounds - The total [minX, minY, maxX, maxY] rect of the whole text block;\n   *           this can include extra vertical space beyond the visible glyphs due to lineHeight, and is\n   *           equivalent to the dimensions of a block-level text element in CSS.\n   * @property {Array<number>} visibleBounds - The total [minX, minY, maxX, maxY] rect of the whole text block;\n   *           unlike `blockBounds` this is tightly wrapped to the visible glyph paths.\n   * @property {Array<object>} chunkedBounds - List of bounding rects for each consecutive set of N glyphs,\n   *           in the format `{start:N, end:N, rect:[minX, minY, maxX, maxY]}`.\n   * @property {object} timings - Timing info for various parts of the rendering logic including SDF\n   *           generation, typesetting, etc.\n   * @frozen\n   */\n\n  /**\n   * @callback getTextRenderInfo~callback\n   * @param {TroikaTextRenderInfo} textRenderInfo\n   */\n\n  /**\n   * Main entry point for requesting the data needed to render a text string with given font parameters.\n   * This is an asynchronous call, performing most of the logic in a web worker thread.\n   * @param {object} args\n   * @param {getTextRenderInfo~callback} callback\n   */\n  function getTextRenderInfo(args, callback) {\n    hasRequested = true;\n    args = assign({}, args);\n    const totalStart = now$1();\n\n    // Apply default font here to avoid a 'null' atlas, and convert relative\n    // URLs to absolute so they can be resolved in the worker\n    args.font = toAbsoluteURL(args.font || CONFIG.defaultFontURL);\n\n    // Normalize text to a string\n    args.text = '' + args.text;\n\n    args.sdfGlyphSize = args.sdfGlyphSize || CONFIG.sdfGlyphSize;\n\n    // Normalize colors\n    if (args.colorRanges != null) {\n      let colors = {};\n      for (let key in args.colorRanges) {\n        if (args.colorRanges.hasOwnProperty(key)) {\n          let val = args.colorRanges[key];\n          if (typeof val !== 'number') {\n            val = tempColor.set(val).getHex();\n          }\n          colors[key] = val;\n        }\n      }\n      args.colorRanges = colors;\n    }\n\n    Object.freeze(args);\n\n    // Init the atlas if needed\n    const {textureWidth, sdfExponent} = CONFIG;\n    const {sdfGlyphSize} = args;\n    const glyphsPerRow = (textureWidth / sdfGlyphSize * 4);\n    let atlas = atlases[sdfGlyphSize];\n    if (!atlas) {\n      const canvas = document.createElement('canvas');\n      canvas.width = textureWidth;\n      canvas.height = sdfGlyphSize * 256 / glyphsPerRow; // start tall enough to fit 256 glyphs\n      atlas = atlases[sdfGlyphSize] = {\n        glyphCount: 0,\n        sdfGlyphSize,\n        sdfCanvas: canvas,\n        sdfTexture: new three.Texture(\n          canvas,\n          undefined,\n          undefined,\n          undefined,\n          three.LinearFilter,\n          three.LinearFilter\n        ),\n        contextLost: false,\n        glyphsByFont: new Map()\n      };\n      atlas.sdfTexture.generateMipmaps = false;\n      initContextLossHandling(atlas);\n    }\n\n    const {sdfTexture, sdfCanvas} = atlas;\n    let fontGlyphs = atlas.glyphsByFont.get(args.font);\n    if (!fontGlyphs) {\n      atlas.glyphsByFont.set(args.font, fontGlyphs = new Map());\n    }\n\n    // Issue request to the typesetting engine in the worker\n    typesetInWorker(args).then(result => {\n      const {glyphIds, glyphPositions, fontSize, unitsPerEm, timings} = result;\n      const neededSDFs = [];\n      const glyphBounds = new Float32Array(glyphIds.length * 4);\n      const fontSizeMult = fontSize / unitsPerEm;\n      let boundsIdx = 0;\n      let positionsIdx = 0;\n      const quadsStart = now$1();\n      glyphIds.forEach((glyphId, i) => {\n        let glyphInfo = fontGlyphs.get(glyphId);\n\n        // If this is a glyphId not seen before, add it to the atlas\n        if (!glyphInfo) {\n          const {path, pathBounds} = result.glyphData[glyphId];\n\n          // Margin around path edges in SDF, based on a percentage of the glyph's max dimension.\n          // Note we add an extra 0.5 px over the configured value because the outer 0.5 doesn't contain\n          // useful interpolated values and will be ignored anyway.\n          const fontUnitsMargin = Math.max(pathBounds[2] - pathBounds[0], pathBounds[3] - pathBounds[1])\n            / sdfGlyphSize * (CONFIG.sdfMargin * sdfGlyphSize + 0.5);\n\n          const atlasIndex = atlas.glyphCount++;\n          const sdfViewBox = [\n            pathBounds[0] - fontUnitsMargin,\n            pathBounds[1] - fontUnitsMargin,\n            pathBounds[2] + fontUnitsMargin,\n            pathBounds[3] + fontUnitsMargin,\n          ];\n          fontGlyphs.set(glyphId, (glyphInfo = { path, atlasIndex, sdfViewBox }));\n\n          // Collect those that need SDF generation\n          neededSDFs.push(glyphInfo);\n        }\n\n        // Calculate bounds for renderable quads\n        // TODO can we get this back off the main thread?\n        const {sdfViewBox} = glyphInfo;\n        const posX = glyphPositions[positionsIdx++];\n        const posY = glyphPositions[positionsIdx++];\n        glyphBounds[boundsIdx++] = posX + sdfViewBox[0] * fontSizeMult;\n        glyphBounds[boundsIdx++] = posY + sdfViewBox[1] * fontSizeMult;\n        glyphBounds[boundsIdx++] = posX + sdfViewBox[2] * fontSizeMult;\n        glyphBounds[boundsIdx++] = posY + sdfViewBox[3] * fontSizeMult;\n\n        // Convert glyphId to SDF index for the shader\n        glyphIds[i] = glyphInfo.atlasIndex;\n      });\n      timings.quads = (timings.quads || 0) + (now$1() - quadsStart);\n\n      const sdfStart = now$1();\n      timings.sdf = {};\n\n      // Grow the texture height by power of 2 if needed\n      const currentHeight = sdfCanvas.height;\n      const neededRows = Math.ceil(atlas.glyphCount / glyphsPerRow);\n      const neededHeight = Math.pow(2, Math.ceil(Math.log2(neededRows * sdfGlyphSize)));\n      if (neededHeight > currentHeight) {\n        // Since resizing the canvas clears its render buffer, it needs special handling to copy the old contents over\n        console.info(`Increasing SDF texture size ${currentHeight}->${neededHeight}`);\n        resizeWebGLCanvasWithoutClearing(sdfCanvas, textureWidth, neededHeight);\n        // As of Three r136 textures cannot be resized once they're allocated on the GPU, we must dispose to reallocate it\n        sdfTexture.dispose();\n      }\n\n      Promise.all(neededSDFs.map(glyphInfo =>\n        generateGlyphSDF(glyphInfo, atlas, args.gpuAccelerateSDF).then(({timing}) => {\n          timings.sdf[glyphInfo.atlasIndex] = timing;\n        })\n      )).then(() => {\n        if (neededSDFs.length && !atlas.contextLost) {\n          safariPre15Workaround(atlas);\n          sdfTexture.needsUpdate = true;\n        }\n        timings.sdfTotal = now$1() - sdfStart;\n        timings.total = now$1() - totalStart;\n        // console.log(`SDF - ${timings.sdfTotal}, Total - ${timings.total - timings.fontLoad}`)\n\n        // Invoke callback with the text layout arrays and updated texture\n        callback(Object.freeze({\n          parameters: args,\n          sdfTexture,\n          sdfGlyphSize,\n          sdfExponent,\n          glyphBounds,\n          glyphAtlasIndices: glyphIds,\n          glyphColors: result.glyphColors,\n          caretPositions: result.caretPositions,\n          caretHeight: result.caretHeight,\n          chunkedBounds: result.chunkedBounds,\n          ascender: result.ascender,\n          descender: result.descender,\n          lineHeight: result.lineHeight,\n          capHeight: result.capHeight,\n          xHeight: result.xHeight,\n          topBaseline: result.topBaseline,\n          blockBounds: result.blockBounds,\n          visibleBounds: result.visibleBounds,\n          timings: result.timings,\n        }));\n      });\n    });\n\n    // While the typesetting request is being handled, go ahead and make sure the atlas canvas context is\n    // \"warmed up\"; the first request will be the longest due to shader program compilation so this gets\n    // a head start on that process before SDFs actually start getting processed.\n    Promise.resolve().then(() => {\n      if (!atlas.contextLost) {\n        warmUpSDFCanvas(sdfCanvas);\n      }\n    });\n  }\n\n  function generateGlyphSDF({path, atlasIndex, sdfViewBox}, {sdfGlyphSize, sdfCanvas, contextLost}, useGPU) {\n    if (contextLost) {\n      // If the context is lost there's nothing we can do, just quit silently and let it\n      // get regenerated when the context is restored\n      return Promise.resolve({timing: -1})\n    }\n    const {textureWidth, sdfExponent} = CONFIG;\n    const maxDist = Math.max(sdfViewBox[2] - sdfViewBox[0], sdfViewBox[3] - sdfViewBox[1]);\n    const squareIndex = Math.floor(atlasIndex / 4);\n    const x = squareIndex % (textureWidth / sdfGlyphSize) * sdfGlyphSize;\n    const y = Math.floor(squareIndex / (textureWidth / sdfGlyphSize)) * sdfGlyphSize;\n    const channel = atlasIndex % 4;\n    return generateSDF(sdfGlyphSize, sdfGlyphSize, path, sdfViewBox, maxDist, sdfExponent, sdfCanvas, x, y, channel, useGPU)\n  }\n\n  function initContextLossHandling(atlas) {\n    const canvas = atlas.sdfCanvas;\n\n    /*\n    // Begin context loss simulation\n    if (!window.WebGLDebugUtils) {\n      let script = document.getElementById('WebGLDebugUtilsScript')\n      if (!script) {\n        script = document.createElement('script')\n        script.id = 'WebGLDebugUtils'\n        document.head.appendChild(script)\n        script.src = 'https://cdn.jsdelivr.net/gh/KhronosGroup/WebGLDeveloperTools@b42e702/src/debug/webgl-debug.js'\n      }\n      script.addEventListener('load', () => {\n        initContextLossHandling(atlas)\n      })\n      return\n    }\n    window.WebGLDebugUtils.makeLostContextSimulatingCanvas(canvas)\n    canvas.loseContextInNCalls(500)\n    canvas.addEventListener('webglcontextrestored', (event) => {\n      canvas.loseContextInNCalls(5000)\n    })\n    // End context loss simulation\n    */\n\n    canvas.addEventListener('webglcontextlost', (event) => {\n      console.log('Context Lost', event);\n      event.preventDefault();\n      atlas.contextLost = true;\n    });\n    canvas.addEventListener('webglcontextrestored', (event) => {\n      console.log('Context Restored', event);\n      atlas.contextLost = false;\n      // Regenerate all glyphs into the restored canvas:\n      const promises = [];\n      atlas.glyphsByFont.forEach(glyphMap => {\n        glyphMap.forEach(glyph => {\n          promises.push(generateGlyphSDF(glyph, atlas, true));\n        });\n      });\n      Promise.all(promises).then(() => {\n        safariPre15Workaround(atlas);\n        atlas.sdfTexture.needsUpdate = true;\n      });\n    });\n  }\n\n  /**\n   * Preload a given font and optionally pre-generate glyph SDFs for one or more character sequences.\n   * This can be useful to avoid long pauses when first showing text in a scene, by preloading the\n   * needed fonts and glyphs up front along with other assets.\n   *\n   * @param {object} options\n   * @param {string} options.font - URL of the font file to preload. If not given, the default font will\n   *        be loaded.\n   * @param {string|string[]} options.characters - One or more character sequences for which to pre-\n   *        generate glyph SDFs. Note that this will honor ligature substitution, so you may need\n   *        to specify ligature sequences in addition to their individual characters to get all\n   *        possible glyphs, e.g. `[\"t\", \"h\", \"th\"]` to get the \"t\" and \"h\" glyphs plus the \"th\" ligature.\n   * @param {number} options.sdfGlyphSize - The size at which to prerender the SDF textures for the\n   *        specified `characters`.\n   * @param {function} callback - A function that will be called when the preloading is complete.\n   */\n  function preloadFont({font, characters, sdfGlyphSize}, callback) {\n    let text = Array.isArray(characters) ? characters.join('\\n') : '' + characters;\n    getTextRenderInfo({ font, sdfGlyphSize, text }, callback);\n  }\n\n\n  // Local assign impl so we don't have to import troika-core\n  function assign(toObj, fromObj) {\n    for (let key in fromObj) {\n      if (fromObj.hasOwnProperty(key)) {\n        toObj[key] = fromObj[key];\n      }\n    }\n    return toObj\n  }\n\n  // Utility for making URLs absolute\n  let linkEl;\n  function toAbsoluteURL(path) {\n    if (!linkEl) {\n      linkEl = typeof document === 'undefined' ? {} : document.createElement('a');\n    }\n    linkEl.href = path;\n    return linkEl.href\n  }\n\n  /**\n   * Safari < v15 seems unable to use the SDF webgl canvas as a texture. This applies a workaround\n   * where it reads the pixels out of that canvas and uploads them as a data texture instead, at\n   * a slight performance cost.\n   */\n  function safariPre15Workaround(atlas) {\n    // Use createImageBitmap support as a proxy for Safari<15, all other mainstream browsers\n    // have supported it for a long while so any false positives should be minimal.\n    if (typeof createImageBitmap !== 'function') {\n      console.info('Safari<15: applying SDF canvas workaround');\n      const {sdfCanvas, sdfTexture} = atlas;\n      const {width, height} = sdfCanvas;\n      const gl = atlas.sdfCanvas.getContext('webgl');\n      let pixels = sdfTexture.image.data;\n      if (!pixels || pixels.length !== width * height * 4) {\n        pixels = new Uint8Array(width * height * 4);\n        sdfTexture.image = {width, height, data: pixels};\n        sdfTexture.flipY = false;\n        sdfTexture.isDataTexture = true;\n      }\n      gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n    }\n  }\n\n\n  const typesetterWorkerModule = /*#__PURE__*/troikaWorkerUtils.defineWorkerModule({\n    name: 'Typesetter',\n    dependencies: [\n      CONFIG,\n      workerModule,\n      createTypesetter,\n      bidiFactory__default['default']\n    ],\n    init(config, fontParser, createTypesetter, bidiFactory) {\n      const {defaultFontURL} = config;\n      return createTypesetter(fontParser, bidiFactory(), { defaultFontURL })\n    }\n  });\n\n  const typesetInWorker = /*#__PURE__*/troikaWorkerUtils.defineWorkerModule({\n    name: 'Typesetter',\n    dependencies: [\n      typesetterWorkerModule,\n    ],\n    init(typesetter) {\n      return function(args) {\n        return new Promise(resolve => {\n          typesetter.typeset(args, resolve);\n        })\n      }\n    },\n    getTransferables(result) {\n      // Mark array buffers as transferable to avoid cloning during postMessage\n      const transferables = [\n        result.glyphPositions.buffer,\n        result.glyphIds.buffer\n      ];\n      if (result.caretPositions) {\n        transferables.push(result.caretPositions.buffer);\n      }\n      if (result.glyphColors) {\n        transferables.push(result.glyphColors.buffer);\n      }\n      return transferables\n    }\n  });\n\n  function dumpSDFTextures() {\n    Object.keys(atlases).forEach(size => {\n      const canvas = atlases[size].sdfCanvas;\n      const {width, height} = canvas;\n      console.log(\"%c.\", `\n      background: url(${canvas.toDataURL()});\n      background-size: ${width}px ${height}px;\n      color: transparent;\n      font-size: 0;\n      line-height: ${height}px;\n      padding-left: ${width}px;\n    `);\n    });\n  }\n\n  const templateGeometries = {};\n\n  function getTemplateGeometry(detail) {\n    let geom = templateGeometries[detail];\n    if (!geom) {\n      // Geometry is two planes back-to-back, which will always be rendered FrontSide only but\n      // appear as DoubleSide by default. FrontSide/BackSide are emulated using drawRange.\n      // We do it this way to avoid the performance hit of two draw calls for DoubleSide materials\n      // introduced by Three.js in r130 - see https://github.com/mrdoob/three.js/pull/21967\n      const front = new three.PlaneGeometry(1, 1, detail, detail);\n      const back = front.clone();\n      const frontAttrs = front.attributes;\n      const backAttrs = back.attributes;\n      const combined = new three.BufferGeometry();\n      const vertCount = frontAttrs.uv.count;\n      for (let i = 0; i < vertCount; i++) {\n        backAttrs.position.array[i * 3] *= -1; // flip position x\n        backAttrs.normal.array[i * 3 + 2] *= -1; // flip normal z\n      }\n      ['position', 'normal', 'uv'].forEach(name => {\n        combined.setAttribute(name, new three.Float32BufferAttribute(\n          [...frontAttrs[name].array, ...backAttrs[name].array],\n          frontAttrs[name].itemSize)\n        );\n      });\n      combined.setIndex([...front.index.array, ...back.index.array.map(n => n + vertCount)]);\n      combined.translate(0.5, 0.5, 0);\n      geom = templateGeometries[detail] = combined;\n    }\n    return geom\n  }\n\n  const glyphBoundsAttrName = 'aTroikaGlyphBounds';\n  const glyphIndexAttrName = 'aTroikaGlyphIndex';\n  const glyphColorAttrName = 'aTroikaGlyphColor';\n\n  /**\n  @class GlyphsGeometry\n\n  A specialized Geometry for rendering a set of text glyphs. Uses InstancedBufferGeometry to\n  render the glyphs using GPU instancing of a single quad, rather than constructing a whole\n  geometry with vertices, for much smaller attribute arraybuffers according to this math:\n\n    Where N = number of glyphs...\n\n    Instanced:\n    - position: 4 * 3\n    - index: 2 * 3\n    - normal: 4 * 3\n    - uv: 4 * 2\n    - glyph x/y bounds: N * 4\n    - glyph indices: N * 1\n    = 5N + 38\n\n    Non-instanced:\n    - position: N * 4 * 3\n    - index: N * 2 * 3\n    - normal: N * 4 * 3\n    - uv: N * 4 * 2\n    - glyph indices: N * 1\n    = 39N\n\n  A downside of this is the rare-but-possible lack of the instanced arrays extension,\n  which we could potentially work around with a fallback non-instanced implementation.\n\n  */\n  class GlyphsGeometry extends three.InstancedBufferGeometry {\n    constructor() {\n      super();\n\n      this.detail = 1;\n      this.curveRadius = 0;\n\n      // Define groups for rendering text outline as a separate pass; these will only\n      // be used when the `material` getter returns an array, i.e. outlineWidth > 0.\n      this.groups = [\n        {start: 0, count: Infinity, materialIndex: 0},\n        {start: 0, count: Infinity, materialIndex: 1}\n      ];\n\n      // Preallocate empty bounding objects\n      this.boundingSphere = new three.Sphere();\n      this.boundingBox = new three.Box3();\n    }\n\n    computeBoundingSphere () {\n      // No-op; we'll sync the boundingSphere proactively when needed.\n    }\n\n    computeBoundingBox() {\n      // No-op; we'll sync the boundingBox proactively when needed.\n    }\n\n    // Since our base geometry contains triangles for both front and back sides, we can emulate\n    // the \"side\" by restricting the draw range.\n    setSide(side) {\n      const verts = this.getIndex().count;\n      this.setDrawRange(side === three.BackSide ? verts / 2 : 0, side === three.DoubleSide ? verts : verts / 2);\n    }\n\n    set detail(detail) {\n      if (detail !== this._detail) {\n        this._detail = detail;\n        if (typeof detail !== 'number' || detail < 1) {\n          detail = 1;\n        }\n        let tpl = getTemplateGeometry(detail)\n        ;['position', 'normal', 'uv'].forEach(attr => {\n          this.attributes[attr] = tpl.attributes[attr].clone();\n        });\n        this.setIndex(tpl.getIndex().clone());\n      }\n    }\n    get detail() {\n      return this._detail\n    }\n\n    set curveRadius(r) {\n      if (r !== this._curveRadius) {\n        this._curveRadius = r;\n        this._updateBounds();\n      }\n    }\n    get curveRadius() {\n      return this._curveRadius\n    }\n\n    /**\n     * Update the geometry for a new set of glyphs.\n     * @param {Float32Array} glyphBounds - An array holding the planar bounds for all glyphs\n     *        to be rendered, 4 entries for each glyph: x1,x2,y1,y1\n     * @param {Float32Array} glyphAtlasIndices - An array holding the index of each glyph within\n     *        the SDF atlas texture.\n     * @param {Array} blockBounds - An array holding the [minX, minY, maxX, maxY] across all glyphs\n     * @param {Array} [chunkedBounds] - An array of objects describing bounds for each chunk of N\n     *        consecutive glyphs: `{start:N, end:N, rect:[minX, minY, maxX, maxY]}`. This can be\n     *        used with `applyClipRect` to choose an optimized `instanceCount`.\n     * @param {Uint8Array} [glyphColors] - An array holding r,g,b values for each glyph.\n     */\n    updateGlyphs(glyphBounds, glyphAtlasIndices, blockBounds, chunkedBounds, glyphColors) {\n      // Update the instance attributes\n      updateBufferAttr(this, glyphBoundsAttrName, glyphBounds, 4);\n      updateBufferAttr(this, glyphIndexAttrName, glyphAtlasIndices, 1);\n      updateBufferAttr(this, glyphColorAttrName, glyphColors, 3);\n      this._blockBounds = blockBounds;\n      this._chunkedBounds = chunkedBounds;\n      this.instanceCount = glyphAtlasIndices.length;\n      this._updateBounds();\n    }\n\n    _updateBounds() {\n      const bounds = this._blockBounds;\n      if (bounds) {\n        const { curveRadius, boundingBox: bbox } = this;\n        if (curveRadius) {\n          const { PI, floor, min, max, sin, cos } = Math;\n          const halfPi = PI / 2;\n          const twoPi = PI * 2;\n          const absR = Math.abs(curveRadius);\n          const leftAngle = bounds[0] / absR;\n          const rightAngle = bounds[2] / absR;\n          const minX = floor((leftAngle + halfPi) / twoPi) !== floor((rightAngle + halfPi) / twoPi)\n            ? -absR : min(sin(leftAngle) * absR, sin(rightAngle) * absR);\n          const maxX = floor((leftAngle - halfPi) / twoPi) !== floor((rightAngle - halfPi) / twoPi)\n            ? absR : max(sin(leftAngle) * absR, sin(rightAngle) * absR);\n          const maxZ = floor((leftAngle + PI) / twoPi) !== floor((rightAngle + PI) / twoPi)\n            ? absR * 2 : max(absR - cos(leftAngle) * absR, absR - cos(rightAngle) * absR);\n          bbox.min.set(minX, bounds[1], curveRadius < 0 ? -maxZ : 0);\n          bbox.max.set(maxX, bounds[3], curveRadius < 0 ? 0 : maxZ);\n        } else {\n          bbox.min.set(bounds[0], bounds[1], 0);\n          bbox.max.set(bounds[2], bounds[3], 0);\n        }\n        bbox.getBoundingSphere(this.boundingSphere);\n      }\n    }\n\n    /**\n     * Given a clipping rect, and the chunkedBounds from the last updateGlyphs call, choose the lowest\n     * `instanceCount` that will show all glyphs within the clipped view. This is an optimization\n     * for long blocks of text that are clipped, to skip vertex shader evaluation for glyphs that would\n     * be clipped anyway.\n     *\n     * Note that since `drawElementsInstanced[ANGLE]` only accepts an instance count and not a starting\n     * offset, this optimization becomes less effective as the clipRect moves closer to the end of the\n     * text block. We could fix that by switching from instancing to a full geometry with a drawRange,\n     * but at the expense of much larger attribute buffers (see classdoc above.)\n     *\n     * @param {Vector4} clipRect\n     */\n    applyClipRect(clipRect) {\n      let count = this.getAttribute(glyphIndexAttrName).count;\n      let chunks = this._chunkedBounds;\n      if (chunks) {\n        for (let i = chunks.length; i--;) {\n          count = chunks[i].end;\n          let rect = chunks[i].rect;\n          // note: both rects are l-b-r-t\n          if (rect[1] < clipRect.w && rect[3] > clipRect.y && rect[0] < clipRect.z && rect[2] > clipRect.x) {\n            break\n          }\n        }\n      }\n      this.instanceCount = count;\n    }\n  }\n\n\n  function updateBufferAttr(geom, attrName, newArray, itemSize) {\n    const attr = geom.getAttribute(attrName);\n    if (newArray) {\n      // If length isn't changing, just update the attribute's array data\n      if (attr && attr.array.length === newArray.length) {\n        attr.array.set(newArray);\n        attr.needsUpdate = true;\n      } else {\n        geom.setAttribute(attrName, new three.InstancedBufferAttribute(newArray, itemSize));\n        // If the new attribute has a different size, we also have to (as of r117) manually clear the\n        // internal cached max instance count. See https://github.com/mrdoob/three.js/issues/19706\n        // It's unclear if this is a threejs bug or a truly unsupported scenario; discussion in\n        // that ticket is ambiguous as to whether replacing a BufferAttribute with one of a\n        // different size is supported, but https://github.com/mrdoob/three.js/pull/17418 strongly\n        // implies it should be supported. It's possible we need to\n        delete geom._maxInstanceCount; //for r117+, could be fragile\n        geom.dispose(); //for r118+, more robust feeling, but more heavy-handed than I'd like\n      }\n    } else if (attr) {\n      geom.deleteAttribute(attrName);\n    }\n  }\n\n  // language=GLSL\n  const VERTEX_DEFS = `\nuniform vec2 uTroikaSDFTextureSize;\nuniform float uTroikaSDFGlyphSize;\nuniform vec4 uTroikaTotalBounds;\nuniform vec4 uTroikaClipRect;\nuniform mat3 uTroikaOrient;\nuniform bool uTroikaUseGlyphColors;\nuniform float uTroikaDistanceOffset;\nuniform float uTroikaBlurRadius;\nuniform vec2 uTroikaPositionOffset;\nuniform float uTroikaCurveRadius;\nattribute vec4 aTroikaGlyphBounds;\nattribute float aTroikaGlyphIndex;\nattribute vec3 aTroikaGlyphColor;\nvarying vec2 vTroikaGlyphUV;\nvarying vec4 vTroikaTextureUVBounds;\nvarying float vTroikaTextureChannel;\nvarying vec3 vTroikaGlyphColor;\nvarying vec2 vTroikaGlyphDimensions;\n`;\n\n  // language=GLSL prefix=\"void main() {\" suffix=\"}\"\n  const VERTEX_TRANSFORM = `\nvec4 bounds = aTroikaGlyphBounds;\nbounds.xz += uTroikaPositionOffset.x;\nbounds.yw -= uTroikaPositionOffset.y;\n\nvec4 outlineBounds = vec4(\n  bounds.xy - uTroikaDistanceOffset - uTroikaBlurRadius,\n  bounds.zw + uTroikaDistanceOffset + uTroikaBlurRadius\n);\nvec4 clippedBounds = vec4(\n  clamp(outlineBounds.xy, uTroikaClipRect.xy, uTroikaClipRect.zw),\n  clamp(outlineBounds.zw, uTroikaClipRect.xy, uTroikaClipRect.zw)\n);\n\nvec2 clippedXY = (mix(clippedBounds.xy, clippedBounds.zw, position.xy) - bounds.xy) / (bounds.zw - bounds.xy);\n\nposition.xy = mix(bounds.xy, bounds.zw, clippedXY);\n\nuv = (position.xy - uTroikaTotalBounds.xy) / (uTroikaTotalBounds.zw - uTroikaTotalBounds.xy);\n\nfloat rad = uTroikaCurveRadius;\nif (rad != 0.0) {\n  float angle = position.x / rad;\n  position.xz = vec2(sin(angle) * rad, rad - cos(angle) * rad);\n  normal.xz = vec2(sin(angle), cos(angle));\n}\n  \nposition = uTroikaOrient * position;\nnormal = uTroikaOrient * normal;\n\nvTroikaGlyphUV = clippedXY.xy;\nvTroikaGlyphDimensions = vec2(bounds[2] - bounds[0], bounds[3] - bounds[1]);\n\n${''/* NOTE: it seems important to calculate the glyph's bounding texture UVs here in the\n  vertex shader, rather than in the fragment shader, as the latter gives strange artifacts\n  on some glyphs (those in the leftmost texture column) on some systems. The exact reason\n  isn't understood but doing this here, then mix()-ing in the fragment shader, seems to work. */}\nfloat txCols = uTroikaSDFTextureSize.x / uTroikaSDFGlyphSize;\nvec2 txUvPerSquare = uTroikaSDFGlyphSize / uTroikaSDFTextureSize;\nvec2 txStartUV = txUvPerSquare * vec2(\n  mod(floor(aTroikaGlyphIndex / 4.0), txCols),\n  floor(floor(aTroikaGlyphIndex / 4.0) / txCols)\n);\nvTroikaTextureUVBounds = vec4(txStartUV, vec2(txStartUV) + txUvPerSquare);\nvTroikaTextureChannel = mod(aTroikaGlyphIndex, 4.0);\n`;\n\n  // language=GLSL\n  const FRAGMENT_DEFS = `\nuniform sampler2D uTroikaSDFTexture;\nuniform vec2 uTroikaSDFTextureSize;\nuniform float uTroikaSDFGlyphSize;\nuniform float uTroikaSDFExponent;\nuniform float uTroikaDistanceOffset;\nuniform float uTroikaFillOpacity;\nuniform float uTroikaOutlineOpacity;\nuniform float uTroikaBlurRadius;\nuniform vec3 uTroikaStrokeColor;\nuniform float uTroikaStrokeWidth;\nuniform float uTroikaStrokeOpacity;\nuniform bool uTroikaSDFDebug;\nvarying vec2 vTroikaGlyphUV;\nvarying vec4 vTroikaTextureUVBounds;\nvarying float vTroikaTextureChannel;\nvarying vec2 vTroikaGlyphDimensions;\n\nfloat troikaSdfValueToSignedDistance(float alpha) {\n  // Inverse of exponential encoding in webgl-sdf-generator\n  ${''/* TODO - there's some slight inaccuracy here when dealing with interpolated alpha values; those\n    are linearly interpolated where the encoding is exponential. Look into improving this by rounding\n    to nearest 2 whole texels, decoding those exponential values, and linearly interpolating the result.\n  */}\n  float maxDimension = max(vTroikaGlyphDimensions.x, vTroikaGlyphDimensions.y);\n  float absDist = (1.0 - pow(2.0 * (alpha > 0.5 ? 1.0 - alpha : alpha), 1.0 / uTroikaSDFExponent)) * maxDimension;\n  float signedDist = absDist * (alpha > 0.5 ? -1.0 : 1.0);\n  return signedDist;\n}\n\nfloat troikaGlyphUvToSdfValue(vec2 glyphUV) {\n  vec2 textureUV = mix(vTroikaTextureUVBounds.xy, vTroikaTextureUVBounds.zw, glyphUV);\n  vec4 rgba = texture2D(uTroikaSDFTexture, textureUV);\n  float ch = floor(vTroikaTextureChannel + 0.5); //NOTE: can't use round() in WebGL1\n  return ch == 0.0 ? rgba.r : ch == 1.0 ? rgba.g : ch == 2.0 ? rgba.b : rgba.a;\n}\n\nfloat troikaGlyphUvToDistance(vec2 uv) {\n  return troikaSdfValueToSignedDistance(troikaGlyphUvToSdfValue(uv));\n}\n\nfloat troikaGetAADist() {\n  ${''/*\n    When the standard derivatives extension is available, we choose an antialiasing alpha threshold based\n    on the potential change in the SDF's alpha from this fragment to its neighbor. This strategy maximizes \n    readability and edge crispness at all sizes and screen resolutions.\n  */}\n  #if defined(GL_OES_standard_derivatives) || __VERSION__ >= 300\n  return length(fwidth(vTroikaGlyphUV * vTroikaGlyphDimensions)) * 0.5;\n  #else\n  return vTroikaGlyphDimensions.x / 64.0;\n  #endif\n}\n\nfloat troikaGetFragDistValue() {\n  vec2 clampedGlyphUV = clamp(vTroikaGlyphUV, 0.5 / uTroikaSDFGlyphSize, 1.0 - 0.5 / uTroikaSDFGlyphSize);\n  float distance = troikaGlyphUvToDistance(clampedGlyphUV);\n \n  // Extrapolate distance when outside bounds:\n  distance += clampedGlyphUV == vTroikaGlyphUV ? 0.0 : \n    length((vTroikaGlyphUV - clampedGlyphUV) * vTroikaGlyphDimensions);\n\n  ${''/* \n  // TODO more refined extrapolated distance by adjusting for angle of gradient at edge...\n  // This has potential but currently gives very jagged extensions, maybe due to precision issues?\n  float uvStep = 1.0 / uTroikaSDFGlyphSize;\n  vec2 neighbor1UV = clampedGlyphUV + (\n    vTroikaGlyphUV.x != clampedGlyphUV.x ? vec2(0.0, uvStep * sign(0.5 - vTroikaGlyphUV.y)) :\n    vTroikaGlyphUV.y != clampedGlyphUV.y ? vec2(uvStep * sign(0.5 - vTroikaGlyphUV.x), 0.0) :\n    vec2(0.0)\n  );\n  vec2 neighbor2UV = clampedGlyphUV + (\n    vTroikaGlyphUV.x != clampedGlyphUV.x ? vec2(0.0, uvStep * -sign(0.5 - vTroikaGlyphUV.y)) :\n    vTroikaGlyphUV.y != clampedGlyphUV.y ? vec2(uvStep * -sign(0.5 - vTroikaGlyphUV.x), 0.0) :\n    vec2(0.0)\n  );\n  float neighbor1Distance = troikaGlyphUvToDistance(neighbor1UV);\n  float neighbor2Distance = troikaGlyphUvToDistance(neighbor2UV);\n  float distToUnclamped = length((vTroikaGlyphUV - clampedGlyphUV) * vTroikaGlyphDimensions);\n  float distToNeighbor = length((clampedGlyphUV - neighbor1UV) * vTroikaGlyphDimensions);\n  float gradientAngle1 = min(asin(abs(neighbor1Distance - distance) / distToNeighbor), PI / 2.0);\n  float gradientAngle2 = min(asin(abs(neighbor2Distance - distance) / distToNeighbor), PI / 2.0);\n  distance += (cos(gradientAngle1) + cos(gradientAngle2)) / 2.0 * distToUnclamped;\n  */}\n\n  return distance;\n}\n\nfloat troikaGetEdgeAlpha(float distance, float distanceOffset, float aaDist) {\n  #if defined(IS_DEPTH_MATERIAL) || defined(IS_DISTANCE_MATERIAL)\n  float alpha = step(-distanceOffset, -distance);\n  #else\n\n  float alpha = smoothstep(\n    distanceOffset + aaDist,\n    distanceOffset - aaDist,\n    distance\n  );\n  #endif\n\n  return alpha;\n}\n`;\n\n  // language=GLSL prefix=\"void main() {\" suffix=\"}\"\n  const FRAGMENT_TRANSFORM = `\nfloat aaDist = troikaGetAADist();\nfloat fragDistance = troikaGetFragDistValue();\nfloat edgeAlpha = uTroikaSDFDebug ?\n  troikaGlyphUvToSdfValue(vTroikaGlyphUV) :\n  troikaGetEdgeAlpha(fragDistance, uTroikaDistanceOffset, max(aaDist, uTroikaBlurRadius));\n\n#if !defined(IS_DEPTH_MATERIAL) && !defined(IS_DISTANCE_MATERIAL)\nvec4 fillRGBA = gl_FragColor;\nfillRGBA.a *= uTroikaFillOpacity;\nvec4 strokeRGBA = uTroikaStrokeWidth == 0.0 ? fillRGBA : vec4(uTroikaStrokeColor, uTroikaStrokeOpacity);\nif (fillRGBA.a == 0.0) fillRGBA.rgb = strokeRGBA.rgb;\ngl_FragColor = mix(fillRGBA, strokeRGBA, smoothstep(\n  -uTroikaStrokeWidth - aaDist,\n  -uTroikaStrokeWidth + aaDist,\n  fragDistance\n));\ngl_FragColor.a *= edgeAlpha;\n#endif\n\nif (edgeAlpha == 0.0) {\n  discard;\n}\n`;\n\n\n  /**\n   * Create a material for rendering text, derived from a baseMaterial\n   */\n  function createTextDerivedMaterial(baseMaterial) {\n    const textMaterial = troikaThreeUtils.createDerivedMaterial(baseMaterial, {\n      chained: true,\n      extensions: {\n        derivatives: true\n      },\n      uniforms: {\n        uTroikaSDFTexture: {value: null},\n        uTroikaSDFTextureSize: {value: new three.Vector2()},\n        uTroikaSDFGlyphSize: {value: 0},\n        uTroikaSDFExponent: {value: 0},\n        uTroikaTotalBounds: {value: new three.Vector4(0,0,0,0)},\n        uTroikaClipRect: {value: new three.Vector4(0,0,0,0)},\n        uTroikaDistanceOffset: {value: 0},\n        uTroikaOutlineOpacity: {value: 0},\n        uTroikaFillOpacity: {value: 1},\n        uTroikaPositionOffset: {value: new three.Vector2()},\n        uTroikaCurveRadius: {value: 0},\n        uTroikaBlurRadius: {value: 0},\n        uTroikaStrokeWidth: {value: 0},\n        uTroikaStrokeColor: {value: new three.Color()},\n        uTroikaStrokeOpacity: {value: 1},\n        uTroikaOrient: {value: new three.Matrix3()},\n        uTroikaUseGlyphColors: {value: true},\n        uTroikaSDFDebug: {value: false}\n      },\n      vertexDefs: VERTEX_DEFS,\n      vertexTransform: VERTEX_TRANSFORM,\n      fragmentDefs: FRAGMENT_DEFS,\n      fragmentColorTransform: FRAGMENT_TRANSFORM,\n      customRewriter({vertexShader, fragmentShader}) {\n        let uDiffuseRE = /\\buniform\\s+vec3\\s+diffuse\\b/;\n        if (uDiffuseRE.test(fragmentShader)) {\n          // Replace all instances of `diffuse` with our varying\n          fragmentShader = fragmentShader\n            .replace(uDiffuseRE, 'varying vec3 vTroikaGlyphColor')\n            .replace(/\\bdiffuse\\b/g, 'vTroikaGlyphColor');\n          // Make sure the vertex shader declares the uniform so we can grab it as a fallback\n          if (!uDiffuseRE.test(vertexShader)) {\n            vertexShader = vertexShader.replace(\n              troikaThreeUtils.voidMainRegExp,\n              'uniform vec3 diffuse;\\n$&\\nvTroikaGlyphColor = uTroikaUseGlyphColors ? aTroikaGlyphColor / 255.0 : diffuse;\\n'\n            );\n          }\n        }\n        return { vertexShader, fragmentShader }\n      }\n    });\n\n    // Force transparency - TODO is this reasonable?\n    textMaterial.transparent = true;\n\n    Object.defineProperties(textMaterial, {\n      isTroikaTextMaterial: {value: true},\n\n      // WebGLShadowMap reverses the side of the shadow material by default, which fails\n      // for planes, so here we force the `shadowSide` to always match the main side.\n      shadowSide: {\n        get() {\n          return this.side\n        },\n        set() {\n          //no-op\n        }\n      }\n    });\n\n    return textMaterial\n  }\n\n  const defaultMaterial = /*#__PURE__*/ new three.MeshBasicMaterial({\n    color: 0xffffff,\n    side: three.DoubleSide,\n    transparent: true\n  });\n  const defaultStrokeColor = 0x808080;\n\n  const tempMat4 = /*#__PURE__*/ new three.Matrix4();\n  const tempVec3a = /*#__PURE__*/ new three.Vector3();\n  const tempVec3b = /*#__PURE__*/ new three.Vector3();\n  const tempArray = [];\n  const origin = /*#__PURE__*/ new three.Vector3();\n  const defaultOrient = '+x+y';\n\n  function first(o) {\n    return Array.isArray(o) ? o[0] : o\n  }\n\n  let getFlatRaycastMesh = () => {\n    const mesh = new three.Mesh(\n      new three.PlaneGeometry(1, 1),\n      defaultMaterial\n    );\n    getFlatRaycastMesh = () => mesh;\n    return mesh\n  };\n  let getCurvedRaycastMesh = () => {\n    const mesh = new three.Mesh(\n      new three.PlaneGeometry(1, 1, 32, 1),\n      defaultMaterial\n    );\n    getCurvedRaycastMesh = () => mesh;\n    return mesh\n  };\n\n  const syncStartEvent = { type: 'syncstart' };\n  const syncCompleteEvent = { type: 'synccomplete' };\n\n  const SYNCABLE_PROPS = [\n    'font',\n    'fontSize',\n    'letterSpacing',\n    'lineHeight',\n    'maxWidth',\n    'overflowWrap',\n    'text',\n    'direction',\n    'textAlign',\n    'textIndent',\n    'whiteSpace',\n    'anchorX',\n    'anchorY',\n    'colorRanges',\n    'sdfGlyphSize'\n  ];\n\n  const COPYABLE_PROPS = SYNCABLE_PROPS.concat(\n    'material',\n    'color',\n    'depthOffset',\n    'clipRect',\n    'curveRadius',\n    'orientation',\n    'glyphGeometryDetail'\n  );\n\n  /**\n   * @class Text\n   *\n   * A ThreeJS Mesh that renders a string of text on a plane in 3D space using signed distance\n   * fields (SDF).\n   */\n  class Text extends three.Mesh {\n    constructor() {\n      const geometry = new GlyphsGeometry();\n      super(geometry, null);\n\n      // === Text layout properties: === //\n\n      /**\n       * @member {string} text\n       * The string of text to be rendered.\n       */\n      this.text = '';\n\n      /**\n       * @member {number|string} anchorX\n       * Defines the horizontal position in the text block that should line up with the local origin.\n       * Can be specified as a numeric x position in local units, a string percentage of the total\n       * text block width e.g. `'25%'`, or one of the following keyword strings: 'left', 'center',\n       * or 'right'.\n       */\n      this.anchorX = 0;\n\n      /**\n       * @member {number|string} anchorX\n       * Defines the vertical position in the text block that should line up with the local origin.\n       * Can be specified as a numeric y position in local units (note: down is negative y), a string\n       * percentage of the total text block height e.g. `'25%'`, or one of the following keyword strings:\n       * 'top', 'top-baseline', 'top-cap', 'top-ex', 'middle', 'bottom-baseline', or 'bottom'.\n       */\n      this.anchorY = 0;\n\n      /**\n       * @member {number} curveRadius\n       * Defines a cylindrical radius along which the text's plane will be curved. Positive numbers put\n       * the cylinder's centerline (oriented vertically) that distance in front of the text, for a concave\n       * curvature, while negative numbers put it behind the text for a convex curvature. The centerline\n       * will be aligned with the text's local origin; you can use `anchorX` to offset it.\n       *\n       * Since each glyph is by default rendered with a simple quad, each glyph remains a flat plane\n       * internally. You can use `glyphGeometryDetail` to add more vertices for curvature inside glyphs.\n       */\n      this.curveRadius = 0;\n\n      /**\n       * @member {string} direction\n       * Sets the base direction for the text. The default value of \"auto\" will choose a direction based\n       * on the text's content according to the bidi spec. A value of \"ltr\" or \"rtl\" will force the direction.\n       */\n      this.direction = 'auto';\n\n      /**\n       * @member {string} font\n       * URL of a custom font to be used. Font files can be in .ttf, .otf, or .woff (not .woff2) formats.\n       * Defaults to the Roboto font loaded from Google Fonts.\n       */\n      this.font = null; //will use default from TextBuilder\n\n      /**\n       * @member {number} fontSize\n       * The size at which to render the font in local units; corresponds to the em-box height\n       * of the chosen `font`.\n       */\n      this.fontSize = 0.1;\n\n      /**\n       * @member {number} letterSpacing\n       * Sets a uniform adjustment to spacing between letters after kerning is applied. Positive\n       * numbers increase spacing and negative numbers decrease it.\n       */\n      this.letterSpacing = 0;\n\n      /**\n       * @member {number|string} lineHeight\n       * Sets the height of each line of text, as a multiple of the `fontSize`. Defaults to 'normal'\n       * which chooses a reasonable height based on the chosen font's ascender/descender metrics.\n       */\n      this.lineHeight = 'normal';\n\n      /**\n       * @member {number} maxWidth\n       * The maximum width of the text block, above which text may start wrapping according to the\n       * `whiteSpace` and `overflowWrap` properties.\n       */\n      this.maxWidth = Infinity;\n\n      /**\n       * @member {string} overflowWrap\n       * Defines how text wraps if the `whiteSpace` property is `normal`. Can be either `'normal'`\n       * to break at whitespace characters, or `'break-word'` to allow breaking within words.\n       * Defaults to `'normal'`.\n       */\n      this.overflowWrap = 'normal';\n\n      /**\n       * @member {string} textAlign\n       * The horizontal alignment of each line of text within the overall text bounding box.\n       */\n      this.textAlign = 'left';\n\n      /**\n       * @member {number} textIndent\n       * Indentation for the first character of a line; see CSS `text-indent`.\n       */\n      this.textIndent = 0;\n\n      /**\n       * @member {string} whiteSpace\n       * Defines whether text should wrap when a line reaches the `maxWidth`. Can\n       * be either `'normal'` (the default), to allow wrapping according to the `overflowWrap` property,\n       * or `'nowrap'` to prevent wrapping. Note that `'normal'` here honors newline characters to\n       * manually break lines, making it behave more like `'pre-wrap'` does in CSS.\n       */\n      this.whiteSpace = 'normal';\n\n\n      // === Presentation properties: === //\n\n      /**\n       * @member {THREE.Material} material\n       * Defines a _base_ material to be used when rendering the text. This material will be\n       * automatically replaced with a material derived from it, that adds shader code to\n       * decrease the alpha for each fragment (pixel) outside the text glyphs, with antialiasing.\n       * By default it will derive from a simple white MeshBasicMaterial, but you can use any\n       * of the other mesh materials to gain other features like lighting, texture maps, etc.\n       *\n       * Also see the `color` shortcut property.\n       */\n      this.material = null;\n\n      /**\n       * @member {string|number|THREE.Color} color\n       * This is a shortcut for setting the `color` of the text's material. You can use this\n       * if you don't want to specify a whole custom `material`. Also, if you do use a custom\n       * `material`, this color will only be used for this particuar Text instance, even if\n       * that same material instance is shared across multiple Text objects.\n       */\n      this.color = null;\n\n      /**\n       * @member {object|null} colorRanges\n       * WARNING: This API is experimental and may change.\n       * This allows more fine-grained control of colors for individual or ranges of characters,\n       * taking precedence over the material's `color`. Its format is an Object whose keys each\n       * define a starting character index for a range, and whose values are the color for each\n       * range. The color value can be a numeric hex color value, a `THREE.Color` object, or\n       * any of the strings accepted by `THREE.Color`.\n       */\n      this.colorRanges = null;\n\n      /**\n       * @member {number|string} outlineWidth\n       * WARNING: This API is experimental and may change.\n       * The width of an outline/halo to be drawn around each text glyph using the `outlineColor` and `outlineOpacity`.\n       * Can be specified as either an absolute number in local units, or as a percentage string e.g.\n       * `\"12%\"` which is treated as a percentage of the `fontSize`. Defaults to `0`, which means\n       * no outline will be drawn unless an `outlineOffsetX/Y` or `outlineBlur` is set.\n       */\n      this.outlineWidth = 0;\n\n      /**\n       * @member {string|number|THREE.Color} outlineColor\n       * WARNING: This API is experimental and may change.\n       * The color of the text outline, if `outlineWidth`/`outlineBlur`/`outlineOffsetX/Y` are set.\n       * Defaults to black.\n       */\n      this.outlineColor = 0x000000;\n\n      /**\n       * @member {number} outlineOpacity\n       * WARNING: This API is experimental and may change.\n       * The opacity of the outline, if `outlineWidth`/`outlineBlur`/`outlineOffsetX/Y` are set.\n       * Defaults to `1`.\n       */\n      this.outlineOpacity = 1;\n\n      /**\n       * @member {number|string} outlineBlur\n       * WARNING: This API is experimental and may change.\n       * A blur radius applied to the outer edge of the text's outline. If the `outlineWidth` is\n       * zero, the blur will be applied at the glyph edge, like CSS's `text-shadow` blur radius.\n       * Can be specified as either an absolute number in local units, or as a percentage string e.g.\n       * `\"12%\"` which is treated as a percentage of the `fontSize`. Defaults to `0`.\n       */\n      this.outlineBlur = 0;\n\n      /**\n       * @member {number|string} outlineOffsetX\n       * WARNING: This API is experimental and may change.\n       * A horizontal offset for the text outline.\n       * Can be specified as either an absolute number in local units, or as a percentage string e.g. `\"12%\"`\n       * which is treated as a percentage of the `fontSize`. Defaults to `0`.\n       */\n      this.outlineOffsetX = 0;\n\n      /**\n       * @member {number|string} outlineOffsetY\n       * WARNING: This API is experimental and may change.\n       * A vertical offset for the text outline.\n       * Can be specified as either an absolute number in local units, or as a percentage string e.g. `\"12%\"`\n       * which is treated as a percentage of the `fontSize`. Defaults to `0`.\n       */\n      this.outlineOffsetY = 0;\n\n      /**\n       * @member {number|string} strokeWidth\n       * WARNING: This API is experimental and may change.\n       * The width of an inner stroke drawn inside each text glyph using the `strokeColor` and `strokeOpacity`.\n       * Can be specified as either an absolute number in local units, or as a percentage string e.g. `\"12%\"`\n       * which is treated as a percentage of the `fontSize`. Defaults to `0`.\n       */\n      this.strokeWidth = 0;\n\n      /**\n       * @member {string|number|THREE.Color} strokeColor\n       * WARNING: This API is experimental and may change.\n       * The color of the text stroke, if `strokeWidth` is greater than zero. Defaults to gray.\n       */\n      this.strokeColor = defaultStrokeColor;\n\n      /**\n       * @member {number} strokeOpacity\n       * WARNING: This API is experimental and may change.\n       * The opacity of the stroke, if `strokeWidth` is greater than zero. Defaults to `1`.\n       */\n      this.strokeOpacity = 1;\n\n      /**\n       * @member {number} fillOpacity\n       * WARNING: This API is experimental and may change.\n       * The opacity of the glyph's fill from 0 to 1. This behaves like the material's `opacity` but allows\n       * giving the fill a different opacity than the `strokeOpacity`. A fillOpacity of `0` makes the\n       * interior of the glyph invisible, leaving just the `strokeWidth`. Defaults to `1`.\n       */\n      this.fillOpacity = 1;\n\n      /**\n       * @member {number} depthOffset\n       * This is a shortcut for setting the material's `polygonOffset` and related properties,\n       * which can be useful in preventing z-fighting when this text is laid on top of another\n       * plane in the scene. Positive numbers are further from the camera, negatives closer.\n       */\n      this.depthOffset = 0;\n\n      /**\n       * @member {Array<number>} clipRect\n       * If specified, defines a `[minX, minY, maxX, maxY]` of a rectangle outside of which all\n       * pixels will be discarded. This can be used for example to clip overflowing text when\n       * `whiteSpace='nowrap'`.\n       */\n      this.clipRect = null;\n\n      /**\n       * @member {string} orientation\n       * Defines the axis plane on which the text should be laid out when the mesh has no extra\n       * rotation transform. It is specified as a string with two axes: the horizontal axis with\n       * positive pointing right, and the vertical axis with positive pointing up. By default this\n       * is '+x+y', meaning the text sits on the xy plane with the text's top toward positive y\n       * and facing positive z. A value of '+x-z' would place it on the xz plane with the text's\n       * top toward negative z and facing positive y.\n       */\n      this.orientation = defaultOrient;\n\n      /**\n       * @member {number} glyphGeometryDetail\n       * Controls number of vertical/horizontal segments that make up each glyph's rectangular\n       * plane. Defaults to 1. This can be increased to provide more geometrical detail for custom\n       * vertex shader effects, for example.\n       */\n      this.glyphGeometryDetail = 1;\n\n      /**\n       * @member {number|null} sdfGlyphSize\n       * The size of each glyph's SDF (signed distance field) used for rendering. This must be a\n       * power-of-two number. Defaults to 64 which is generally a good balance of size and quality\n       * for most fonts. Larger sizes can improve the quality of glyph rendering by increasing\n       * the sharpness of corners and preventing loss of very thin lines, at the expense of\n       * increased memory footprint and longer SDF generation time.\n       */\n      this.sdfGlyphSize = null;\n\n      /**\n       * @member {boolean} gpuAccelerateSDF\n       * When `true`, the SDF generation process will be GPU-accelerated with WebGL when possible,\n       * making it much faster especially for complex glyphs, and falling back to a JavaScript version\n       * executed in web workers when support isn't available. It should automatically detect support,\n       * but it's still somewhat experimental, so you can set it to `false` to force it to use the JS\n       * version if you encounter issues with it.\n       */\n      this.gpuAccelerateSDF = true;\n\n      this.debugSDF = false;\n    }\n\n    /**\n     * Updates the text rendering according to the current text-related configuration properties.\n     * This is an async process, so you can pass in a callback function to be executed when it\n     * finishes.\n     * @param {function} [callback]\n     */\n    sync(callback) {\n      if (this._needsSync) {\n        this._needsSync = false;\n\n        // If there's another sync still in progress, queue\n        if (this._isSyncing) {\n          (this._queuedSyncs || (this._queuedSyncs = [])).push(callback);\n        } else {\n          this._isSyncing = true;\n          this.dispatchEvent(syncStartEvent);\n\n          getTextRenderInfo({\n            text: this.text,\n            font: this.font,\n            fontSize: this.fontSize || 0.1,\n            letterSpacing: this.letterSpacing || 0,\n            lineHeight: this.lineHeight || 'normal',\n            maxWidth: this.maxWidth,\n            direction: this.direction || 'auto',\n            textAlign: this.textAlign,\n            textIndent: this.textIndent,\n            whiteSpace: this.whiteSpace,\n            overflowWrap: this.overflowWrap,\n            anchorX: this.anchorX,\n            anchorY: this.anchorY,\n            colorRanges: this.colorRanges,\n            includeCaretPositions: true, //TODO parameterize\n            sdfGlyphSize: this.sdfGlyphSize,\n            gpuAccelerateSDF: this.gpuAccelerateSDF,\n          }, textRenderInfo => {\n            this._isSyncing = false;\n\n            // Save result for later use in onBeforeRender\n            this._textRenderInfo = textRenderInfo;\n\n            // Update the geometry attributes\n            this.geometry.updateGlyphs(\n              textRenderInfo.glyphBounds,\n              textRenderInfo.glyphAtlasIndices,\n              textRenderInfo.blockBounds,\n              textRenderInfo.chunkedBounds,\n              textRenderInfo.glyphColors\n            );\n\n            // If we had extra sync requests queued up, kick it off\n            const queued = this._queuedSyncs;\n            if (queued) {\n              this._queuedSyncs = null;\n              this._needsSync = true;\n              this.sync(() => {\n                queued.forEach(fn => fn && fn());\n              });\n            }\n\n            this.dispatchEvent(syncCompleteEvent);\n            if (callback) {\n              callback();\n            }\n          });\n        }\n      }\n    }\n\n    /**\n     * Initiate a sync if needed - note it won't complete until next frame at the\n     * earliest so if possible it's a good idea to call sync() manually as soon as\n     * all the properties have been set.\n     * @override\n     */\n    onBeforeRender(renderer, scene, camera, geometry, material, group) {\n      this.sync();\n\n      // This may not always be a text material, e.g. if there's a scene.overrideMaterial present\n      if (material.isTroikaTextMaterial) {\n        this._prepareForRender(material);\n      }\n\n      // We need to force the material to FrontSide to avoid the double-draw-call performance hit\n      // introduced in Three.js r130: https://github.com/mrdoob/three.js/pull/21967 - The sidedness\n      // is instead applied via drawRange in the GlyphsGeometry.\n      material._hadOwnSide = material.hasOwnProperty('side');\n      this.geometry.setSide(material._actualSide = material.side);\n      material.side = three.FrontSide;\n    }\n\n    onAfterRender(renderer, scene, camera, geometry, material, group) {\n      // Restore original material side\n      if (material._hadOwnSide) {\n        material.side = material._actualSide;\n      } else {\n        delete material.side; // back to inheriting from base material\n      }\n    }\n\n    /**\n     * Shortcut to dispose the geometry specific to this instance.\n     * Note: we don't also dispose the derived material here because if anything else is\n     * sharing the same base material it will result in a pause next frame as the program\n     * is recompiled. Instead users can dispose the base material manually, like normal,\n     * and we'll also dispose the derived material at that time.\n     */\n    dispose() {\n      this.geometry.dispose();\n    }\n\n    /**\n     * @property {TroikaTextRenderInfo|null} textRenderInfo\n     * @readonly\n     * The current processed rendering data for this TextMesh, returned by the TextBuilder after\n     * a `sync()` call. This will be `null` initially, and may be stale for a short period until\n     * the asynchrous `sync()` process completes.\n     */\n    get textRenderInfo() {\n      return this._textRenderInfo || null\n    }\n\n    // Handler for automatically wrapping the base material with our upgrades. We do the wrapping\n    // lazily on _read_ rather than write to avoid unnecessary wrapping on transient values.\n    get material() {\n      let derivedMaterial = this._derivedMaterial;\n      const baseMaterial = this._baseMaterial || this._defaultMaterial || (this._defaultMaterial = defaultMaterial.clone());\n      if (!derivedMaterial || derivedMaterial.baseMaterial !== baseMaterial) {\n        derivedMaterial = this._derivedMaterial = createTextDerivedMaterial(baseMaterial);\n        // dispose the derived material when its base material is disposed:\n        baseMaterial.addEventListener('dispose', function onDispose() {\n          baseMaterial.removeEventListener('dispose', onDispose);\n          derivedMaterial.dispose();\n        });\n      }\n      // If text outline is configured, render it as a preliminary draw using Three's multi-material\n      // feature (see GlyphsGeometry which sets up `groups` for this purpose) Doing it with multi\n      // materials ensures the layers are always rendered consecutively in a consistent order.\n      // Each layer will trigger onBeforeRender with the appropriate material.\n      if (this.outlineWidth || this.outlineBlur || this.outlineOffsetX || this.outlineOffsetY) {\n        let outlineMaterial = derivedMaterial._outlineMtl;\n        if (!outlineMaterial) {\n          outlineMaterial = derivedMaterial._outlineMtl = Object.create(derivedMaterial, {\n            id: {value: derivedMaterial.id + 0.1}\n          });\n          outlineMaterial.isTextOutlineMaterial = true;\n          outlineMaterial.depthWrite = false;\n          outlineMaterial.map = null; //???\n          derivedMaterial.addEventListener('dispose', function onDispose() {\n            derivedMaterial.removeEventListener('dispose', onDispose);\n            outlineMaterial.dispose();\n          });\n        }\n        return [\n          outlineMaterial,\n          derivedMaterial\n        ]\n      } else {\n        return derivedMaterial\n      }\n    }\n    set material(baseMaterial) {\n      if (baseMaterial && baseMaterial.isTroikaTextMaterial) { //prevent double-derivation\n        this._derivedMaterial = baseMaterial;\n        this._baseMaterial = baseMaterial.baseMaterial;\n      } else {\n        this._baseMaterial = baseMaterial;\n      }\n    }\n\n    get glyphGeometryDetail() {\n      return this.geometry.detail\n    }\n    set glyphGeometryDetail(detail) {\n      this.geometry.detail = detail;\n    }\n\n    get curveRadius() {\n      return this.geometry.curveRadius\n    }\n    set curveRadius(r) {\n      this.geometry.curveRadius = r;\n    }\n\n    // Create and update material for shadows upon request:\n    get customDepthMaterial() {\n      return first(this.material).getDepthMaterial()\n    }\n    get customDistanceMaterial() {\n      return first(this.material).getDistanceMaterial()\n    }\n\n    _prepareForRender(material) {\n      const isOutline = material.isTextOutlineMaterial;\n      const uniforms = material.uniforms;\n      const textInfo = this.textRenderInfo;\n      if (textInfo) {\n        const {sdfTexture, blockBounds} = textInfo;\n        uniforms.uTroikaSDFTexture.value = sdfTexture;\n        uniforms.uTroikaSDFTextureSize.value.set(sdfTexture.image.width, sdfTexture.image.height);\n        uniforms.uTroikaSDFGlyphSize.value = textInfo.sdfGlyphSize;\n        uniforms.uTroikaSDFExponent.value = textInfo.sdfExponent;\n        uniforms.uTroikaTotalBounds.value.fromArray(blockBounds);\n        uniforms.uTroikaUseGlyphColors.value = !isOutline && !!textInfo.glyphColors;\n\n        let distanceOffset = 0;\n        let blurRadius = 0;\n        let strokeWidth = 0;\n        let fillOpacity;\n        let strokeOpacity;\n        let strokeColor;\n        let offsetX = 0;\n        let offsetY = 0;\n\n        if (isOutline) {\n          let {outlineWidth, outlineOffsetX, outlineOffsetY, outlineBlur, outlineOpacity} = this;\n          distanceOffset = this._parsePercent(outlineWidth) || 0;\n          blurRadius = Math.max(0, this._parsePercent(outlineBlur) || 0);\n          fillOpacity = outlineOpacity;\n          offsetX = this._parsePercent(outlineOffsetX) || 0;\n          offsetY = this._parsePercent(outlineOffsetY) || 0;\n        } else {\n          strokeWidth = Math.max(0, this._parsePercent(this.strokeWidth) || 0);\n          if (strokeWidth) {\n            strokeColor = this.strokeColor;\n            uniforms.uTroikaStrokeColor.value.set(strokeColor == null ? defaultStrokeColor : strokeColor);\n            strokeOpacity = this.strokeOpacity;\n            if (strokeOpacity == null) strokeOpacity = 1;\n          }\n          fillOpacity = this.fillOpacity;\n        }\n\n        uniforms.uTroikaDistanceOffset.value = distanceOffset;\n        uniforms.uTroikaPositionOffset.value.set(offsetX, offsetY);\n        uniforms.uTroikaBlurRadius.value = blurRadius;\n        uniforms.uTroikaStrokeWidth.value = strokeWidth;\n        uniforms.uTroikaStrokeOpacity.value = strokeOpacity;\n        uniforms.uTroikaFillOpacity.value = fillOpacity == null ? 1 : fillOpacity;\n        uniforms.uTroikaCurveRadius.value = this.curveRadius || 0;\n\n        let clipRect = this.clipRect;\n        if (clipRect && Array.isArray(clipRect) && clipRect.length === 4) {\n          uniforms.uTroikaClipRect.value.fromArray(clipRect);\n        } else {\n          // no clipping - choose a finite rect that shouldn't ever be reached by overflowing glyphs or outlines\n          const pad = (this.fontSize || 0.1) * 100;\n          uniforms.uTroikaClipRect.value.set(\n            blockBounds[0] - pad,\n            blockBounds[1] - pad,\n            blockBounds[2] + pad,\n            blockBounds[3] + pad\n          );\n        }\n        this.geometry.applyClipRect(uniforms.uTroikaClipRect.value);\n      }\n      uniforms.uTroikaSDFDebug.value = !!this.debugSDF;\n      material.polygonOffset = !!this.depthOffset;\n      material.polygonOffsetFactor = material.polygonOffsetUnits = this.depthOffset || 0;\n\n      // Shortcut for setting material color via `color` prop on the mesh; this is\n      // applied only to the derived material to avoid mutating a shared base material.\n      const color = isOutline ? (this.outlineColor || 0) : this.color;\n\n      if (color == null) {\n        delete material.color; //inherit from base\n      } else {\n        const colorObj = material.hasOwnProperty('color') ? material.color : (material.color = new three.Color());\n        if (color !== colorObj._input || typeof color === 'object') {\n          colorObj.set(colorObj._input = color);\n        }\n      }\n\n      // base orientation\n      let orient = this.orientation || defaultOrient;\n      if (orient !== material._orientation) {\n        let rotMat = uniforms.uTroikaOrient.value;\n        orient = orient.replace(/[^-+xyz]/g, '');\n        let match = orient !== defaultOrient && orient.match(/^([-+])([xyz])([-+])([xyz])$/);\n        if (match) {\n          let [, hSign, hAxis, vSign, vAxis] = match;\n          tempVec3a.set(0, 0, 0)[hAxis] = hSign === '-' ? 1 : -1;\n          tempVec3b.set(0, 0, 0)[vAxis] = vSign === '-' ? -1 : 1;\n          tempMat4.lookAt(origin, tempVec3a.cross(tempVec3b), tempVec3b);\n          rotMat.setFromMatrix4(tempMat4);\n        } else {\n          rotMat.identity();\n        }\n        material._orientation = orient;\n      }\n    }\n\n    _parsePercent(value) {\n      if (typeof value === 'string') {\n        let match = value.match(/^(-?[\\d.]+)%$/);\n        let pct = match ? parseFloat(match[1]) : NaN;\n        value = (isNaN(pct) ? 0 : pct / 100) * this.fontSize;\n      }\n      return value\n    }\n\n    /**\n     * Translate a point in local space to an x/y in the text plane.\n     */\n    localPositionToTextCoords(position, target = new three.Vector2()) {\n      target.copy(position); //simple non-curved case is 1:1\n      const r = this.curveRadius;\n      if (r) { //flatten the curve\n        target.x = Math.atan2(position.x, Math.abs(r) - Math.abs(position.z)) * Math.abs(r);\n      }\n      return target\n    }\n\n    /**\n     * Translate a point in world space to an x/y in the text plane.\n     */\n    worldPositionToTextCoords(position, target = new three.Vector2()) {\n      tempVec3a.copy(position);\n      return this.localPositionToTextCoords(this.worldToLocal(tempVec3a), target)\n    }\n\n    /**\n     * @override Custom raycasting to test against the whole text block's max rectangular bounds\n     * TODO is there any reason to make this more granular, like within individual line or glyph rects?\n     */\n    raycast(raycaster, intersects) {\n      const {textRenderInfo, curveRadius} = this;\n      if (textRenderInfo) {\n        const bounds = textRenderInfo.blockBounds;\n        const raycastMesh = curveRadius ? getCurvedRaycastMesh() : getFlatRaycastMesh();\n        const geom = raycastMesh.geometry;\n        const {position, uv} = geom.attributes;\n        for (let i = 0; i < uv.count; i++) {\n          let x = bounds[0] + (uv.getX(i) * (bounds[2] - bounds[0]));\n          const y = bounds[1] + (uv.getY(i) * (bounds[3] - bounds[1]));\n          let z = 0;\n          if (curveRadius) {\n            z = curveRadius - Math.cos(x / curveRadius) * curveRadius;\n            x = Math.sin(x / curveRadius) * curveRadius;\n          }\n          position.setXYZ(i, x, y, z);\n        }\n        geom.boundingSphere = this.geometry.boundingSphere;\n        geom.boundingBox = this.geometry.boundingBox;\n        raycastMesh.matrixWorld = this.matrixWorld;\n        raycastMesh.material.side = this.material.side;\n        tempArray.length = 0;\n        raycastMesh.raycast(raycaster, tempArray);\n        for (let i = 0; i < tempArray.length; i++) {\n          tempArray[i].object = this;\n          intersects.push(tempArray[i]);\n        }\n      }\n    }\n\n    copy(source) {\n      // Prevent copying the geometry reference so we don't end up sharing attributes between instances\n      const geom = this.geometry;\n      super.copy(source);\n      this.geometry = geom;\n\n      COPYABLE_PROPS.forEach(prop => {\n        this[prop] = source[prop];\n      });\n      return this\n    }\n\n    clone() {\n      return new this.constructor().copy(this)\n    }\n  }\n\n\n  // Create setters for properties that affect text layout:\n  SYNCABLE_PROPS.forEach(prop => {\n    const privateKey = '_private_' + prop;\n    Object.defineProperty(Text.prototype, prop, {\n      get() {\n        return this[privateKey]\n      },\n      set(value) {\n        if (value !== this[privateKey]) {\n          this[privateKey] = value;\n          this._needsSync = true;\n        }\n      }\n    });\n  });\n\n  //=== Utility functions for dealing with carets and selection ranges ===//\n\n  /**\n   * @typedef {object} TextCaret\n   * @property {number} x - x position of the caret\n   * @property {number} y - y position of the caret's bottom\n   * @property {number} height - height of the caret\n   * @property {number} charIndex - the index in the original input string of this caret's target\n   *   character; the caret will be for the position _before_ that character.\n   */\n\n  /**\n   * Given a local x/y coordinate in the text block plane, find the nearest caret position.\n   * @param {TroikaTextRenderInfo} textRenderInfo - a result object from TextBuilder#getTextRenderInfo\n   * @param {number} x\n   * @param {number} y\n   * @return {TextCaret | null}\n   */\n  function getCaretAtPoint(textRenderInfo, x, y) {\n    let closestCaret = null;\n    const {caretHeight} = textRenderInfo;\n    const caretsByRow = groupCaretsByRow(textRenderInfo);\n\n    // Find nearest row by y first\n    let closestRowY = Infinity;\n    caretsByRow.forEach((carets, rowY) => {\n      if (Math.abs(y - (rowY + caretHeight / 2)) < Math.abs(y - (closestRowY + caretHeight / 2))) {\n        closestRowY = rowY;\n      }\n    });\n\n    // Then find closest caret by x within that row\n    caretsByRow.get(closestRowY).forEach(caret => {\n      if (!closestCaret || Math.abs(x - caret.x) < Math.abs(x - closestCaret.x)) {\n        closestCaret = caret;\n      }\n    });\n    return closestCaret\n  }\n\n\n  const _rectsCache = new WeakMap();\n\n  /**\n   * Given start and end character indexes, return a list of rectangles covering all the\n   * characters within that selection.\n   * @param {TroikaTextRenderInfo} textRenderInfo\n   * @param {number} start - index of the first char in the selection\n   * @param {number} end - index of the first char after the selection\n   * @return {Array<{left, top, right, bottom}> | null}\n   */\n  function getSelectionRects(textRenderInfo, start, end) {\n    let rects;\n    if (textRenderInfo) {\n      // Check cache - textRenderInfo is frozen so it's safe to cache based on it\n      let prevResult = _rectsCache.get(textRenderInfo);\n      if (prevResult && prevResult.start === start && prevResult.end === end) {\n        return prevResult.rects\n      }\n\n      const {caretPositions, caretHeight} = textRenderInfo;\n\n      // Normalize\n      if (end < start) {\n        const s = start;\n        start = end;\n        end = s;\n      }\n      start = Math.max(start, 0);\n      end = Math.min(end, caretPositions.length + 1);\n\n      // Build list of rects, expanding the current rect for all characters in a run and starting\n      // a new rect whenever reaching a new line or a new bidi direction\n      rects = [];\n      let currentRect = null;\n      for (let i = start; i < end; i++) {\n        const x1 = caretPositions[i * 3];\n        const x2 = caretPositions[i * 3 + 1];\n        const left = Math.min(x1, x2);\n        const right = Math.max(x1, x2);\n        const bottom = caretPositions[i * 3 + 2];\n        if (!currentRect || bottom !== currentRect.bottom || left > currentRect.right || right < currentRect.left) {\n          currentRect = {\n            left: Infinity,\n            right: -Infinity,\n            bottom: bottom,\n            top: bottom + caretHeight\n          };\n          rects.push(currentRect);\n        }\n        currentRect.left = Math.min(left, currentRect.left);\n        currentRect.right = Math.max(right, currentRect.right);\n      }\n\n      // Merge any overlapping rects, e.g. those formed by adjacent bidi runs\n      rects.sort((a, b) => b.bottom - a.bottom || a.left - b.left);\n      for (let i = rects.length - 1; i-- > 0;) {\n        const rectA = rects[i];\n        const rectB = rects[i + 1];\n        if (rectA.bottom === rectB.bottom && rectA.left <= rectB.right && rectA.right >= rectB.left) {\n          rectB.left = Math.min(rectB.left, rectA.left);\n          rectB.right = Math.max(rectB.right, rectA.right);\n          rects.splice(i, 1);\n        }\n      }\n\n      _rectsCache.set(textRenderInfo, {start, end, rects});\n    }\n    return rects\n  }\n\n  const _caretsByRowCache = new WeakMap();\n\n  function groupCaretsByRow(textRenderInfo) {\n    // textRenderInfo is frozen so it's safe to cache based on it\n    let caretsByRow = _caretsByRowCache.get(textRenderInfo);\n    if (!caretsByRow) {\n      const {caretPositions, caretHeight} = textRenderInfo;\n      caretsByRow = new Map();\n      for (let i = 0; i < caretPositions.length; i += 3) {\n        const rowY = caretPositions[i + 2];\n        let rowCarets = caretsByRow.get(rowY);\n        if (!rowCarets) {\n          caretsByRow.set(rowY, rowCarets = []);\n        }\n        rowCarets.push({\n          x: caretPositions[i],\n          y: rowY,\n          height: caretHeight,\n          charIndex: i / 3\n        });\n        // Add one more caret after the final char\n        if (i + 3 >= caretPositions.length) {\n          rowCarets.push({\n            x: caretPositions[i + 1],\n            y: rowY,\n            height: caretHeight,\n            charIndex: i / 3 + 1\n          });\n        }\n      }\n    }\n    _caretsByRowCache.set(textRenderInfo, caretsByRow);\n    return caretsByRow\n  }\n\n  exports.GlyphsGeometry = GlyphsGeometry;\n  exports.Text = Text;\n  exports.configureTextBuilder = configureTextBuilder;\n  exports.createTextDerivedMaterial = createTextDerivedMaterial;\n  exports.dumpSDFTextures = dumpSDFTextures;\n  exports.getCaretAtPoint = getCaretAtPoint;\n  exports.getSelectionRects = getSelectionRects;\n  exports.preloadFont = preloadFont;\n  exports.typesetterWorkerModule = typesetterWorkerModule;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/troika-three-text/dist/troika-three-text.umd.js\n");

/***/ })

};
;