/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/three-mesh-bvh";
exports.ids = ["vendor-chunks/three-mesh-bvh"];
exports.modules = {

/***/ "(ssr)/./node_modules/three-mesh-bvh/build/index.umd.cjs":
/*!*********************************************************!*\
  !*** ./node_modules/three-mesh-bvh/build/index.umd.cjs ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("(function (global, factory) {\n\t true ? factory(exports, __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.cjs\")) :\n\t0;\n})(this, (function (exports, three) { 'use strict';\n\n\t// Split strategy constants\n\tconst CENTER = 0;\n\tconst AVERAGE = 1;\n\tconst SAH = 2;\n\n\t// Traversal constants\n\tconst NOT_INTERSECTED = 0;\n\tconst INTERSECTED = 1;\n\tconst CONTAINED = 2;\n\n\t// SAH cost constants\n\t// TODO: hone these costs more. The relative difference between them should be the\n\t// difference in measured time to perform a triangle intersection vs traversing\n\t// bounds.\n\tconst TRIANGLE_INTERSECT_COST = 1.25;\n\tconst TRAVERSAL_COST = 1;\n\n\n\t// Build constants\n\tconst BYTES_PER_NODE = 6 * 4 + 4 + 4;\n\tconst IS_LEAFNODE_FLAG = 0xFFFF;\n\n\t// EPSILON for computing floating point error during build\n\t// https://en.wikipedia.org/wiki/Machine_epsilon#Values_for_standard_hardware_floating_point_arithmetics\n\tconst FLOAT32_EPSILON = Math.pow( 2, - 24 );\n\n\tconst SKIP_GENERATION = Symbol( 'SKIP_GENERATION' );\n\n\tfunction getVertexCount( geo ) {\n\n\t\treturn geo.index ? geo.index.count : geo.attributes.position.count;\n\n\t}\n\n\tfunction getTriCount( geo ) {\n\n\t\treturn getVertexCount( geo ) / 3;\n\n\t}\n\n\tfunction getIndexArray( vertexCount, BufferConstructor = ArrayBuffer ) {\n\n\t\tif ( vertexCount > 65535 ) {\n\n\t\t\treturn new Uint32Array( new BufferConstructor( 4 * vertexCount ) );\n\n\t\t} else {\n\n\t\t\treturn new Uint16Array( new BufferConstructor( 2 * vertexCount ) );\n\n\t\t}\n\n\t}\n\n\t// ensures that an index is present on the geometry\n\tfunction ensureIndex( geo, options ) {\n\n\t\tif ( ! geo.index ) {\n\n\t\t\tconst vertexCount = geo.attributes.position.count;\n\t\t\tconst BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;\n\t\t\tconst index = getIndexArray( vertexCount, BufferConstructor );\n\t\t\tgeo.setIndex( new three.BufferAttribute( index, 1 ) );\n\n\t\t\tfor ( let i = 0; i < vertexCount; i ++ ) {\n\n\t\t\t\tindex[ i ] = i;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Computes the set of { offset, count } ranges which need independent BVH roots. Each\n\t// region in the geometry index that belongs to a different set of material groups requires\n\t// a separate BVH root, so that triangles indices belonging to one group never get swapped\n\t// with triangle indices belongs to another group. For example, if the groups were like this:\n\t//\n\t// [-------------------------------------------------------------]\n\t// |__________________|\n\t//   g0 = [0, 20]  |______________________||_____________________|\n\t//                      g1 = [16, 40]           g2 = [41, 60]\n\t//\n\t// we would need four BVH roots: [0, 15], [16, 20], [21, 40], [41, 60].\n\tfunction getFullGeometryRange( geo ) {\n\n\t\tconst triCount = getTriCount( geo );\n\t\tconst drawRange = geo.drawRange;\n\t\tconst start = drawRange.start / 3;\n\t\tconst end = ( drawRange.start + drawRange.count ) / 3;\n\n\t\tconst offset = Math.max( 0, start );\n\t\tconst count = Math.min( triCount, end ) - offset;\n\t\treturn [ {\n\t\t\toffset: Math.floor( offset ),\n\t\t\tcount: Math.floor( count ),\n\t\t} ];\n\n\t}\n\n\tfunction getRootIndexRanges( geo ) {\n\n\t\tif ( ! geo.groups || ! geo.groups.length ) {\n\n\t\t\treturn getFullGeometryRange( geo );\n\n\t\t}\n\n\t\tconst ranges = [];\n\t\tconst rangeBoundaries = new Set();\n\n\t\tconst drawRange = geo.drawRange;\n\t\tconst drawRangeStart = drawRange.start / 3;\n\t\tconst drawRangeEnd = ( drawRange.start + drawRange.count ) / 3;\n\t\tfor ( const group of geo.groups ) {\n\n\t\t\tconst groupStart = group.start / 3;\n\t\t\tconst groupEnd = ( group.start + group.count ) / 3;\n\t\t\trangeBoundaries.add( Math.max( drawRangeStart, groupStart ) );\n\t\t\trangeBoundaries.add( Math.min( drawRangeEnd, groupEnd ) );\n\n\t\t}\n\n\n\t\t// note that if you don't pass in a comparator, it sorts them lexicographically as strings :-(\n\t\tconst sortedBoundaries = Array.from( rangeBoundaries.values() ).sort( ( a, b ) => a - b );\n\t\tfor ( let i = 0; i < sortedBoundaries.length - 1; i ++ ) {\n\n\t\t\tconst start = sortedBoundaries[ i ];\n\t\t\tconst end = sortedBoundaries[ i + 1 ];\n\n\t\t\tranges.push( {\n\t\t\t\toffset: Math.floor( start ),\n\t\t\t\tcount: Math.floor( end - start ),\n\t\t\t} );\n\n\t\t}\n\n\t\treturn ranges;\n\n\t}\n\n\tfunction hasGroupGaps( geometry ) {\n\n\t\tif ( geometry.groups.length === 0 ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tconst vertexCount = getTriCount( geometry );\n\t\tconst groups = getRootIndexRanges( geometry )\n\t\t\t.sort( ( a, b ) => a.offset - b.offset );\n\n\t\tconst finalGroup = groups[ groups.length - 1 ];\n\t\tfinalGroup.count = Math.min( vertexCount - finalGroup.offset, finalGroup.count );\n\n\t\tlet total = 0;\n\t\tgroups.forEach( ( { count } ) => total += count );\n\t\treturn vertexCount !== total;\n\n\t}\n\n\tfunction arrayToBox( nodeIndex32, array, target ) {\n\n\t\ttarget.min.x = array[ nodeIndex32 ];\n\t\ttarget.min.y = array[ nodeIndex32 + 1 ];\n\t\ttarget.min.z = array[ nodeIndex32 + 2 ];\n\n\t\ttarget.max.x = array[ nodeIndex32 + 3 ];\n\t\ttarget.max.y = array[ nodeIndex32 + 4 ];\n\t\ttarget.max.z = array[ nodeIndex32 + 5 ];\n\n\t\treturn target;\n\n\t}\n\n\tfunction makeEmptyBounds( target ) {\n\n\t\ttarget[ 0 ] = target[ 1 ] = target[ 2 ] = Infinity;\n\t\ttarget[ 3 ] = target[ 4 ] = target[ 5 ] = - Infinity;\n\n\t}\n\n\tfunction getLongestEdgeIndex( bounds ) {\n\n\t\tlet splitDimIdx = - 1;\n\t\tlet splitDist = - Infinity;\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst dist = bounds[ i + 3 ] - bounds[ i ];\n\t\t\tif ( dist > splitDist ) {\n\n\t\t\t\tsplitDist = dist;\n\t\t\t\tsplitDimIdx = i;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn splitDimIdx;\n\n\t}\n\n\t// copies bounds a into bounds b\n\tfunction copyBounds( source, target ) {\n\n\t\ttarget.set( source );\n\n\t}\n\n\t// sets bounds target to the union of bounds a and b\n\tfunction unionBounds( a, b, target ) {\n\n\t\tlet aVal, bVal;\n\t\tfor ( let d = 0; d < 3; d ++ ) {\n\n\t\t\tconst d3 = d + 3;\n\n\t\t\t// set the minimum values\n\t\t\taVal = a[ d ];\n\t\t\tbVal = b[ d ];\n\t\t\ttarget[ d ] = aVal < bVal ? aVal : bVal;\n\n\t\t\t// set the max values\n\t\t\taVal = a[ d3 ];\n\t\t\tbVal = b[ d3 ];\n\t\t\ttarget[ d3 ] = aVal > bVal ? aVal : bVal;\n\n\t\t}\n\n\t}\n\n\t// expands the given bounds by the provided triangle bounds\n\tfunction expandByTriangleBounds( startIndex, triangleBounds, bounds ) {\n\n\t\tfor ( let d = 0; d < 3; d ++ ) {\n\n\t\t\tconst tCenter = triangleBounds[ startIndex + 2 * d ];\n\t\t\tconst tHalf = triangleBounds[ startIndex + 2 * d + 1 ];\n\n\t\t\tconst tMin = tCenter - tHalf;\n\t\t\tconst tMax = tCenter + tHalf;\n\n\t\t\tif ( tMin < bounds[ d ] ) {\n\n\t\t\t\tbounds[ d ] = tMin;\n\n\t\t\t}\n\n\t\t\tif ( tMax > bounds[ d + 3 ] ) {\n\n\t\t\t\tbounds[ d + 3 ] = tMax;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// compute bounds surface area\n\tfunction computeSurfaceArea( bounds ) {\n\n\t\tconst d0 = bounds[ 3 ] - bounds[ 0 ];\n\t\tconst d1 = bounds[ 4 ] - bounds[ 1 ];\n\t\tconst d2 = bounds[ 5 ] - bounds[ 2 ];\n\n\t\treturn 2 * ( d0 * d1 + d1 * d2 + d2 * d0 );\n\n\t}\n\n\t// computes the union of the bounds of all of the given triangles and puts the resulting box in target. If\n\t// centroidTarget is provided then a bounding box is computed for the centroids of the triangles, as well.\n\t// These are computed together to avoid redundant accesses to bounds array.\n\tfunction getBounds( triangleBounds, offset, count, target, centroidTarget = null ) {\n\n\t\tlet minx = Infinity;\n\t\tlet miny = Infinity;\n\t\tlet minz = Infinity;\n\t\tlet maxx = - Infinity;\n\t\tlet maxy = - Infinity;\n\t\tlet maxz = - Infinity;\n\n\t\tlet cminx = Infinity;\n\t\tlet cminy = Infinity;\n\t\tlet cminz = Infinity;\n\t\tlet cmaxx = - Infinity;\n\t\tlet cmaxy = - Infinity;\n\t\tlet cmaxz = - Infinity;\n\n\t\tconst includeCentroid = centroidTarget !== null;\n\t\tfor ( let i = offset * 6, end = ( offset + count ) * 6; i < end; i += 6 ) {\n\n\t\t\tconst cx = triangleBounds[ i + 0 ];\n\t\t\tconst hx = triangleBounds[ i + 1 ];\n\t\t\tconst lx = cx - hx;\n\t\t\tconst rx = cx + hx;\n\t\t\tif ( lx < minx ) minx = lx;\n\t\t\tif ( rx > maxx ) maxx = rx;\n\t\t\tif ( includeCentroid && cx < cminx ) cminx = cx;\n\t\t\tif ( includeCentroid && cx > cmaxx ) cmaxx = cx;\n\n\t\t\tconst cy = triangleBounds[ i + 2 ];\n\t\t\tconst hy = triangleBounds[ i + 3 ];\n\t\t\tconst ly = cy - hy;\n\t\t\tconst ry = cy + hy;\n\t\t\tif ( ly < miny ) miny = ly;\n\t\t\tif ( ry > maxy ) maxy = ry;\n\t\t\tif ( includeCentroid && cy < cminy ) cminy = cy;\n\t\t\tif ( includeCentroid && cy > cmaxy ) cmaxy = cy;\n\n\t\t\tconst cz = triangleBounds[ i + 4 ];\n\t\t\tconst hz = triangleBounds[ i + 5 ];\n\t\t\tconst lz = cz - hz;\n\t\t\tconst rz = cz + hz;\n\t\t\tif ( lz < minz ) minz = lz;\n\t\t\tif ( rz > maxz ) maxz = rz;\n\t\t\tif ( includeCentroid && cz < cminz ) cminz = cz;\n\t\t\tif ( includeCentroid && cz > cmaxz ) cmaxz = cz;\n\n\t\t}\n\n\t\ttarget[ 0 ] = minx;\n\t\ttarget[ 1 ] = miny;\n\t\ttarget[ 2 ] = minz;\n\n\t\ttarget[ 3 ] = maxx;\n\t\ttarget[ 4 ] = maxy;\n\t\ttarget[ 5 ] = maxz;\n\n\t\tif ( includeCentroid ) {\n\n\t\t\tcentroidTarget[ 0 ] = cminx;\n\t\t\tcentroidTarget[ 1 ] = cminy;\n\t\t\tcentroidTarget[ 2 ] = cminz;\n\n\t\t\tcentroidTarget[ 3 ] = cmaxx;\n\t\t\tcentroidTarget[ 4 ] = cmaxy;\n\t\t\tcentroidTarget[ 5 ] = cmaxz;\n\n\t\t}\n\n\t}\n\n\t// A stand alone function for retrieving the centroid bounds.\n\tfunction getCentroidBounds( triangleBounds, offset, count, centroidTarget ) {\n\n\t\tlet cminx = Infinity;\n\t\tlet cminy = Infinity;\n\t\tlet cminz = Infinity;\n\t\tlet cmaxx = - Infinity;\n\t\tlet cmaxy = - Infinity;\n\t\tlet cmaxz = - Infinity;\n\n\t\tfor ( let i = offset * 6, end = ( offset + count ) * 6; i < end; i += 6 ) {\n\n\t\t\tconst cx = triangleBounds[ i + 0 ];\n\t\t\tif ( cx < cminx ) cminx = cx;\n\t\t\tif ( cx > cmaxx ) cmaxx = cx;\n\n\t\t\tconst cy = triangleBounds[ i + 2 ];\n\t\t\tif ( cy < cminy ) cminy = cy;\n\t\t\tif ( cy > cmaxy ) cmaxy = cy;\n\n\t\t\tconst cz = triangleBounds[ i + 4 ];\n\t\t\tif ( cz < cminz ) cminz = cz;\n\t\t\tif ( cz > cmaxz ) cmaxz = cz;\n\n\t\t}\n\n\t\tcentroidTarget[ 0 ] = cminx;\n\t\tcentroidTarget[ 1 ] = cminy;\n\t\tcentroidTarget[ 2 ] = cminz;\n\n\t\tcentroidTarget[ 3 ] = cmaxx;\n\t\tcentroidTarget[ 4 ] = cmaxy;\n\t\tcentroidTarget[ 5 ] = cmaxz;\n\n\t}\n\n\n\t// precomputes the bounding box for each triangle; required for quickly calculating tree splits.\n\t// result is an array of size tris.length * 6 where triangle i maps to a\n\t// [x_center, x_delta, y_center, y_delta, z_center, z_delta] tuple starting at index i * 6,\n\t// representing the center and half-extent in each dimension of triangle i\n\tfunction computeTriangleBounds( geo, fullBounds ) {\n\n\t\t// clear the bounds to empty\n\t\tmakeEmptyBounds( fullBounds );\n\n\t\tconst posAttr = geo.attributes.position;\n\t\tconst index = geo.index ? geo.index.array : null;\n\t\tconst triCount = getTriCount( geo );\n\t\tconst triangleBounds = new Float32Array( triCount * 6 );\n\t\tconst normalized = posAttr.normalized;\n\n\t\t// used for non-normalized positions\n\t\tconst posArr = posAttr.array;\n\n\t\t// support for an interleaved position buffer\n\t\tconst bufferOffset = posAttr.offset || 0;\n\t\tlet stride = 3;\n\t\tif ( posAttr.isInterleavedBufferAttribute ) {\n\n\t\t\tstride = posAttr.data.stride;\n\n\t\t}\n\n\t\t// used for normalized positions\n\t\tconst getters = [ 'getX', 'getY', 'getZ' ];\n\n\t\tfor ( let tri = 0; tri < triCount; tri ++ ) {\n\n\t\t\tconst tri3 = tri * 3;\n\t\t\tconst tri6 = tri * 6;\n\n\t\t\tlet ai = tri3 + 0;\n\t\t\tlet bi = tri3 + 1;\n\t\t\tlet ci = tri3 + 2;\n\n\t\t\tif ( index ) {\n\n\t\t\t\tai = index[ ai ];\n\t\t\t\tbi = index[ bi ];\n\t\t\t\tci = index[ ci ];\n\n\t\t\t}\n\n\t\t\t// we add the stride and offset here since we access the array directly\n\t\t\t// below for the sake of performance\n\t\t\tif ( ! normalized ) {\n\n\t\t\t\tai = ai * stride + bufferOffset;\n\t\t\t\tbi = bi * stride + bufferOffset;\n\t\t\t\tci = ci * stride + bufferOffset;\n\n\t\t\t}\n\n\t\t\tfor ( let el = 0; el < 3; el ++ ) {\n\n\t\t\t\tlet a, b, c;\n\n\t\t\t\tif ( normalized ) {\n\n\t\t\t\t\ta = posAttr[ getters[ el ] ]( ai );\n\t\t\t\t\tb = posAttr[ getters[ el ] ]( bi );\n\t\t\t\t\tc = posAttr[ getters[ el ] ]( ci );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ta = posArr[ ai + el ];\n\t\t\t\t\tb = posArr[ bi + el ];\n\t\t\t\t\tc = posArr[ ci + el ];\n\n\t\t\t\t}\n\n\t\t\t\tlet min = a;\n\t\t\t\tif ( b < min ) min = b;\n\t\t\t\tif ( c < min ) min = c;\n\n\t\t\t\tlet max = a;\n\t\t\t\tif ( b > max ) max = b;\n\t\t\t\tif ( c > max ) max = c;\n\n\t\t\t\t// Increase the bounds size by float32 epsilon to avoid precision errors when\n\t\t\t\t// converting to 32 bit float. Scale the epsilon by the size of the numbers being\n\t\t\t\t// worked with.\n\t\t\t\tconst halfExtents = ( max - min ) / 2;\n\t\t\t\tconst el2 = el * 2;\n\t\t\t\ttriangleBounds[ tri6 + el2 + 0 ] = min + halfExtents;\n\t\t\t\ttriangleBounds[ tri6 + el2 + 1 ] = halfExtents + ( Math.abs( min ) + halfExtents ) * FLOAT32_EPSILON;\n\n\t\t\t\tif ( min < fullBounds[ el ] ) fullBounds[ el ] = min;\n\t\t\t\tif ( max > fullBounds[ el + 3 ] ) fullBounds[ el + 3 ] = max;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn triangleBounds;\n\n\t}\n\n\tconst BIN_COUNT = 32;\n\tconst binsSort = ( a, b ) => a.candidate - b.candidate;\n\tconst sahBins = new Array( BIN_COUNT ).fill().map( () => {\n\n\t\treturn {\n\n\t\t\tcount: 0,\n\t\t\tbounds: new Float32Array( 6 ),\n\t\t\trightCacheBounds: new Float32Array( 6 ),\n\t\t\tleftCacheBounds: new Float32Array( 6 ),\n\t\t\tcandidate: 0,\n\n\t\t};\n\n\t} );\n\tconst leftBounds = new Float32Array( 6 );\n\n\tfunction getOptimalSplit( nodeBoundingData, centroidBoundingData, triangleBounds, offset, count, strategy ) {\n\n\t\tlet axis = - 1;\n\t\tlet pos = 0;\n\n\t\t// Center\n\t\tif ( strategy === CENTER ) {\n\n\t\t\taxis = getLongestEdgeIndex( centroidBoundingData );\n\t\t\tif ( axis !== - 1 ) {\n\n\t\t\t\tpos = ( centroidBoundingData[ axis ] + centroidBoundingData[ axis + 3 ] ) / 2;\n\n\t\t\t}\n\n\t\t} else if ( strategy === AVERAGE ) {\n\n\t\t\taxis = getLongestEdgeIndex( nodeBoundingData );\n\t\t\tif ( axis !== - 1 ) {\n\n\t\t\t\tpos = getAverage( triangleBounds, offset, count, axis );\n\n\t\t\t}\n\n\t\t} else if ( strategy === SAH ) {\n\n\t\t\tconst rootSurfaceArea = computeSurfaceArea( nodeBoundingData );\n\t\t\tlet bestCost = TRIANGLE_INTERSECT_COST * count;\n\n\t\t\t// iterate over all axes\n\t\t\tconst cStart = offset * 6;\n\t\t\tconst cEnd = ( offset + count ) * 6;\n\t\t\tfor ( let a = 0; a < 3; a ++ ) {\n\n\t\t\t\tconst axisLeft = centroidBoundingData[ a ];\n\t\t\t\tconst axisRight = centroidBoundingData[ a + 3 ];\n\t\t\t\tconst axisLength = axisRight - axisLeft;\n\t\t\t\tconst binWidth = axisLength / BIN_COUNT;\n\n\t\t\t\t// If we have fewer triangles than we're planning to split then just check all\n\t\t\t\t// the triangle positions because it will be faster.\n\t\t\t\tif ( count < BIN_COUNT / 4 ) {\n\n\t\t\t\t\t// initialize the bin candidates\n\t\t\t\t\tconst truncatedBins = [ ...sahBins ];\n\t\t\t\t\ttruncatedBins.length = count;\n\n\t\t\t\t\t// set the candidates\n\t\t\t\t\tlet b = 0;\n\t\t\t\t\tfor ( let c = cStart; c < cEnd; c += 6, b ++ ) {\n\n\t\t\t\t\t\tconst bin = truncatedBins[ b ];\n\t\t\t\t\t\tbin.candidate = triangleBounds[ c + 2 * a ];\n\t\t\t\t\t\tbin.count = 0;\n\n\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\tbounds,\n\t\t\t\t\t\t\tleftCacheBounds,\n\t\t\t\t\t\t\trightCacheBounds,\n\t\t\t\t\t\t} = bin;\n\t\t\t\t\t\tfor ( let d = 0; d < 3; d ++ ) {\n\n\t\t\t\t\t\t\trightCacheBounds[ d ] = Infinity;\n\t\t\t\t\t\t\trightCacheBounds[ d + 3 ] = - Infinity;\n\n\t\t\t\t\t\t\tleftCacheBounds[ d ] = Infinity;\n\t\t\t\t\t\t\tleftCacheBounds[ d + 3 ] = - Infinity;\n\n\t\t\t\t\t\t\tbounds[ d ] = Infinity;\n\t\t\t\t\t\t\tbounds[ d + 3 ] = - Infinity;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\texpandByTriangleBounds( c, triangleBounds, bounds );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttruncatedBins.sort( binsSort );\n\n\t\t\t\t\t// remove redundant splits\n\t\t\t\t\tlet splitCount = count;\n\t\t\t\t\tfor ( let bi = 0; bi < splitCount; bi ++ ) {\n\n\t\t\t\t\t\tconst bin = truncatedBins[ bi ];\n\t\t\t\t\t\twhile ( bi + 1 < splitCount && truncatedBins[ bi + 1 ].candidate === bin.candidate ) {\n\n\t\t\t\t\t\t\ttruncatedBins.splice( bi + 1, 1 );\n\t\t\t\t\t\t\tsplitCount --;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// find the appropriate bin for each triangle and expand the bounds.\n\t\t\t\t\tfor ( let c = cStart; c < cEnd; c += 6 ) {\n\n\t\t\t\t\t\tconst center = triangleBounds[ c + 2 * a ];\n\t\t\t\t\t\tfor ( let bi = 0; bi < splitCount; bi ++ ) {\n\n\t\t\t\t\t\t\tconst bin = truncatedBins[ bi ];\n\t\t\t\t\t\t\tif ( center >= bin.candidate ) {\n\n\t\t\t\t\t\t\t\texpandByTriangleBounds( c, triangleBounds, bin.rightCacheBounds );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\texpandByTriangleBounds( c, triangleBounds, bin.leftCacheBounds );\n\t\t\t\t\t\t\t\tbin.count ++;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// expand all the bounds\n\t\t\t\t\tfor ( let bi = 0; bi < splitCount; bi ++ ) {\n\n\t\t\t\t\t\tconst bin = truncatedBins[ bi ];\n\t\t\t\t\t\tconst leftCount = bin.count;\n\t\t\t\t\t\tconst rightCount = count - bin.count;\n\n\t\t\t\t\t\t// check the cost of this split\n\t\t\t\t\t\tconst leftBounds = bin.leftCacheBounds;\n\t\t\t\t\t\tconst rightBounds = bin.rightCacheBounds;\n\n\t\t\t\t\t\tlet leftProb = 0;\n\t\t\t\t\t\tif ( leftCount !== 0 ) {\n\n\t\t\t\t\t\t\tleftProb = computeSurfaceArea( leftBounds ) / rootSurfaceArea;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet rightProb = 0;\n\t\t\t\t\t\tif ( rightCount !== 0 ) {\n\n\t\t\t\t\t\t\trightProb = computeSurfaceArea( rightBounds ) / rootSurfaceArea;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst cost = TRAVERSAL_COST + TRIANGLE_INTERSECT_COST * (\n\t\t\t\t\t\t\tleftProb * leftCount + rightProb * rightCount\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif ( cost < bestCost ) {\n\n\t\t\t\t\t\t\taxis = a;\n\t\t\t\t\t\t\tbestCost = cost;\n\t\t\t\t\t\t\tpos = bin.candidate;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// reset the bins\n\t\t\t\t\tfor ( let i = 0; i < BIN_COUNT; i ++ ) {\n\n\t\t\t\t\t\tconst bin = sahBins[ i ];\n\t\t\t\t\t\tbin.count = 0;\n\t\t\t\t\t\tbin.candidate = axisLeft + binWidth + i * binWidth;\n\n\t\t\t\t\t\tconst bounds = bin.bounds;\n\t\t\t\t\t\tfor ( let d = 0; d < 3; d ++ ) {\n\n\t\t\t\t\t\t\tbounds[ d ] = Infinity;\n\t\t\t\t\t\t\tbounds[ d + 3 ] = - Infinity;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// iterate over all center positions\n\t\t\t\t\tfor ( let c = cStart; c < cEnd; c += 6 ) {\n\n\t\t\t\t\t\tconst triCenter = triangleBounds[ c + 2 * a ];\n\t\t\t\t\t\tconst relativeCenter = triCenter - axisLeft;\n\n\t\t\t\t\t\t// in the partition function if the centroid lies on the split plane then it is\n\t\t\t\t\t\t// considered to be on the right side of the split\n\t\t\t\t\t\tlet binIndex = ~ ~ ( relativeCenter / binWidth );\n\t\t\t\t\t\tif ( binIndex >= BIN_COUNT ) binIndex = BIN_COUNT - 1;\n\n\t\t\t\t\t\tconst bin = sahBins[ binIndex ];\n\t\t\t\t\t\tbin.count ++;\n\n\t\t\t\t\t\texpandByTriangleBounds( c, triangleBounds, bin.bounds );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// cache the unioned bounds from right to left so we don't have to regenerate them each time\n\t\t\t\t\tconst lastBin = sahBins[ BIN_COUNT - 1 ];\n\t\t\t\t\tcopyBounds( lastBin.bounds, lastBin.rightCacheBounds );\n\t\t\t\t\tfor ( let i = BIN_COUNT - 2; i >= 0; i -- ) {\n\n\t\t\t\t\t\tconst bin = sahBins[ i ];\n\t\t\t\t\t\tconst nextBin = sahBins[ i + 1 ];\n\t\t\t\t\t\tunionBounds( bin.bounds, nextBin.rightCacheBounds, bin.rightCacheBounds );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlet leftCount = 0;\n\t\t\t\t\tfor ( let i = 0; i < BIN_COUNT - 1; i ++ ) {\n\n\t\t\t\t\t\tconst bin = sahBins[ i ];\n\t\t\t\t\t\tconst binCount = bin.count;\n\t\t\t\t\t\tconst bounds = bin.bounds;\n\n\t\t\t\t\t\tconst nextBin = sahBins[ i + 1 ];\n\t\t\t\t\t\tconst rightBounds = nextBin.rightCacheBounds;\n\n\t\t\t\t\t\t// don't do anything with the bounds if the new bounds have no triangles\n\t\t\t\t\t\tif ( binCount !== 0 ) {\n\n\t\t\t\t\t\t\tif ( leftCount === 0 ) {\n\n\t\t\t\t\t\t\t\tcopyBounds( bounds, leftBounds );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tunionBounds( bounds, leftBounds, leftBounds );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tleftCount += binCount;\n\n\t\t\t\t\t\t// check the cost of this split\n\t\t\t\t\t\tlet leftProb = 0;\n\t\t\t\t\t\tlet rightProb = 0;\n\n\t\t\t\t\t\tif ( leftCount !== 0 ) {\n\n\t\t\t\t\t\t\tleftProb = computeSurfaceArea( leftBounds ) / rootSurfaceArea;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst rightCount = count - leftCount;\n\t\t\t\t\t\tif ( rightCount !== 0 ) {\n\n\t\t\t\t\t\t\trightProb = computeSurfaceArea( rightBounds ) / rootSurfaceArea;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst cost = TRAVERSAL_COST + TRIANGLE_INTERSECT_COST * (\n\t\t\t\t\t\t\tleftProb * leftCount + rightProb * rightCount\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif ( cost < bestCost ) {\n\n\t\t\t\t\t\t\taxis = a;\n\t\t\t\t\t\t\tbestCost = cost;\n\t\t\t\t\t\t\tpos = bin.candidate;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconsole.warn( `MeshBVH: Invalid build strategy value ${ strategy } used.` );\n\n\t\t}\n\n\t\treturn { axis, pos };\n\n\t}\n\n\t// returns the average coordinate on the specified axis of the all the provided triangles\n\tfunction getAverage( triangleBounds, offset, count, axis ) {\n\n\t\tlet avg = 0;\n\t\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\t\tavg += triangleBounds[ i * 6 + axis * 2 ];\n\n\t\t}\n\n\t\treturn avg / count;\n\n\t}\n\n\tclass MeshBVHNode {\n\n\t\tconstructor() {\n\n\t\t\t// internal nodes have boundingData, left, right, and splitAxis\n\t\t\t// leaf nodes have offset and count (referring to primitives in the mesh geometry)\n\n\t\t}\n\n\t}\n\n\t/********************************************************/\n\t/* This file is generated from \"sortUtils.template.js\". */\n\t/********************************************************/\n\t// reorders `tris` such that for `count` elements after `offset`, elements on the left side of the split\n\t// will be on the left and elements on the right side of the split will be on the right. returns the index\n\t// of the first element on the right side, or offset + count if there are no elements on the right side.\n\tfunction partition( indirectBuffer, index, triangleBounds, offset, count, split ) {\n\n\t\tlet left = offset;\n\t\tlet right = offset + count - 1;\n\t\tconst pos = split.pos;\n\t\tconst axisOffset = split.axis * 2;\n\n\t\t// hoare partitioning, see e.g. https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\n\t\twhile ( true ) {\n\n\t\t\twhile ( left <= right && triangleBounds[ left * 6 + axisOffset ] < pos ) {\n\n\t\t\t\tleft ++;\n\n\t\t\t}\n\n\t\t\t// if a triangle center lies on the partition plane it is considered to be on the right side\n\t\t\twhile ( left <= right && triangleBounds[ right * 6 + axisOffset ] >= pos ) {\n\n\t\t\t\tright --;\n\n\t\t\t}\n\n\t\t\tif ( left < right ) {\n\n\t\t\t\t// we need to swap all of the information associated with the triangles at index\n\t\t\t\t// left and right; that's the verts in the geometry index, the bounds,\n\t\t\t\t// and perhaps the SAH planes\n\n\t\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\tlet t0 = index[ left * 3 + i ];\n\t\t\t\t\tindex[ left * 3 + i ] = index[ right * 3 + i ];\n\t\t\t\t\tindex[ right * 3 + i ] = t0;\n\n\t\t\t\t}\n\n\n\t\t\t\t// swap bounds\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tlet tb = triangleBounds[ left * 6 + i ];\n\t\t\t\t\ttriangleBounds[ left * 6 + i ] = triangleBounds[ right * 6 + i ];\n\t\t\t\t\ttriangleBounds[ right * 6 + i ] = tb;\n\n\t\t\t\t}\n\n\t\t\t\tleft ++;\n\t\t\t\tright --;\n\n\t\t\t} else {\n\n\t\t\t\treturn left;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/********************************************************/\n\t/* This file is generated from \"sortUtils.template.js\". */\n\t/********************************************************/\n\t// reorders `tris` such that for `count` elements after `offset`, elements on the left side of the split\n\t// will be on the left and elements on the right side of the split will be on the right. returns the index\n\t// of the first element on the right side, or offset + count if there are no elements on the right side.\n\tfunction partition_indirect( indirectBuffer, index, triangleBounds, offset, count, split ) {\n\n\t\tlet left = offset;\n\t\tlet right = offset + count - 1;\n\t\tconst pos = split.pos;\n\t\tconst axisOffset = split.axis * 2;\n\n\t\t// hoare partitioning, see e.g. https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\n\t\twhile ( true ) {\n\n\t\t\twhile ( left <= right && triangleBounds[ left * 6 + axisOffset ] < pos ) {\n\n\t\t\t\tleft ++;\n\n\t\t\t}\n\n\t\t\t// if a triangle center lies on the partition plane it is considered to be on the right side\n\t\t\twhile ( left <= right && triangleBounds[ right * 6 + axisOffset ] >= pos ) {\n\n\t\t\t\tright --;\n\n\t\t\t}\n\n\t\t\tif ( left < right ) {\n\n\t\t\t\t// we need to swap all of the information associated with the triangles at index\n\t\t\t\t// left and right; that's the verts in the geometry index, the bounds,\n\t\t\t\t// and perhaps the SAH planes\n\t\t\t\tlet t = indirectBuffer[ left ];\n\t\t\t\tindirectBuffer[ left ] = indirectBuffer[ right ];\n\t\t\t\tindirectBuffer[ right ] = t;\n\n\n\t\t\t\t// swap bounds\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tlet tb = triangleBounds[ left * 6 + i ];\n\t\t\t\t\ttriangleBounds[ left * 6 + i ] = triangleBounds[ right * 6 + i ];\n\t\t\t\t\ttriangleBounds[ right * 6 + i ] = tb;\n\n\t\t\t\t}\n\n\t\t\t\tleft ++;\n\t\t\t\tright --;\n\n\t\t\t} else {\n\n\t\t\t\treturn left;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction generateIndirectBuffer( geometry, useSharedArrayBuffer ) {\n\n\t\tconst triCount = ( geometry.index ? geometry.index.count : geometry.attributes.position.count ) / 3;\n\t\tconst useUint32 = triCount > 2 ** 16;\n\t\tconst byteCount = useUint32 ? 4 : 2;\n\n\t\tconst buffer = useSharedArrayBuffer ? new SharedArrayBuffer( triCount * byteCount ) : new ArrayBuffer( triCount * byteCount );\n\t\tconst indirectBuffer = useUint32 ? new Uint32Array( buffer ) : new Uint16Array( buffer );\n\t\tfor ( let i = 0, l = indirectBuffer.length; i < l; i ++ ) {\n\n\t\t\tindirectBuffer[ i ] = i;\n\n\t\t}\n\n\t\treturn indirectBuffer;\n\n\t}\n\n\tfunction buildTree( bvh, options ) {\n\n\t\t// Compute the full bounds of the geometry at the same time as triangle bounds because\n\t\t// we'll need it for the root bounds in the case with no groups and it should be fast here.\n\t\t// We can't use the geometry bounding box if it's available because it may be out of date.\n\t\tconst geometry = bvh.geometry;\n\t\tconst indexArray = geometry.index ? geometry.index.array : null;\n\t\tconst maxDepth = options.maxDepth;\n\t\tconst verbose = options.verbose;\n\t\tconst maxLeafTris = options.maxLeafTris;\n\t\tconst strategy = options.strategy;\n\t\tconst onProgress = options.onProgress;\n\t\tconst totalTriangles = getTriCount( geometry );\n\t\tconst indirectBuffer = bvh._indirectBuffer;\n\t\tlet reachedMaxDepth = false;\n\n\t\tconst fullBounds = new Float32Array( 6 );\n\t\tconst cacheCentroidBoundingData = new Float32Array( 6 );\n\t\tconst triangleBounds = computeTriangleBounds( geometry, fullBounds );\n\t\tconst partionFunc = options.indirect ? partition_indirect : partition;\n\n\t\tconst roots = [];\n\t\tconst ranges = options.indirect ? getFullGeometryRange( geometry ) : getRootIndexRanges( geometry );\n\n\t\tif ( ranges.length === 1 ) {\n\n\t\t\tconst range = ranges[ 0 ];\n\t\t\tconst root = new MeshBVHNode();\n\t\t\troot.boundingData = fullBounds;\n\t\t\tgetCentroidBounds( triangleBounds, range.offset, range.count, cacheCentroidBoundingData );\n\n\t\t\tsplitNode( root, range.offset, range.count, cacheCentroidBoundingData );\n\t\t\troots.push( root );\n\n\t\t} else {\n\n\t\t\tfor ( let range of ranges ) {\n\n\t\t\t\tconst root = new MeshBVHNode();\n\t\t\t\troot.boundingData = new Float32Array( 6 );\n\t\t\t\tgetBounds( triangleBounds, range.offset, range.count, root.boundingData, cacheCentroidBoundingData );\n\n\t\t\t\tsplitNode( root, range.offset, range.count, cacheCentroidBoundingData );\n\t\t\t\troots.push( root );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn roots;\n\n\t\tfunction triggerProgress( trianglesProcessed ) {\n\n\t\t\tif ( onProgress ) {\n\n\t\t\t\tonProgress( trianglesProcessed / totalTriangles );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// either recursively splits the given node, creating left and right subtrees for it, or makes it a leaf node,\n\t\t// recording the offset and count of its triangles and writing them into the reordered geometry index.\n\t\tfunction splitNode( node, offset, count, centroidBoundingData = null, depth = 0 ) {\n\n\t\t\tif ( ! reachedMaxDepth && depth >= maxDepth ) {\n\n\t\t\t\treachedMaxDepth = true;\n\t\t\t\tif ( verbose ) {\n\n\t\t\t\t\tconsole.warn( `MeshBVH: Max depth of ${ maxDepth } reached when generating BVH. Consider increasing maxDepth.` );\n\t\t\t\t\tconsole.warn( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// early out if we've met our capacity\n\t\t\tif ( count <= maxLeafTris || depth >= maxDepth ) {\n\n\t\t\t\ttriggerProgress( offset + count );\n\t\t\t\tnode.offset = offset;\n\t\t\t\tnode.count = count;\n\t\t\t\treturn node;\n\n\t\t\t}\n\n\t\t\t// Find where to split the volume\n\t\t\tconst split = getOptimalSplit( node.boundingData, centroidBoundingData, triangleBounds, offset, count, strategy );\n\t\t\tif ( split.axis === - 1 ) {\n\n\t\t\t\ttriggerProgress( offset + count );\n\t\t\t\tnode.offset = offset;\n\t\t\t\tnode.count = count;\n\t\t\t\treturn node;\n\n\t\t\t}\n\n\t\t\tconst splitOffset = partionFunc( indirectBuffer, indexArray, triangleBounds, offset, count, split );\n\n\t\t\t// create the two new child nodes\n\t\t\tif ( splitOffset === offset || splitOffset === offset + count ) {\n\n\t\t\t\ttriggerProgress( offset + count );\n\t\t\t\tnode.offset = offset;\n\t\t\t\tnode.count = count;\n\n\t\t\t} else {\n\n\t\t\t\tnode.splitAxis = split.axis;\n\n\t\t\t\t// create the left child and compute its bounding box\n\t\t\t\tconst left = new MeshBVHNode();\n\t\t\t\tconst lstart = offset;\n\t\t\t\tconst lcount = splitOffset - offset;\n\t\t\t\tnode.left = left;\n\t\t\t\tleft.boundingData = new Float32Array( 6 );\n\n\t\t\t\tgetBounds( triangleBounds, lstart, lcount, left.boundingData, cacheCentroidBoundingData );\n\t\t\t\tsplitNode( left, lstart, lcount, cacheCentroidBoundingData, depth + 1 );\n\n\t\t\t\t// repeat for right\n\t\t\t\tconst right = new MeshBVHNode();\n\t\t\t\tconst rstart = splitOffset;\n\t\t\t\tconst rcount = count - lcount;\n\t\t\t\tnode.right = right;\n\t\t\t\tright.boundingData = new Float32Array( 6 );\n\n\t\t\t\tgetBounds( triangleBounds, rstart, rcount, right.boundingData, cacheCentroidBoundingData );\n\t\t\t\tsplitNode( right, rstart, rcount, cacheCentroidBoundingData, depth + 1 );\n\n\t\t\t}\n\n\t\t\treturn node;\n\n\t\t}\n\n\t}\n\n\tfunction buildPackedTree( bvh, options ) {\n\n\t\tconst geometry = bvh.geometry;\n\t\tif ( options.indirect ) {\n\n\t\t\tbvh._indirectBuffer = generateIndirectBuffer( geometry, options.useSharedArrayBuffer );\n\n\t\t\tif ( hasGroupGaps( geometry ) && ! options.verbose ) {\n\n\t\t\t\tconsole.warn(\n\t\t\t\t\t'MeshBVH: Provided geometry contains groups that do not fully span the vertex contents while using the \"indirect\" option. ' +\n\t\t\t\t\t'BVH may incorrectly report intersections on unrendered portions of the geometry.'\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( ! bvh._indirectBuffer ) {\n\n\t\t\tensureIndex( geometry, options );\n\n\t\t}\n\n\t\t// boundingData  \t\t\t\t: 6 float32\n\t\t// right / offset \t\t\t\t: 1 uint32\n\t\t// splitAxis / isLeaf + count \t: 1 uint32 / 2 uint16\n\t\tconst roots = buildTree( bvh, options );\n\n\t\tlet float32Array;\n\t\tlet uint32Array;\n\t\tlet uint16Array;\n\t\tconst packedRoots = [];\n\t\tconst BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;\n\t\tfor ( let i = 0; i < roots.length; i ++ ) {\n\n\t\t\tconst root = roots[ i ];\n\t\t\tlet nodeCount = countNodes( root );\n\n\t\t\tconst buffer = new BufferConstructor( BYTES_PER_NODE * nodeCount );\n\t\t\tfloat32Array = new Float32Array( buffer );\n\t\t\tuint32Array = new Uint32Array( buffer );\n\t\t\tuint16Array = new Uint16Array( buffer );\n\t\t\tpopulateBuffer( 0, root );\n\t\t\tpackedRoots.push( buffer );\n\n\t\t}\n\n\t\tbvh._roots = packedRoots;\n\t\treturn;\n\n\t\tfunction countNodes( node ) {\n\n\t\t\tif ( node.count ) {\n\n\t\t\t\treturn 1;\n\n\t\t\t} else {\n\n\t\t\t\treturn 1 + countNodes( node.left ) + countNodes( node.right );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction populateBuffer( byteOffset, node ) {\n\n\t\t\tconst stride4Offset = byteOffset / 4;\n\t\t\tconst stride2Offset = byteOffset / 2;\n\t\t\tconst isLeaf = ! ! node.count;\n\t\t\tconst boundingData = node.boundingData;\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tfloat32Array[ stride4Offset + i ] = boundingData[ i ];\n\n\t\t\t}\n\n\t\t\tif ( isLeaf ) {\n\n\t\t\t\tconst offset = node.offset;\n\t\t\t\tconst count = node.count;\n\t\t\t\tuint32Array[ stride4Offset + 6 ] = offset;\n\t\t\t\tuint16Array[ stride2Offset + 14 ] = count;\n\t\t\t\tuint16Array[ stride2Offset + 15 ] = IS_LEAFNODE_FLAG;\n\t\t\t\treturn byteOffset + BYTES_PER_NODE;\n\n\t\t\t} else {\n\n\t\t\t\tconst left = node.left;\n\t\t\t\tconst right = node.right;\n\t\t\t\tconst splitAxis = node.splitAxis;\n\n\t\t\t\tlet nextUnusedPointer;\n\t\t\t\tnextUnusedPointer = populateBuffer( byteOffset + BYTES_PER_NODE, left );\n\n\t\t\t\tif ( ( nextUnusedPointer / 4 ) > Math.pow( 2, 32 ) ) {\n\n\t\t\t\t\tthrow new Error( 'MeshBVH: Cannot store child pointer greater than 32 bits.' );\n\n\t\t\t\t}\n\n\t\t\t\tuint32Array[ stride4Offset + 6 ] = nextUnusedPointer / 4;\n\t\t\t\tnextUnusedPointer = populateBuffer( nextUnusedPointer, right );\n\n\t\t\t\tuint32Array[ stride4Offset + 7 ] = splitAxis;\n\t\t\t\treturn nextUnusedPointer;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tclass SeparatingAxisBounds {\n\n\t\tconstructor() {\n\n\t\t\tthis.min = Infinity;\n\t\t\tthis.max = - Infinity;\n\n\t\t}\n\n\t\tsetFromPointsField( points, field ) {\n\n\t\t\tlet min = Infinity;\n\t\t\tlet max = - Infinity;\n\t\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tconst p = points[ i ];\n\t\t\t\tconst val = p[ field ];\n\t\t\t\tmin = val < min ? val : min;\n\t\t\t\tmax = val > max ? val : max;\n\n\t\t\t}\n\n\t\t\tthis.min = min;\n\t\t\tthis.max = max;\n\n\t\t}\n\n\t\tsetFromPoints( axis, points ) {\n\n\t\t\tlet min = Infinity;\n\t\t\tlet max = - Infinity;\n\t\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tconst p = points[ i ];\n\t\t\t\tconst val = axis.dot( p );\n\t\t\t\tmin = val < min ? val : min;\n\t\t\t\tmax = val > max ? val : max;\n\n\t\t\t}\n\n\t\t\tthis.min = min;\n\t\t\tthis.max = max;\n\n\t\t}\n\n\t\tisSeparated( other ) {\n\n\t\t\treturn this.min > other.max || other.min > this.max;\n\n\t\t}\n\n\t}\n\n\tSeparatingAxisBounds.prototype.setFromBox = ( function () {\n\n\t\tconst p = new three.Vector3();\n\t\treturn function setFromBox( axis, box ) {\n\n\t\t\tconst boxMin = box.min;\n\t\t\tconst boxMax = box.max;\n\t\t\tlet min = Infinity;\n\t\t\tlet max = - Infinity;\n\t\t\tfor ( let x = 0; x <= 1; x ++ ) {\n\n\t\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\n\n\t\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\n\n\t\t\t\t\t\tp.x = boxMin.x * x + boxMax.x * ( 1 - x );\n\t\t\t\t\t\tp.y = boxMin.y * y + boxMax.y * ( 1 - y );\n\t\t\t\t\t\tp.z = boxMin.z * z + boxMax.z * ( 1 - z );\n\n\t\t\t\t\t\tconst val = axis.dot( p );\n\t\t\t\t\t\tmin = Math.min( val, min );\n\t\t\t\t\t\tmax = Math.max( val, max );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.min = min;\n\t\t\tthis.max = max;\n\n\t\t};\n\n\t} )();\n\n\tconst areIntersecting = ( function () {\n\n\t\tconst cacheSatBounds = new SeparatingAxisBounds();\n\t\treturn function areIntersecting( shape1, shape2 ) {\n\n\t\t\tconst points1 = shape1.points;\n\t\t\tconst satAxes1 = shape1.satAxes;\n\t\t\tconst satBounds1 = shape1.satBounds;\n\n\t\t\tconst points2 = shape2.points;\n\t\t\tconst satAxes2 = shape2.satAxes;\n\t\t\tconst satBounds2 = shape2.satBounds;\n\n\t\t\t// check axes of the first shape\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\tconst sb = satBounds1[ i ];\n\t\t\t\tconst sa = satAxes1[ i ];\n\t\t\t\tcacheSatBounds.setFromPoints( sa, points2 );\n\t\t\t\tif ( sb.isSeparated( cacheSatBounds ) ) return false;\n\n\t\t\t}\n\n\t\t\t// check axes of the second shape\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\tconst sb = satBounds2[ i ];\n\t\t\t\tconst sa = satAxes2[ i ];\n\t\t\t\tcacheSatBounds.setFromPoints( sa, points1 );\n\t\t\t\tif ( sb.isSeparated( cacheSatBounds ) ) return false;\n\n\t\t\t}\n\n\t\t};\n\n\t} )();\n\n\tconst closestPointLineToLine = ( function () {\n\n\t\t// https://github.com/juj/MathGeoLib/blob/master/src/Geometry/Line.cpp#L56\n\t\tconst dir1 = new three.Vector3();\n\t\tconst dir2 = new three.Vector3();\n\t\tconst v02 = new three.Vector3();\n\t\treturn function closestPointLineToLine( l1, l2, result ) {\n\n\t\t\tconst v0 = l1.start;\n\t\t\tconst v10 = dir1;\n\t\t\tconst v2 = l2.start;\n\t\t\tconst v32 = dir2;\n\n\t\t\tv02.subVectors( v0, v2 );\n\t\t\tdir1.subVectors( l1.end, l1.start );\n\t\t\tdir2.subVectors( l2.end, l2.start );\n\n\t\t\t// float d0232 = v02.Dot(v32);\n\t\t\tconst d0232 = v02.dot( v32 );\n\n\t\t\t// float d3210 = v32.Dot(v10);\n\t\t\tconst d3210 = v32.dot( v10 );\n\n\t\t\t// float d3232 = v32.Dot(v32);\n\t\t\tconst d3232 = v32.dot( v32 );\n\n\t\t\t// float d0210 = v02.Dot(v10);\n\t\t\tconst d0210 = v02.dot( v10 );\n\n\t\t\t// float d1010 = v10.Dot(v10);\n\t\t\tconst d1010 = v10.dot( v10 );\n\n\t\t\t// float denom = d1010*d3232 - d3210*d3210;\n\t\t\tconst denom = d1010 * d3232 - d3210 * d3210;\n\n\t\t\tlet d, d2;\n\t\t\tif ( denom !== 0 ) {\n\n\t\t\t\td = ( d0232 * d3210 - d0210 * d3232 ) / denom;\n\n\t\t\t} else {\n\n\t\t\t\td = 0;\n\n\t\t\t}\n\n\t\t\td2 = ( d0232 + d * d3210 ) / d3232;\n\n\t\t\tresult.x = d;\n\t\t\tresult.y = d2;\n\n\t\t};\n\n\t} )();\n\n\tconst closestPointsSegmentToSegment = ( function () {\n\n\t\t// https://github.com/juj/MathGeoLib/blob/master/src/Geometry/LineSegment.cpp#L187\n\t\tconst paramResult = new three.Vector2();\n\t\tconst temp1 = new three.Vector3();\n\t\tconst temp2 = new three.Vector3();\n\t\treturn function closestPointsSegmentToSegment( l1, l2, target1, target2 ) {\n\n\t\t\tclosestPointLineToLine( l1, l2, paramResult );\n\n\t\t\tlet d = paramResult.x;\n\t\t\tlet d2 = paramResult.y;\n\t\t\tif ( d >= 0 && d <= 1 && d2 >= 0 && d2 <= 1 ) {\n\n\t\t\t\tl1.at( d, target1 );\n\t\t\t\tl2.at( d2, target2 );\n\n\t\t\t\treturn;\n\n\t\t\t} else if ( d >= 0 && d <= 1 ) {\n\n\t\t\t\t// Only d2 is out of bounds.\n\t\t\t\tif ( d2 < 0 ) {\n\n\t\t\t\t\tl2.at( 0, target2 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tl2.at( 1, target2 );\n\n\t\t\t\t}\n\n\t\t\t\tl1.closestPointToPoint( target2, true, target1 );\n\t\t\t\treturn;\n\n\t\t\t} else if ( d2 >= 0 && d2 <= 1 ) {\n\n\t\t\t\t// Only d is out of bounds.\n\t\t\t\tif ( d < 0 ) {\n\n\t\t\t\t\tl1.at( 0, target1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tl1.at( 1, target1 );\n\n\t\t\t\t}\n\n\t\t\t\tl2.closestPointToPoint( target1, true, target2 );\n\t\t\t\treturn;\n\n\t\t\t} else {\n\n\t\t\t\t// Both u and u2 are out of bounds.\n\t\t\t\tlet p;\n\t\t\t\tif ( d < 0 ) {\n\n\t\t\t\t\tp = l1.start;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tp = l1.end;\n\n\t\t\t\t}\n\n\t\t\t\tlet p2;\n\t\t\t\tif ( d2 < 0 ) {\n\n\t\t\t\t\tp2 = l2.start;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tp2 = l2.end;\n\n\t\t\t\t}\n\n\t\t\t\tconst closestPoint = temp1;\n\t\t\t\tconst closestPoint2 = temp2;\n\t\t\t\tl1.closestPointToPoint( p2, true, temp1 );\n\t\t\t\tl2.closestPointToPoint( p, true, temp2 );\n\n\t\t\t\tif ( closestPoint.distanceToSquared( p2 ) <= closestPoint2.distanceToSquared( p ) ) {\n\n\t\t\t\t\ttarget1.copy( closestPoint );\n\t\t\t\t\ttarget2.copy( p2 );\n\t\t\t\t\treturn;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttarget1.copy( p );\n\t\t\t\t\ttarget2.copy( closestPoint2 );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t} )();\n\n\n\tconst sphereIntersectTriangle = ( function () {\n\n\t\t// https://stackoverflow.com/questions/34043955/detect-collision-between-sphere-and-triangle-in-three-js\n\t\tconst closestPointTemp = new three.Vector3();\n\t\tconst projectedPointTemp = new three.Vector3();\n\t\tconst planeTemp = new three.Plane();\n\t\tconst lineTemp = new three.Line3();\n\t\treturn function sphereIntersectTriangle( sphere, triangle ) {\n\n\t\t\tconst { radius, center } = sphere;\n\t\t\tconst { a, b, c } = triangle;\n\n\t\t\t// phase 1\n\t\t\tlineTemp.start = a;\n\t\t\tlineTemp.end = b;\n\t\t\tconst closestPoint1 = lineTemp.closestPointToPoint( center, true, closestPointTemp );\n\t\t\tif ( closestPoint1.distanceTo( center ) <= radius ) return true;\n\n\t\t\tlineTemp.start = a;\n\t\t\tlineTemp.end = c;\n\t\t\tconst closestPoint2 = lineTemp.closestPointToPoint( center, true, closestPointTemp );\n\t\t\tif ( closestPoint2.distanceTo( center ) <= radius ) return true;\n\n\t\t\tlineTemp.start = b;\n\t\t\tlineTemp.end = c;\n\t\t\tconst closestPoint3 = lineTemp.closestPointToPoint( center, true, closestPointTemp );\n\t\t\tif ( closestPoint3.distanceTo( center ) <= radius ) return true;\n\n\t\t\t// phase 2\n\t\t\tconst plane = triangle.getPlane( planeTemp );\n\t\t\tconst dp = Math.abs( plane.distanceToPoint( center ) );\n\t\t\tif ( dp <= radius ) {\n\n\t\t\t\tconst pp = plane.projectPoint( center, projectedPointTemp );\n\t\t\t\tconst cp = triangle.containsPoint( pp );\n\t\t\t\tif ( cp ) return true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t};\n\n\t} )();\n\n\tconst ZERO_EPSILON = 1e-15;\n\tfunction isNearZero( value ) {\n\n\t\treturn Math.abs( value ) < ZERO_EPSILON;\n\n\t}\n\n\tclass ExtendedTriangle extends three.Triangle {\n\n\t\tconstructor( ...args ) {\n\n\t\t\tsuper( ...args );\n\n\t\t\tthis.isExtendedTriangle = true;\n\t\t\tthis.satAxes = new Array( 4 ).fill().map( () => new three.Vector3() );\n\t\t\tthis.satBounds = new Array( 4 ).fill().map( () => new SeparatingAxisBounds() );\n\t\t\tthis.points = [ this.a, this.b, this.c ];\n\t\t\tthis.sphere = new three.Sphere();\n\t\t\tthis.plane = new three.Plane();\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t\tintersectsSphere( sphere ) {\n\n\t\t\treturn sphereIntersectTriangle( sphere, this );\n\n\t\t}\n\n\t\tupdate() {\n\n\t\t\tconst a = this.a;\n\t\t\tconst b = this.b;\n\t\t\tconst c = this.c;\n\t\t\tconst points = this.points;\n\n\t\t\tconst satAxes = this.satAxes;\n\t\t\tconst satBounds = this.satBounds;\n\n\t\t\tconst axis0 = satAxes[ 0 ];\n\t\t\tconst sab0 = satBounds[ 0 ];\n\t\t\tthis.getNormal( axis0 );\n\t\t\tsab0.setFromPoints( axis0, points );\n\n\t\t\tconst axis1 = satAxes[ 1 ];\n\t\t\tconst sab1 = satBounds[ 1 ];\n\t\t\taxis1.subVectors( a, b );\n\t\t\tsab1.setFromPoints( axis1, points );\n\n\t\t\tconst axis2 = satAxes[ 2 ];\n\t\t\tconst sab2 = satBounds[ 2 ];\n\t\t\taxis2.subVectors( b, c );\n\t\t\tsab2.setFromPoints( axis2, points );\n\n\t\t\tconst axis3 = satAxes[ 3 ];\n\t\t\tconst sab3 = satBounds[ 3 ];\n\t\t\taxis3.subVectors( c, a );\n\t\t\tsab3.setFromPoints( axis3, points );\n\n\t\t\tthis.sphere.setFromPoints( this.points );\n\t\t\tthis.plane.setFromNormalAndCoplanarPoint( axis0, a );\n\t\t\tthis.needsUpdate = false;\n\n\t\t}\n\n\t}\n\n\tExtendedTriangle.prototype.closestPointToSegment = ( function () {\n\n\t\tconst point1 = new three.Vector3();\n\t\tconst point2 = new three.Vector3();\n\t\tconst edge = new three.Line3();\n\n\t\treturn function distanceToSegment( segment, target1 = null, target2 = null ) {\n\n\t\t\tconst { start, end } = segment;\n\t\t\tconst points = this.points;\n\t\t\tlet distSq;\n\t\t\tlet closestDistanceSq = Infinity;\n\n\t\t\t// check the triangle edges\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\tconst nexti = ( i + 1 ) % 3;\n\t\t\t\tedge.start.copy( points[ i ] );\n\t\t\t\tedge.end.copy( points[ nexti ] );\n\n\t\t\t\tclosestPointsSegmentToSegment( edge, segment, point1, point2 );\n\n\t\t\t\tdistSq = point1.distanceToSquared( point2 );\n\t\t\t\tif ( distSq < closestDistanceSq ) {\n\n\t\t\t\t\tclosestDistanceSq = distSq;\n\t\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// check end points\n\t\t\tthis.closestPointToPoint( start, point1 );\n\t\t\tdistSq = start.distanceToSquared( point1 );\n\t\t\tif ( distSq < closestDistanceSq ) {\n\n\t\t\t\tclosestDistanceSq = distSq;\n\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\tif ( target2 ) target2.copy( start );\n\n\t\t\t}\n\n\t\t\tthis.closestPointToPoint( end, point1 );\n\t\t\tdistSq = end.distanceToSquared( point1 );\n\t\t\tif ( distSq < closestDistanceSq ) {\n\n\t\t\t\tclosestDistanceSq = distSq;\n\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\tif ( target2 ) target2.copy( end );\n\n\t\t\t}\n\n\t\t\treturn Math.sqrt( closestDistanceSq );\n\n\t\t};\n\n\t} )();\n\n\tExtendedTriangle.prototype.intersectsTriangle = ( function () {\n\n\t\tconst saTri2 = new ExtendedTriangle();\n\t\tconst arr1 = new Array( 3 );\n\t\tconst arr2 = new Array( 3 );\n\t\tconst cachedSatBounds = new SeparatingAxisBounds();\n\t\tconst cachedSatBounds2 = new SeparatingAxisBounds();\n\t\tconst cachedAxis = new three.Vector3();\n\t\tconst dir = new three.Vector3();\n\t\tconst dir1 = new three.Vector3();\n\t\tconst dir2 = new three.Vector3();\n\t\tconst tempDir = new three.Vector3();\n\t\tconst edge = new three.Line3();\n\t\tconst edge1 = new three.Line3();\n\t\tconst edge2 = new three.Line3();\n\t\tconst tempPoint = new three.Vector3();\n\n\t\tfunction triIntersectPlane( tri, plane, targetEdge ) {\n\n\t\t\t// find the edge that intersects the other triangle plane\n\t\t\tconst points = tri.points;\n\t\t\tlet count = 0;\n\t\t\tlet startPointIntersection = - 1;\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\tconst { start, end } = edge;\n\t\t\t\tstart.copy( points[ i ] );\n\t\t\t\tend.copy( points[ ( i + 1 ) % 3 ] );\n\t\t\t\tedge.delta( dir );\n\n\t\t\t\tconst startIntersects = isNearZero( plane.distanceToPoint( start ) );\n\t\t\t\tif ( isNearZero( plane.normal.dot( dir ) ) && startIntersects ) {\n\n\t\t\t\t\t// if the edge lies on the plane then take the line\n\t\t\t\t\ttargetEdge.copy( edge );\n\t\t\t\t\tcount = 2;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\t// check if the start point is near the plane because \"intersectLine\" is not robust to that case\n\t\t\t\tconst doesIntersect = plane.intersectLine( edge, tempPoint );\n\t\t\t\tif ( ! doesIntersect && startIntersects ) {\n\n\t\t\t\t\ttempPoint.copy( start );\n\n\t\t\t\t}\n\n\t\t\t\t// ignore the end point\n\t\t\t\tif ( ( doesIntersect || startIntersects ) && ! isNearZero( tempPoint.distanceTo( end ) ) ) {\n\n\t\t\t\t\tif ( count <= 1 ) {\n\n\t\t\t\t\t\t// assign to the start or end point and save which index was snapped to\n\t\t\t\t\t\t// the start point if necessary\n\t\t\t\t\t\tconst point = count === 1 ? targetEdge.start : targetEdge.end;\n\t\t\t\t\t\tpoint.copy( tempPoint );\n\t\t\t\t\t\tif ( startIntersects ) {\n\n\t\t\t\t\t\t\tstartPointIntersection = count;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( count >= 2 ) {\n\n\t\t\t\t\t\t// if we're here that means that there must have been one point that had\n\t\t\t\t\t\t// snapped to the start point so replace it here\n\t\t\t\t\t\tconst point = startPointIntersection === 1 ? targetEdge.start : targetEdge.end;\n\t\t\t\t\t\tpoint.copy( tempPoint );\n\t\t\t\t\t\tcount = 2;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcount ++;\n\t\t\t\t\tif ( count === 2 && startPointIntersection === - 1 ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn count;\n\n\t\t}\n\n\t\t// TODO: If the triangles are coplanar and intersecting the target is nonsensical. It should at least\n\t\t// be a line contained by both triangles if not a different special case somehow represented in the return result.\n\t\treturn function intersectsTriangle( other, target = null, suppressLog = false ) {\n\n\t\t\tif ( this.needsUpdate ) {\n\n\t\t\t\tthis.update();\n\n\t\t\t}\n\n\t\t\tif ( ! other.isExtendedTriangle ) {\n\n\t\t\t\tsaTri2.copy( other );\n\t\t\t\tsaTri2.update();\n\t\t\t\tother = saTri2;\n\n\t\t\t} else if ( other.needsUpdate ) {\n\n\t\t\t\tother.update();\n\n\t\t\t}\n\n\t\t\tconst plane1 = this.plane;\n\t\t\tconst plane2 = other.plane;\n\n\t\t\tif ( Math.abs( plane1.normal.dot( plane2.normal ) ) > 1.0 - 1e-10 ) {\n\n\t\t\t\t// perform separating axis intersection test only for coplanar triangles\n\t\t\t\tconst satBounds1 = this.satBounds;\n\t\t\t\tconst satAxes1 = this.satAxes;\n\t\t\t\tarr2[ 0 ] = other.a;\n\t\t\t\tarr2[ 1 ] = other.b;\n\t\t\t\tarr2[ 2 ] = other.c;\n\t\t\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\tconst sb = satBounds1[ i ];\n\t\t\t\t\tconst sa = satAxes1[ i ];\n\t\t\t\t\tcachedSatBounds.setFromPoints( sa, arr2 );\n\t\t\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\n\n\t\t\t\t}\n\n\t\t\t\tconst satBounds2 = other.satBounds;\n\t\t\t\tconst satAxes2 = other.satAxes;\n\t\t\t\tarr1[ 0 ] = this.a;\n\t\t\t\tarr1[ 1 ] = this.b;\n\t\t\t\tarr1[ 2 ] = this.c;\n\t\t\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\tconst sb = satBounds2[ i ];\n\t\t\t\t\tconst sa = satAxes2[ i ];\n\t\t\t\t\tcachedSatBounds.setFromPoints( sa, arr1 );\n\t\t\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\n\n\t\t\t\t}\n\n\t\t\t\t// check crossed axes\n\t\t\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\t\t\tconst sa1 = satAxes1[ i ];\n\t\t\t\t\tfor ( let i2 = 0; i2 < 4; i2 ++ ) {\n\n\t\t\t\t\t\tconst sa2 = satAxes2[ i2 ];\n\t\t\t\t\t\tcachedAxis.crossVectors( sa1, sa2 );\n\t\t\t\t\t\tcachedSatBounds.setFromPoints( cachedAxis, arr1 );\n\t\t\t\t\t\tcachedSatBounds2.setFromPoints( cachedAxis, arr2 );\n\t\t\t\t\t\tif ( cachedSatBounds.isSeparated( cachedSatBounds2 ) ) return false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( target ) {\n\n\t\t\t\t\t// TODO find two points that intersect on the edges and make that the result\n\t\t\t\t\tif ( ! suppressLog ) {\n\n\t\t\t\t\t\tconsole.warn( 'ExtendedTriangle.intersectsTriangle: Triangles are coplanar which does not support an output edge. Setting edge to 0, 0, 0.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttarget.start.set( 0, 0, 0 );\n\t\t\t\t\ttarget.end.set( 0, 0, 0 );\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t} else {\n\n\t\t\t\t// find the edge that intersects the other triangle plane\n\t\t\t\tconst count1 = triIntersectPlane( this, plane2, edge1 );\n\t\t\t\tif ( count1 === 1 && other.containsPoint( edge1.end ) ) {\n\n\t\t\t\t\tif ( target ) {\n\n\t\t\t\t\t\ttarget.start.copy( edge1.end );\n\t\t\t\t\t\ttarget.end.copy( edge1.end );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t} else if ( count1 !== 2 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t\t// find the other triangles edge that intersects this plane\n\t\t\t\tconst count2 = triIntersectPlane( other, plane1, edge2 );\n\t\t\t\tif ( count2 === 1 && this.containsPoint( edge2.end ) ) {\n\n\t\t\t\t\tif ( target ) {\n\n\t\t\t\t\t\ttarget.start.copy( edge2.end );\n\t\t\t\t\t\ttarget.end.copy( edge2.end );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t} else if ( count2 !== 2 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t\t// find swap the second edge so both lines are running the same direction\n\t\t\t\tedge1.delta( dir1 );\n\t\t\t\tedge2.delta( dir2 );\n\n\t\t\t\tif ( dir1.dot( dir2 ) < 0 ) {\n\n\t\t\t\t\tlet tmp = edge2.start;\n\t\t\t\t\tedge2.start = edge2.end;\n\t\t\t\t\tedge2.end = tmp;\n\n\t\t\t\t}\n\n\t\t\t\t// check if the edges are overlapping\n\t\t\t\tconst s1 = edge1.start.dot( dir1 );\n\t\t\t\tconst e1 = edge1.end.dot( dir1 );\n\t\t\t\tconst s2 = edge2.start.dot( dir1 );\n\t\t\t\tconst e2 = edge2.end.dot( dir1 );\n\t\t\t\tconst separated1 = e1 < s2;\n\t\t\t\tconst separated2 = s1 < e2;\n\n\t\t\t\tif ( s1 !== e2 && s2 !== e1 && separated1 === separated2 ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t\t// assign the target output\n\t\t\t\tif ( target ) {\n\n\t\t\t\t\ttempDir.subVectors( edge1.start, edge2.start );\n\t\t\t\t\tif ( tempDir.dot( dir1 ) > 0 ) {\n\n\t\t\t\t\t\ttarget.start.copy( edge1.start );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttarget.start.copy( edge2.start );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttempDir.subVectors( edge1.end, edge2.end );\n\t\t\t\t\tif ( tempDir.dot( dir1 ) < 0 ) {\n\n\t\t\t\t\t\ttarget.end.copy( edge1.end );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttarget.end.copy( edge2.end );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t};\n\n\t} )();\n\n\n\tExtendedTriangle.prototype.distanceToPoint = ( function () {\n\n\t\tconst target = new three.Vector3();\n\t\treturn function distanceToPoint( point ) {\n\n\t\t\tthis.closestPointToPoint( point, target );\n\t\t\treturn point.distanceTo( target );\n\n\t\t};\n\n\t} )();\n\n\n\tExtendedTriangle.prototype.distanceToTriangle = ( function () {\n\n\t\tconst point = new three.Vector3();\n\t\tconst point2 = new three.Vector3();\n\t\tconst cornerFields = [ 'a', 'b', 'c' ];\n\t\tconst line1 = new three.Line3();\n\t\tconst line2 = new three.Line3();\n\n\t\treturn function distanceToTriangle( other, target1 = null, target2 = null ) {\n\n\t\t\tconst lineTarget = target1 || target2 ? line1 : null;\n\t\t\tif ( this.intersectsTriangle( other, lineTarget ) ) {\n\n\t\t\t\tif ( target1 || target2 ) {\n\n\t\t\t\t\tif ( target1 ) lineTarget.getCenter( target1 );\n\t\t\t\t\tif ( target2 ) lineTarget.getCenter( target2 );\n\n\t\t\t\t}\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\tlet closestDistanceSq = Infinity;\n\n\t\t\t// check all point distances\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\tlet dist;\n\t\t\t\tconst field = cornerFields[ i ];\n\t\t\t\tconst otherVec = other[ field ];\n\t\t\t\tthis.closestPointToPoint( otherVec, point );\n\n\t\t\t\tdist = otherVec.distanceToSquared( point );\n\n\t\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\t\tif ( target1 ) target1.copy( point );\n\t\t\t\t\tif ( target2 ) target2.copy( otherVec );\n\n\t\t\t\t}\n\n\n\t\t\t\tconst thisVec = this[ field ];\n\t\t\t\tother.closestPointToPoint( thisVec, point );\n\n\t\t\t\tdist = thisVec.distanceToSquared( point );\n\n\t\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\t\tif ( target1 ) target1.copy( thisVec );\n\t\t\t\t\tif ( target2 ) target2.copy( point );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\tconst f11 = cornerFields[ i ];\n\t\t\t\tconst f12 = cornerFields[ ( i + 1 ) % 3 ];\n\t\t\t\tline1.set( this[ f11 ], this[ f12 ] );\n\t\t\t\tfor ( let i2 = 0; i2 < 3; i2 ++ ) {\n\n\t\t\t\t\tconst f21 = cornerFields[ i2 ];\n\t\t\t\t\tconst f22 = cornerFields[ ( i2 + 1 ) % 3 ];\n\t\t\t\t\tline2.set( other[ f21 ], other[ f22 ] );\n\n\t\t\t\t\tclosestPointsSegmentToSegment( line1, line2, point, point2 );\n\n\t\t\t\t\tconst dist = point.distanceToSquared( point2 );\n\t\t\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\t\t\tif ( target1 ) target1.copy( point );\n\t\t\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn Math.sqrt( closestDistanceSq );\n\n\t\t};\n\n\t} )();\n\n\tclass OrientedBox {\n\n\t\tconstructor( min, max, matrix ) {\n\n\t\t\tthis.isOrientedBox = true;\n\t\t\tthis.min = new three.Vector3();\n\t\t\tthis.max = new three.Vector3();\n\t\t\tthis.matrix = new three.Matrix4();\n\t\t\tthis.invMatrix = new three.Matrix4();\n\t\t\tthis.points = new Array( 8 ).fill().map( () => new three.Vector3() );\n\t\t\tthis.satAxes = new Array( 3 ).fill().map( () => new three.Vector3() );\n\t\t\tthis.satBounds = new Array( 3 ).fill().map( () => new SeparatingAxisBounds() );\n\t\t\tthis.alignedSatBounds = new Array( 3 ).fill().map( () => new SeparatingAxisBounds() );\n\t\t\tthis.needsUpdate = false;\n\n\t\t\tif ( min ) this.min.copy( min );\n\t\t\tif ( max ) this.max.copy( max );\n\t\t\tif ( matrix ) this.matrix.copy( matrix );\n\n\t\t}\n\n\t\tset( min, max, matrix ) {\n\n\t\t\tthis.min.copy( min );\n\t\t\tthis.max.copy( max );\n\t\t\tthis.matrix.copy( matrix );\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t\tcopy( other ) {\n\n\t\t\tthis.min.copy( other.min );\n\t\t\tthis.max.copy( other.max );\n\t\t\tthis.matrix.copy( other.matrix );\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\tOrientedBox.prototype.update = ( function () {\n\n\t\treturn function update() {\n\n\t\t\tconst matrix = this.matrix;\n\t\t\tconst min = this.min;\n\t\t\tconst max = this.max;\n\n\t\t\tconst points = this.points;\n\t\t\tfor ( let x = 0; x <= 1; x ++ ) {\n\n\t\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\n\n\t\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\n\n\t\t\t\t\t\tconst i = ( ( 1 << 0 ) * x ) | ( ( 1 << 1 ) * y ) | ( ( 1 << 2 ) * z );\n\t\t\t\t\t\tconst v = points[ i ];\n\t\t\t\t\t\tv.x = x ? max.x : min.x;\n\t\t\t\t\t\tv.y = y ? max.y : min.y;\n\t\t\t\t\t\tv.z = z ? max.z : min.z;\n\n\t\t\t\t\t\tv.applyMatrix4( matrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst satBounds = this.satBounds;\n\t\t\tconst satAxes = this.satAxes;\n\t\t\tconst minVec = points[ 0 ];\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\tconst axis = satAxes[ i ];\n\t\t\t\tconst sb = satBounds[ i ];\n\t\t\t\tconst index = 1 << i;\n\t\t\t\tconst pi = points[ index ];\n\n\t\t\t\taxis.subVectors( minVec, pi );\n\t\t\t\tsb.setFromPoints( axis, points );\n\n\t\t\t}\n\n\t\t\tconst alignedSatBounds = this.alignedSatBounds;\n\t\t\talignedSatBounds[ 0 ].setFromPointsField( points, 'x' );\n\t\t\talignedSatBounds[ 1 ].setFromPointsField( points, 'y' );\n\t\t\talignedSatBounds[ 2 ].setFromPointsField( points, 'z' );\n\n\t\t\tthis.invMatrix.copy( this.matrix ).invert();\n\t\t\tthis.needsUpdate = false;\n\n\t\t};\n\n\t} )();\n\n\tOrientedBox.prototype.intersectsBox = ( function () {\n\n\t\tconst aabbBounds = new SeparatingAxisBounds();\n\t\treturn function intersectsBox( box ) {\n\n\t\t\t// TODO: should this be doing SAT against the AABB?\n\t\t\tif ( this.needsUpdate ) {\n\n\t\t\t\tthis.update();\n\n\t\t\t}\n\n\t\t\tconst min = box.min;\n\t\t\tconst max = box.max;\n\t\t\tconst satBounds = this.satBounds;\n\t\t\tconst satAxes = this.satAxes;\n\t\t\tconst alignedSatBounds = this.alignedSatBounds;\n\n\t\t\taabbBounds.min = min.x;\n\t\t\taabbBounds.max = max.x;\n\t\t\tif ( alignedSatBounds[ 0 ].isSeparated( aabbBounds ) ) return false;\n\n\t\t\taabbBounds.min = min.y;\n\t\t\taabbBounds.max = max.y;\n\t\t\tif ( alignedSatBounds[ 1 ].isSeparated( aabbBounds ) ) return false;\n\n\t\t\taabbBounds.min = min.z;\n\t\t\taabbBounds.max = max.z;\n\t\t\tif ( alignedSatBounds[ 2 ].isSeparated( aabbBounds ) ) return false;\n\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\tconst axis = satAxes[ i ];\n\t\t\t\tconst sb = satBounds[ i ];\n\t\t\t\taabbBounds.setFromBox( axis, box );\n\t\t\t\tif ( sb.isSeparated( aabbBounds ) ) return false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t};\n\n\t} )();\n\n\tOrientedBox.prototype.intersectsTriangle = ( function () {\n\n\t\tconst saTri = new ExtendedTriangle();\n\t\tconst pointsArr = new Array( 3 );\n\t\tconst cachedSatBounds = new SeparatingAxisBounds();\n\t\tconst cachedSatBounds2 = new SeparatingAxisBounds();\n\t\tconst cachedAxis = new three.Vector3();\n\t\treturn function intersectsTriangle( triangle ) {\n\n\t\t\tif ( this.needsUpdate ) {\n\n\t\t\t\tthis.update();\n\n\t\t\t}\n\n\t\t\tif ( ! triangle.isExtendedTriangle ) {\n\n\t\t\t\tsaTri.copy( triangle );\n\t\t\t\tsaTri.update();\n\t\t\t\ttriangle = saTri;\n\n\t\t\t} else if ( triangle.needsUpdate ) {\n\n\t\t\t\ttriangle.update();\n\n\t\t\t}\n\n\t\t\tconst satBounds = this.satBounds;\n\t\t\tconst satAxes = this.satAxes;\n\n\t\t\tpointsArr[ 0 ] = triangle.a;\n\t\t\tpointsArr[ 1 ] = triangle.b;\n\t\t\tpointsArr[ 2 ] = triangle.c;\n\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\tconst sb = satBounds[ i ];\n\t\t\t\tconst sa = satAxes[ i ];\n\t\t\t\tcachedSatBounds.setFromPoints( sa, pointsArr );\n\t\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\n\n\t\t\t}\n\n\t\t\tconst triSatBounds = triangle.satBounds;\n\t\t\tconst triSatAxes = triangle.satAxes;\n\t\t\tconst points = this.points;\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\tconst sb = triSatBounds[ i ];\n\t\t\t\tconst sa = triSatAxes[ i ];\n\t\t\t\tcachedSatBounds.setFromPoints( sa, points );\n\t\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\n\n\t\t\t}\n\n\t\t\t// check crossed axes\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\tconst sa1 = satAxes[ i ];\n\t\t\t\tfor ( let i2 = 0; i2 < 4; i2 ++ ) {\n\n\t\t\t\t\tconst sa2 = triSatAxes[ i2 ];\n\t\t\t\t\tcachedAxis.crossVectors( sa1, sa2 );\n\t\t\t\t\tcachedSatBounds.setFromPoints( cachedAxis, pointsArr );\n\t\t\t\t\tcachedSatBounds2.setFromPoints( cachedAxis, points );\n\t\t\t\t\tif ( cachedSatBounds.isSeparated( cachedSatBounds2 ) ) return false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t};\n\n\t} )();\n\n\tOrientedBox.prototype.closestPointToPoint = ( function () {\n\n\t\treturn function closestPointToPoint( point, target1 ) {\n\n\t\t\tif ( this.needsUpdate ) {\n\n\t\t\t\tthis.update();\n\n\t\t\t}\n\n\t\t\ttarget1\n\t\t\t\t.copy( point )\n\t\t\t\t.applyMatrix4( this.invMatrix )\n\t\t\t\t.clamp( this.min, this.max )\n\t\t\t\t.applyMatrix4( this.matrix );\n\n\t\t\treturn target1;\n\n\t\t};\n\n\t} )();\n\n\tOrientedBox.prototype.distanceToPoint = ( function () {\n\n\t\tconst target = new three.Vector3();\n\t\treturn function distanceToPoint( point ) {\n\n\t\t\tthis.closestPointToPoint( point, target );\n\t\t\treturn point.distanceTo( target );\n\n\t\t};\n\n\t} )();\n\n\tOrientedBox.prototype.distanceToBox = ( function () {\n\n\t\tconst xyzFields = [ 'x', 'y', 'z' ];\n\t\tconst segments1 = new Array( 12 ).fill().map( () => new three.Line3() );\n\t\tconst segments2 = new Array( 12 ).fill().map( () => new three.Line3() );\n\n\t\tconst point1 = new three.Vector3();\n\t\tconst point2 = new three.Vector3();\n\n\t\t// early out if we find a value below threshold\n\t\treturn function distanceToBox( box, threshold = 0, target1 = null, target2 = null ) {\n\n\t\t\tif ( this.needsUpdate ) {\n\n\t\t\t\tthis.update();\n\n\t\t\t}\n\n\t\t\tif ( this.intersectsBox( box ) ) {\n\n\t\t\t\tif ( target1 || target2 ) {\n\n\t\t\t\t\tbox.getCenter( point2 );\n\t\t\t\t\tthis.closestPointToPoint( point2, point1 );\n\t\t\t\t\tbox.closestPointToPoint( point1, point2 );\n\n\t\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\t}\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\tconst threshold2 = threshold * threshold;\n\t\t\tconst min = box.min;\n\t\t\tconst max = box.max;\n\t\t\tconst points = this.points;\n\n\n\t\t\t// iterate over every edge and compare distances\n\t\t\tlet closestDistanceSq = Infinity;\n\n\t\t\t// check over all these points\n\t\t\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\t\t\tconst p = points[ i ];\n\t\t\t\tpoint2.copy( p ).clamp( min, max );\n\n\t\t\t\tconst dist = p.distanceToSquared( point2 );\n\t\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\t\tif ( target1 ) target1.copy( p );\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// generate and check all line segment distances\n\t\t\tlet count = 0;\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\tfor ( let i1 = 0; i1 <= 1; i1 ++ ) {\n\n\t\t\t\t\tfor ( let i2 = 0; i2 <= 1; i2 ++ ) {\n\n\t\t\t\t\t\tconst nextIndex = ( i + 1 ) % 3;\n\t\t\t\t\t\tconst nextIndex2 = ( i + 2 ) % 3;\n\n\t\t\t\t\t\t// get obb line segments\n\t\t\t\t\t\tconst index = i1 << nextIndex | i2 << nextIndex2;\n\t\t\t\t\t\tconst index2 = 1 << i | i1 << nextIndex | i2 << nextIndex2;\n\t\t\t\t\t\tconst p1 = points[ index ];\n\t\t\t\t\t\tconst p2 = points[ index2 ];\n\t\t\t\t\t\tconst line1 = segments1[ count ];\n\t\t\t\t\t\tline1.set( p1, p2 );\n\n\n\t\t\t\t\t\t// get aabb line segments\n\t\t\t\t\t\tconst f1 = xyzFields[ i ];\n\t\t\t\t\t\tconst f2 = xyzFields[ nextIndex ];\n\t\t\t\t\t\tconst f3 = xyzFields[ nextIndex2 ];\n\t\t\t\t\t\tconst line2 = segments2[ count ];\n\t\t\t\t\t\tconst start = line2.start;\n\t\t\t\t\t\tconst end = line2.end;\n\n\t\t\t\t\t\tstart[ f1 ] = min[ f1 ];\n\t\t\t\t\t\tstart[ f2 ] = i1 ? min[ f2 ] : max[ f2 ];\n\t\t\t\t\t\tstart[ f3 ] = i2 ? min[ f3 ] : max[ f2 ];\n\n\t\t\t\t\t\tend[ f1 ] = max[ f1 ];\n\t\t\t\t\t\tend[ f2 ] = i1 ? min[ f2 ] : max[ f2 ];\n\t\t\t\t\t\tend[ f3 ] = i2 ? min[ f3 ] : max[ f2 ];\n\n\t\t\t\t\t\tcount ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// check all the other boxes point\n\t\t\tfor ( let x = 0; x <= 1; x ++ ) {\n\n\t\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\n\n\t\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\n\n\t\t\t\t\t\tpoint2.x = x ? max.x : min.x;\n\t\t\t\t\t\tpoint2.y = y ? max.y : min.y;\n\t\t\t\t\t\tpoint2.z = z ? max.z : min.z;\n\n\t\t\t\t\t\tthis.closestPointToPoint( point2, point1 );\n\t\t\t\t\t\tconst dist = point2.distanceToSquared( point1 );\n\t\t\t\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0; i < 12; i ++ ) {\n\n\t\t\t\tconst l1 = segments1[ i ];\n\t\t\t\tfor ( let i2 = 0; i2 < 12; i2 ++ ) {\n\n\t\t\t\t\tconst l2 = segments2[ i2 ];\n\t\t\t\t\tclosestPointsSegmentToSegment( l1, l2, point1, point2 );\n\t\t\t\t\tconst dist = point1.distanceToSquared( point2 );\n\t\t\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn Math.sqrt( closestDistanceSq );\n\n\t\t};\n\n\t} )();\n\n\tclass PrimitivePool {\n\n\t\tconstructor( getNewPrimitive ) {\n\n\t\t\tthis._getNewPrimitive = getNewPrimitive;\n\t\t\tthis._primitives = [];\n\n\t\t}\n\n\t\tgetPrimitive() {\n\n\t\t\tconst primitives = this._primitives;\n\t\t\tif ( primitives.length === 0 ) {\n\n\t\t\t\treturn this._getNewPrimitive();\n\n\t\t\t} else {\n\n\t\t\t\treturn primitives.pop();\n\n\t\t\t}\n\n\t\t}\n\n\t\treleasePrimitive( primitive ) {\n\n\t\t\tthis._primitives.push( primitive );\n\n\t\t}\n\n\t}\n\n\tclass ExtendedTrianglePoolBase extends PrimitivePool {\n\n\t\tconstructor() {\n\n\t\t\tsuper( () => new ExtendedTriangle() );\n\n\t\t}\n\n\t}\n\n\tconst ExtendedTrianglePool = /* @__PURE__ */ new ExtendedTrianglePoolBase();\n\n\tfunction IS_LEAF( n16, uint16Array ) {\n\n\t\treturn uint16Array[ n16 + 15 ] === 0xFFFF;\n\n\t}\n\n\tfunction OFFSET( n32, uint32Array ) {\n\n\t\treturn uint32Array[ n32 + 6 ];\n\n\t}\n\n\tfunction COUNT( n16, uint16Array ) {\n\n\t\treturn uint16Array[ n16 + 14 ];\n\n\t}\n\n\tfunction LEFT_NODE( n32 ) {\n\n\t\treturn n32 + 8;\n\n\t}\n\n\tfunction RIGHT_NODE( n32, uint32Array ) {\n\n\t\treturn uint32Array[ n32 + 6 ];\n\n\t}\n\n\tfunction SPLIT_AXIS( n32, uint32Array ) {\n\n\t\treturn uint32Array[ n32 + 7 ];\n\n\t}\n\n\tfunction BOUNDING_DATA_INDEX( n32 ) {\n\n\t\treturn n32;\n\n\t}\n\n\tclass _BufferStack {\n\n\t\tconstructor() {\n\n\t\t\tthis.float32Array = null;\n\t\t\tthis.uint16Array = null;\n\t\t\tthis.uint32Array = null;\n\n\t\t\tconst stack = [];\n\t\t\tlet prevBuffer = null;\n\t\t\tthis.setBuffer = buffer => {\n\n\t\t\t\tif ( prevBuffer ) {\n\n\t\t\t\t\tstack.push( prevBuffer );\n\n\t\t\t\t}\n\n\t\t\t\tprevBuffer = buffer;\n\t\t\t\tthis.float32Array = new Float32Array( buffer );\n\t\t\t\tthis.uint16Array = new Uint16Array( buffer );\n\t\t\t\tthis.uint32Array = new Uint32Array( buffer );\n\n\t\t\t};\n\n\t\t\tthis.clearBuffer = () => {\n\n\t\t\t\tprevBuffer = null;\n\t\t\t\tthis.float32Array = null;\n\t\t\t\tthis.uint16Array = null;\n\t\t\t\tthis.uint32Array = null;\n\n\t\t\t\tif ( stack.length !== 0 ) {\n\n\t\t\t\t\tthis.setBuffer( stack.pop() );\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t}\n\n\tconst BufferStack = new _BufferStack();\n\n\tlet _box1$1, _box2$1;\n\tconst boxStack = [];\n\tconst boxPool = /* @__PURE__ */ new PrimitivePool( () => new three.Box3() );\n\n\tfunction shapecast( bvh, root, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset ) {\n\n\t\t// setup\n\t\t_box1$1 = boxPool.getPrimitive();\n\t\t_box2$1 = boxPool.getPrimitive();\n\t\tboxStack.push( _box1$1, _box2$1 );\n\t\tBufferStack.setBuffer( bvh._roots[ root ] );\n\n\t\tconst result = shapecastTraverse( 0, bvh.geometry, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset );\n\n\t\t// cleanup\n\t\tBufferStack.clearBuffer();\n\t\tboxPool.releasePrimitive( _box1$1 );\n\t\tboxPool.releasePrimitive( _box2$1 );\n\t\tboxStack.pop();\n\t\tboxStack.pop();\n\n\t\tconst length = boxStack.length;\n\t\tif ( length > 0 ) {\n\n\t\t\t_box2$1 = boxStack[ length - 1 ];\n\t\t\t_box1$1 = boxStack[ length - 2 ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tfunction shapecastTraverse(\n\t\tnodeIndex32,\n\t\tgeometry,\n\t\tintersectsBoundsFunc,\n\t\tintersectsRangeFunc,\n\t\tnodeScoreFunc = null,\n\t\tnodeIndexByteOffset = 0, // offset for unique node identifier\n\t\tdepth = 0\n\t) {\n\n\t\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\t\tlet nodeIndex16 = nodeIndex32 * 2;\n\n\t\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\t\tif ( isLeaf ) {\n\n\t\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( nodeIndex32 ), float32Array, _box1$1 );\n\t\t\treturn intersectsRangeFunc( offset, count, false, depth, nodeIndexByteOffset + nodeIndex32, _box1$1 );\n\n\t\t} else {\n\n\t\t\tconst left = LEFT_NODE( nodeIndex32 );\n\t\t\tconst right = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\t\tlet c1 = left;\n\t\t\tlet c2 = right;\n\n\t\t\tlet score1, score2;\n\t\t\tlet box1, box2;\n\t\t\tif ( nodeScoreFunc ) {\n\n\t\t\t\tbox1 = _box1$1;\n\t\t\t\tbox2 = _box2$1;\n\n\t\t\t\t// bounding data is not offset\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c1 ), float32Array, box1 );\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c2 ), float32Array, box2 );\n\n\t\t\t\tscore1 = nodeScoreFunc( box1 );\n\t\t\t\tscore2 = nodeScoreFunc( box2 );\n\n\t\t\t\tif ( score2 < score1 ) {\n\n\t\t\t\t\tc1 = right;\n\t\t\t\t\tc2 = left;\n\n\t\t\t\t\tconst temp = score1;\n\t\t\t\t\tscore1 = score2;\n\t\t\t\t\tscore2 = temp;\n\n\t\t\t\t\tbox1 = box2;\n\t\t\t\t\t// box2 is always set before use below\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Check box 1 intersection\n\t\t\tif ( ! box1 ) {\n\n\t\t\t\tbox1 = _box1$1;\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c1 ), float32Array, box1 );\n\n\t\t\t}\n\n\t\t\tconst isC1Leaf = IS_LEAF( c1 * 2, uint16Array );\n\t\t\tconst c1Intersection = intersectsBoundsFunc( box1, isC1Leaf, score1, depth + 1, nodeIndexByteOffset + c1 );\n\n\t\t\tlet c1StopTraversal;\n\t\t\tif ( c1Intersection === CONTAINED ) {\n\n\t\t\t\tconst offset = getLeftOffset( c1 );\n\t\t\t\tconst end = getRightEndOffset( c1 );\n\t\t\t\tconst count = end - offset;\n\n\t\t\t\tc1StopTraversal = intersectsRangeFunc( offset, count, true, depth + 1, nodeIndexByteOffset + c1, box1 );\n\n\t\t\t} else {\n\n\t\t\t\tc1StopTraversal =\n\t\t\t\t\tc1Intersection &&\n\t\t\t\t\tshapecastTraverse(\n\t\t\t\t\t\tc1,\n\t\t\t\t\t\tgeometry,\n\t\t\t\t\t\tintersectsBoundsFunc,\n\t\t\t\t\t\tintersectsRangeFunc,\n\t\t\t\t\t\tnodeScoreFunc,\n\t\t\t\t\t\tnodeIndexByteOffset,\n\t\t\t\t\t\tdepth + 1\n\t\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( c1StopTraversal ) return true;\n\n\t\t\t// Check box 2 intersection\n\t\t\t// cached box2 will have been overwritten by previous traversal\n\t\t\tbox2 = _box2$1;\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c2 ), float32Array, box2 );\n\n\t\t\tconst isC2Leaf = IS_LEAF( c2 * 2, uint16Array );\n\t\t\tconst c2Intersection = intersectsBoundsFunc( box2, isC2Leaf, score2, depth + 1, nodeIndexByteOffset + c2 );\n\n\t\t\tlet c2StopTraversal;\n\t\t\tif ( c2Intersection === CONTAINED ) {\n\n\t\t\t\tconst offset = getLeftOffset( c2 );\n\t\t\t\tconst end = getRightEndOffset( c2 );\n\t\t\t\tconst count = end - offset;\n\n\t\t\t\tc2StopTraversal = intersectsRangeFunc( offset, count, true, depth + 1, nodeIndexByteOffset + c2, box2 );\n\n\t\t\t} else {\n\n\t\t\t\tc2StopTraversal =\n\t\t\t\t\tc2Intersection &&\n\t\t\t\t\tshapecastTraverse(\n\t\t\t\t\t\tc2,\n\t\t\t\t\t\tgeometry,\n\t\t\t\t\t\tintersectsBoundsFunc,\n\t\t\t\t\t\tintersectsRangeFunc,\n\t\t\t\t\t\tnodeScoreFunc,\n\t\t\t\t\t\tnodeIndexByteOffset,\n\t\t\t\t\t\tdepth + 1\n\t\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( c2StopTraversal ) return true;\n\n\t\t\treturn false;\n\n\t\t\t// Define these inside the function so it has access to the local variables needed\n\t\t\t// when converting to the buffer equivalents\n\t\t\tfunction getLeftOffset( nodeIndex32 ) {\n\n\t\t\t\tconst { uint16Array, uint32Array } = BufferStack;\n\t\t\t\tlet nodeIndex16 = nodeIndex32 * 2;\n\n\t\t\t\t// traverse until we find a leaf\n\t\t\t\twhile ( ! IS_LEAF( nodeIndex16, uint16Array ) ) {\n\n\t\t\t\t\tnodeIndex32 = LEFT_NODE( nodeIndex32 );\n\t\t\t\t\tnodeIndex16 = nodeIndex32 * 2;\n\n\t\t\t\t}\n\n\t\t\t\treturn OFFSET( nodeIndex32, uint32Array );\n\n\t\t\t}\n\n\t\t\tfunction getRightEndOffset( nodeIndex32 ) {\n\n\t\t\t\tconst { uint16Array, uint32Array } = BufferStack;\n\t\t\t\tlet nodeIndex16 = nodeIndex32 * 2;\n\n\t\t\t\t// traverse until we find a leaf\n\t\t\t\twhile ( ! IS_LEAF( nodeIndex16, uint16Array ) ) {\n\n\t\t\t\t\t// adjust offset to point to the right node\n\t\t\t\t\tnodeIndex32 = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\t\t\t\tnodeIndex16 = nodeIndex32 * 2;\n\n\t\t\t\t}\n\n\t\t\t\t// return the end offset of the triangle range\n\t\t\t\treturn OFFSET( nodeIndex32, uint32Array ) + COUNT( nodeIndex16, uint16Array );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tconst temp = /* @__PURE__ */ new three.Vector3();\n\tconst temp1$2 = /* @__PURE__ */ new three.Vector3();\n\n\tfunction closestPointToPoint(\n\t\tbvh,\n\t\tpoint,\n\t\ttarget = { },\n\t\tminThreshold = 0,\n\t\tmaxThreshold = Infinity,\n\t) {\n\n\t\t// early out if under minThreshold\n\t\t// skip checking if over maxThreshold\n\t\t// set minThreshold = maxThreshold to quickly check if a point is within a threshold\n\t\t// returns Infinity if no value found\n\t\tconst minThresholdSq = minThreshold * minThreshold;\n\t\tconst maxThresholdSq = maxThreshold * maxThreshold;\n\t\tlet closestDistanceSq = Infinity;\n\t\tlet closestDistanceTriIndex = null;\n\t\tbvh.shapecast(\n\n\t\t\t{\n\n\t\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\t\ttemp.copy( point ).clamp( box.min, box.max );\n\t\t\t\t\treturn temp.distanceToSquared( point );\n\n\t\t\t\t},\n\n\t\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\t\treturn score < closestDistanceSq && score < maxThresholdSq;\n\n\t\t\t\t},\n\n\t\t\t\tintersectsTriangle: ( tri, triIndex ) => {\n\n\t\t\t\t\ttri.closestPointToPoint( point, temp );\n\t\t\t\t\tconst distSq = point.distanceToSquared( temp );\n\t\t\t\t\tif ( distSq < closestDistanceSq ) {\n\n\t\t\t\t\t\ttemp1$2.copy( temp );\n\t\t\t\t\t\tclosestDistanceSq = distSq;\n\t\t\t\t\t\tclosestDistanceTriIndex = triIndex;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( distSq < minThresholdSq ) {\n\n\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t}\n\n\t\t);\n\n\t\tif ( closestDistanceSq === Infinity ) return null;\n\n\t\tconst closestDistance = Math.sqrt( closestDistanceSq );\n\n\t\tif ( ! target.point ) target.point = temp1$2.clone();\n\t\telse target.point.copy( temp1$2 );\n\t\ttarget.distance = closestDistance,\n\t\ttarget.faceIndex = closestDistanceTriIndex;\n\n\t\treturn target;\n\n\t}\n\n\t// Ripped and modified From THREE.js Mesh raycast\n\t// https://github.com/mrdoob/three.js/blob/0aa87c999fe61e216c1133fba7a95772b503eddf/src/objects/Mesh.js#L115\n\tconst _vA = /* @__PURE__ */ new three.Vector3();\n\tconst _vB = /* @__PURE__ */ new three.Vector3();\n\tconst _vC = /* @__PURE__ */ new three.Vector3();\n\n\tconst _uvA = /* @__PURE__ */ new three.Vector2();\n\tconst _uvB = /* @__PURE__ */ new three.Vector2();\n\tconst _uvC = /* @__PURE__ */ new three.Vector2();\n\n\tconst _normalA = /* @__PURE__ */ new three.Vector3();\n\tconst _normalB = /* @__PURE__ */ new three.Vector3();\n\tconst _normalC = /* @__PURE__ */ new three.Vector3();\n\n\tconst _intersectionPoint = /* @__PURE__ */ new three.Vector3();\n\tfunction checkIntersection( ray, pA, pB, pC, point, side ) {\n\n\t\tlet intersect;\n\t\tif ( side === three.BackSide ) {\n\n\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t\t} else {\n\n\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, side !== three.DoubleSide, point );\n\n\t\t}\n\n\t\tif ( intersect === null ) return null;\n\n\t\tconst distance = ray.origin.distanceTo( point );\n\n\t\treturn {\n\n\t\t\tdistance: distance,\n\t\t\tpoint: point.clone(),\n\n\t\t};\n\n\t}\n\n\tfunction checkBufferGeometryIntersection( ray, position, normal, uv, uv1, a, b, c, side ) {\n\n\t\t_vA.fromBufferAttribute( position, a );\n\t\t_vB.fromBufferAttribute( position, b );\n\t\t_vC.fromBufferAttribute( position, c );\n\n\t\tconst intersection = checkIntersection( ray, _vA, _vB, _vC, _intersectionPoint, side );\n\n\t\tif ( intersection ) {\n\n\t\t\tif ( uv ) {\n\n\t\t\t\t_uvA.fromBufferAttribute( uv, a );\n\t\t\t\t_uvB.fromBufferAttribute( uv, b );\n\t\t\t\t_uvC.fromBufferAttribute( uv, c );\n\n\t\t\t\tintersection.uv = three.Triangle.getInterpolation( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new three.Vector2() );\n\n\t\t\t}\n\n\t\t\tif ( uv1 ) {\n\n\t\t\t\t_uvA.fromBufferAttribute( uv1, a );\n\t\t\t\t_uvB.fromBufferAttribute( uv1, b );\n\t\t\t\t_uvC.fromBufferAttribute( uv1, c );\n\n\t\t\t\tintersection.uv1 = three.Triangle.getInterpolation( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new three.Vector2() );\n\n\t\t\t}\n\n\t\t\tif ( normal ) {\n\n\t\t\t\t_normalA.fromBufferAttribute( normal, a );\n\t\t\t\t_normalB.fromBufferAttribute( normal, b );\n\t\t\t\t_normalC.fromBufferAttribute( normal, c );\n\n\t\t\t\tintersection.normal = three.Triangle.getInterpolation( _intersectionPoint, _vA, _vB, _vC, _normalA, _normalB, _normalC, new three.Vector3() );\n\t\t\t\tif ( intersection.normal.dot( ray.direction ) > 0 ) {\n\n\t\t\t\t\tintersection.normal.multiplyScalar( - 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst face = {\n\t\t\t\ta: a,\n\t\t\t\tb: b,\n\t\t\t\tc: c,\n\t\t\t\tnormal: new three.Vector3(),\n\t\t\t\tmaterialIndex: 0\n\t\t\t};\n\n\t\t\tthree.Triangle.getNormal( _vA, _vB, _vC, face.normal );\n\n\t\t\tintersection.face = face;\n\t\t\tintersection.faceIndex = a;\n\n\t\t}\n\n\t\treturn intersection;\n\n\t}\n\n\t// https://github.com/mrdoob/three.js/blob/0aa87c999fe61e216c1133fba7a95772b503eddf/src/objects/Mesh.js#L258\n\tfunction intersectTri( geo, side, ray, tri, intersections ) {\n\n\t\tconst triOffset = tri * 3;\n\t\tlet a = triOffset + 0;\n\t\tlet b = triOffset + 1;\n\t\tlet c = triOffset + 2;\n\n\t\tconst index = geo.index;\n\t\tif ( geo.index ) {\n\n\t\t\ta = index.getX( a );\n\t\t\tb = index.getX( b );\n\t\t\tc = index.getX( c );\n\n\t\t}\n\n\t\tconst { position, normal, uv, uv1 } = geo.attributes;\n\t\tconst intersection = checkBufferGeometryIntersection( ray, position, normal, uv, uv1, a, b, c, side );\n\n\t\tif ( intersection ) {\n\n\t\t\tintersection.faceIndex = tri;\n\t\t\tif ( intersections ) intersections.push( intersection );\n\t\t\treturn intersection;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t// sets the vertices of triangle `tri` with the 3 vertices after i\n\tfunction setTriangle( tri, i, index, pos ) {\n\n\t\tconst ta = tri.a;\n\t\tconst tb = tri.b;\n\t\tconst tc = tri.c;\n\n\t\tlet i0 = i;\n\t\tlet i1 = i + 1;\n\t\tlet i2 = i + 2;\n\t\tif ( index ) {\n\n\t\t\ti0 = index.getX( i0 );\n\t\t\ti1 = index.getX( i1 );\n\t\t\ti2 = index.getX( i2 );\n\n\t\t}\n\n\t\tta.x = pos.getX( i0 );\n\t\tta.y = pos.getY( i0 );\n\t\tta.z = pos.getZ( i0 );\n\n\t\ttb.x = pos.getX( i1 );\n\t\ttb.y = pos.getY( i1 );\n\t\ttb.z = pos.getZ( i1 );\n\n\t\ttc.x = pos.getX( i2 );\n\t\ttc.y = pos.getY( i2 );\n\t\ttc.z = pos.getZ( i2 );\n\n\t}\n\n\tconst tempV1 = /* @__PURE__ */ new three.Vector3();\n\tconst tempV2 = /* @__PURE__ */ new three.Vector3();\n\tconst tempV3 = /* @__PURE__ */ new three.Vector3();\n\tconst tempUV1 = /* @__PURE__ */ new three.Vector2();\n\tconst tempUV2 = /* @__PURE__ */ new three.Vector2();\n\tconst tempUV3 = /* @__PURE__ */ new three.Vector2();\n\n\tfunction getTriangleHitPointInfo( point, geometry, triangleIndex, target ) {\n\n\t\tconst indices = geometry.getIndex().array;\n\t\tconst positions = geometry.getAttribute( 'position' );\n\t\tconst uvs = geometry.getAttribute( 'uv' );\n\n\t\tconst a = indices[ triangleIndex * 3 ];\n\t\tconst b = indices[ triangleIndex * 3 + 1 ];\n\t\tconst c = indices[ triangleIndex * 3 + 2 ];\n\n\t\ttempV1.fromBufferAttribute( positions, a );\n\t\ttempV2.fromBufferAttribute( positions, b );\n\t\ttempV3.fromBufferAttribute( positions, c );\n\n\t\t// find the associated material index\n\t\tlet materialIndex = 0;\n\t\tconst groups = geometry.groups;\n\t\tconst firstVertexIndex = triangleIndex * 3;\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tconst group = groups[ i ];\n\t\t\tconst { start, count } = group;\n\t\t\tif ( firstVertexIndex >= start && firstVertexIndex < start + count ) {\n\n\t\t\t\tmaterialIndex = group.materialIndex;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// extract uvs\n\t\tlet uv = null;\n\t\tif ( uvs ) {\n\n\t\t\ttempUV1.fromBufferAttribute( uvs, a );\n\t\t\ttempUV2.fromBufferAttribute( uvs, b );\n\t\t\ttempUV3.fromBufferAttribute( uvs, c );\n\n\t\t\tif ( target && target.uv ) uv = target.uv;\n\t\t\telse uv = new three.Vector2();\n\n\t\t\tthree.Triangle.getInterpolation( point, tempV1, tempV2, tempV3, tempUV1, tempUV2, tempUV3, uv );\n\n\t\t}\n\n\t\t// adjust the provided target or create a new one\n\t\tif ( target ) {\n\n\t\t\tif ( ! target.face ) target.face = { };\n\t\t\ttarget.face.a = a;\n\t\t\ttarget.face.b = b;\n\t\t\ttarget.face.c = c;\n\t\t\ttarget.face.materialIndex = materialIndex;\n\t\t\tif ( ! target.face.normal ) target.face.normal = new three.Vector3();\n\t\t\tthree.Triangle.getNormal( tempV1, tempV2, tempV3, target.face.normal );\n\n\t\t\tif ( uv ) target.uv = uv;\n\n\t\t\treturn target;\n\n\t\t} else {\n\n\t\t\treturn {\n\t\t\t\tface: {\n\t\t\t\t\ta: a,\n\t\t\t\t\tb: b,\n\t\t\t\t\tc: c,\n\t\t\t\t\tmaterialIndex: materialIndex,\n\t\t\t\t\tnormal: three.Triangle.getNormal( tempV1, tempV2, tempV3, new three.Vector3() )\n\t\t\t\t},\n\t\t\t\tuv: uv\n\t\t\t};\n\n\t\t}\n\n\t}\n\n\t/*************************************************************/\n\t/* This file is generated from \"iterationUtils.template.js\". */\n\t/*************************************************************/\n\t/* eslint-disable indent */\n\n\tfunction intersectTris( bvh, side, ray, offset, count, intersections ) {\n\n\t\tconst { geometry, _indirectBuffer } = bvh;\n\t\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\n\t\t\tintersectTri( geometry, side, ray, i, intersections );\n\n\n\t\t}\n\n\t}\n\n\tfunction intersectClosestTri( bvh, side, ray, offset, count ) {\n\n\t\tconst { geometry, _indirectBuffer } = bvh;\n\t\tlet dist = Infinity;\n\t\tlet res = null;\n\t\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\t\tlet intersection;\n\n\t\t\tintersection = intersectTri( geometry, side, ray, i );\n\n\n\t\t\tif ( intersection && intersection.distance < dist ) {\n\n\t\t\t\tres = intersection;\n\t\t\t\tdist = intersection.distance;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn res;\n\n\t}\n\n\tfunction iterateOverTriangles(\n\t\toffset,\n\t\tcount,\n\t\tbvh,\n\t\tintersectsTriangleFunc,\n\t\tcontained,\n\t\tdepth,\n\t\ttriangle\n\t) {\n\n\t\tconst { geometry } = bvh;\n\t\tconst { index } = geometry;\n\t\tconst pos = geometry.attributes.position;\n\t\tfor ( let i = offset, l = count + offset; i < l; i ++ ) {\n\n\t\t\tlet tri;\n\n\t\t\ttri = i;\n\n\t\t\tsetTriangle( triangle, tri * 3, index, pos );\n\t\t\ttriangle.needsUpdate = true;\n\n\t\t\tif ( intersectsTriangleFunc( triangle, tri, contained, depth ) ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\t/****************************************************/\n\t/* This file is generated from \"refit.template.js\". */\n\t/****************************************************/\n\n\tfunction refit( bvh, nodeIndices = null ) {\n\n\t\tif ( nodeIndices && Array.isArray( nodeIndices ) ) {\n\n\t\t\tnodeIndices = new Set( nodeIndices );\n\n\t\t}\n\n\t\tconst geometry = bvh.geometry;\n\t\tconst indexArr = geometry.index ? geometry.index.array : null;\n\t\tconst posAttr = geometry.attributes.position;\n\n\t\tlet buffer, uint32Array, uint16Array, float32Array;\n\t\tlet byteOffset = 0;\n\t\tconst roots = bvh._roots;\n\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\t\tbuffer = roots[ i ];\n\t\t\tuint32Array = new Uint32Array( buffer );\n\t\t\tuint16Array = new Uint16Array( buffer );\n\t\t\tfloat32Array = new Float32Array( buffer );\n\n\t\t\t_traverse( 0, byteOffset );\n\t\t\tbyteOffset += buffer.byteLength;\n\n\t\t}\n\n\t\tfunction _traverse( node32Index, byteOffset, force = false ) {\n\n\t\t\tconst node16Index = node32Index * 2;\n\t\t\tconst isLeaf = uint16Array[ node16Index + 15 ] === IS_LEAFNODE_FLAG;\n\t\t\tif ( isLeaf ) {\n\n\t\t\t\tconst offset = uint32Array[ node32Index + 6 ];\n\t\t\t\tconst count = uint16Array[ node16Index + 14 ];\n\n\t\t\t\tlet minx = Infinity;\n\t\t\t\tlet miny = Infinity;\n\t\t\t\tlet minz = Infinity;\n\t\t\t\tlet maxx = - Infinity;\n\t\t\t\tlet maxy = - Infinity;\n\t\t\t\tlet maxz = - Infinity;\n\n\n\t\t\t\tfor ( let i = 3 * offset, l = 3 * ( offset + count ); i < l; i ++ ) {\n\n\t\t\t\t\tlet index = indexArr[ i ];\n\t\t\t\t\tconst x = posAttr.getX( index );\n\t\t\t\t\tconst y = posAttr.getY( index );\n\t\t\t\t\tconst z = posAttr.getZ( index );\n\n\t\t\t\t\tif ( x < minx ) minx = x;\n\t\t\t\t\tif ( x > maxx ) maxx = x;\n\n\t\t\t\t\tif ( y < miny ) miny = y;\n\t\t\t\t\tif ( y > maxy ) maxy = y;\n\n\t\t\t\t\tif ( z < minz ) minz = z;\n\t\t\t\t\tif ( z > maxz ) maxz = z;\n\n\t\t\t\t}\n\n\n\t\t\t\tif (\n\t\t\t\t\tfloat32Array[ node32Index + 0 ] !== minx ||\n\t\t\t\t\tfloat32Array[ node32Index + 1 ] !== miny ||\n\t\t\t\t\tfloat32Array[ node32Index + 2 ] !== minz ||\n\n\t\t\t\t\tfloat32Array[ node32Index + 3 ] !== maxx ||\n\t\t\t\t\tfloat32Array[ node32Index + 4 ] !== maxy ||\n\t\t\t\t\tfloat32Array[ node32Index + 5 ] !== maxz\n\t\t\t\t) {\n\n\t\t\t\t\tfloat32Array[ node32Index + 0 ] = minx;\n\t\t\t\t\tfloat32Array[ node32Index + 1 ] = miny;\n\t\t\t\t\tfloat32Array[ node32Index + 2 ] = minz;\n\n\t\t\t\t\tfloat32Array[ node32Index + 3 ] = maxx;\n\t\t\t\t\tfloat32Array[ node32Index + 4 ] = maxy;\n\t\t\t\t\tfloat32Array[ node32Index + 5 ] = maxz;\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst left = node32Index + 8;\n\t\t\t\tconst right = uint32Array[ node32Index + 6 ];\n\n\t\t\t\t// the identifying node indices provided by the shapecast function include offsets of all\n\t\t\t\t// root buffers to guarantee they're unique between roots so offset left and right indices here.\n\t\t\t\tconst offsetLeft = left + byteOffset;\n\t\t\t\tconst offsetRight = right + byteOffset;\n\t\t\t\tlet forceChildren = force;\n\t\t\t\tlet includesLeft = false;\n\t\t\t\tlet includesRight = false;\n\n\t\t\t\tif ( nodeIndices ) {\n\n\t\t\t\t\t// if we see that neither the left or right child are included in the set that need to be updated\n\t\t\t\t\t// then we assume that all children need to be updated.\n\t\t\t\t\tif ( ! forceChildren ) {\n\n\t\t\t\t\t\tincludesLeft = nodeIndices.has( offsetLeft );\n\t\t\t\t\t\tincludesRight = nodeIndices.has( offsetRight );\n\t\t\t\t\t\tforceChildren = ! includesLeft && ! includesRight;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tincludesLeft = true;\n\t\t\t\t\tincludesRight = true;\n\n\t\t\t\t}\n\n\t\t\t\tconst traverseLeft = forceChildren || includesLeft;\n\t\t\t\tconst traverseRight = forceChildren || includesRight;\n\n\t\t\t\tlet leftChange = false;\n\t\t\t\tif ( traverseLeft ) {\n\n\t\t\t\t\tleftChange = _traverse( left, byteOffset, forceChildren );\n\n\t\t\t\t}\n\n\t\t\t\tlet rightChange = false;\n\t\t\t\tif ( traverseRight ) {\n\n\t\t\t\t\trightChange = _traverse( right, byteOffset, forceChildren );\n\n\t\t\t\t}\n\n\t\t\t\tconst didChange = leftChange || rightChange;\n\t\t\t\tif ( didChange ) {\n\n\t\t\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\tconst lefti = left + i;\n\t\t\t\t\t\tconst righti = right + i;\n\t\t\t\t\t\tconst minLeftValue = float32Array[ lefti ];\n\t\t\t\t\t\tconst maxLeftValue = float32Array[ lefti + 3 ];\n\t\t\t\t\t\tconst minRightValue = float32Array[ righti ];\n\t\t\t\t\t\tconst maxRightValue = float32Array[ righti + 3 ];\n\n\t\t\t\t\t\tfloat32Array[ node32Index + i ] = minLeftValue < minRightValue ? minLeftValue : minRightValue;\n\t\t\t\t\t\tfloat32Array[ node32Index + i + 3 ] = maxLeftValue > maxRightValue ? maxLeftValue : maxRightValue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn didChange;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tconst _boundingBox = /* @__PURE__ */ new three.Box3();\n\tfunction intersectRay( nodeIndex32, array, ray, target ) {\n\n\t\tarrayToBox( nodeIndex32, array, _boundingBox );\n\t\treturn ray.intersectBox( _boundingBox, target );\n\n\t}\n\n\t/*************************************************************/\n\t/* This file is generated from \"iterationUtils.template.js\". */\n\t/*************************************************************/\n\t/* eslint-disable indent */\n\n\tfunction intersectTris_indirect( bvh, side, ray, offset, count, intersections ) {\n\n\t\tconst { geometry, _indirectBuffer } = bvh;\n\t\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\t\tlet vi = _indirectBuffer ? _indirectBuffer[ i ] : i;\n\t\t\tintersectTri( geometry, side, ray, vi, intersections );\n\n\n\t\t}\n\n\t}\n\n\tfunction intersectClosestTri_indirect( bvh, side, ray, offset, count ) {\n\n\t\tconst { geometry, _indirectBuffer } = bvh;\n\t\tlet dist = Infinity;\n\t\tlet res = null;\n\t\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\t\tlet intersection;\n\t\t\tintersection = intersectTri( geometry, side, ray, _indirectBuffer ? _indirectBuffer[ i ] : i );\n\n\n\t\t\tif ( intersection && intersection.distance < dist ) {\n\n\t\t\t\tres = intersection;\n\t\t\t\tdist = intersection.distance;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn res;\n\n\t}\n\n\tfunction iterateOverTriangles_indirect(\n\t\toffset,\n\t\tcount,\n\t\tbvh,\n\t\tintersectsTriangleFunc,\n\t\tcontained,\n\t\tdepth,\n\t\ttriangle\n\t) {\n\n\t\tconst { geometry } = bvh;\n\t\tconst { index } = geometry;\n\t\tconst pos = geometry.attributes.position;\n\t\tfor ( let i = offset, l = count + offset; i < l; i ++ ) {\n\n\t\t\tlet tri;\n\t\t\ttri = bvh.resolveTriangleIndex( i );\n\n\t\t\tsetTriangle( triangle, tri * 3, index, pos );\n\t\t\ttriangle.needsUpdate = true;\n\n\t\t\tif ( intersectsTriangleFunc( triangle, tri, contained, depth ) ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\t/******************************************************/\n\t/* This file is generated from \"raycast.template.js\". */\n\t/******************************************************/\n\n\tconst _boxIntersection$3 = /* @__PURE__ */ new three.Vector3();\n\tfunction raycast( bvh, root, side, ray, intersects ) {\n\n\t\tBufferStack.setBuffer( bvh._roots[ root ] );\n\t\t_raycast$1( 0, bvh, side, ray, intersects );\n\t\tBufferStack.clearBuffer();\n\n\t}\n\n\tfunction _raycast$1( nodeIndex32, bvh, side, ray, intersects ) {\n\n\t\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\t\tconst nodeIndex16 = nodeIndex32 * 2;\n\t\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\t\tif ( isLeaf ) {\n\n\t\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\n\t\t\tintersectTris( bvh, side, ray, offset, count, intersects );\n\n\n\t\t} else {\n\n\t\t\tconst leftIndex = LEFT_NODE( nodeIndex32 );\n\t\t\tif ( intersectRay( leftIndex, float32Array, ray, _boxIntersection$3 ) ) {\n\n\t\t\t\t_raycast$1( leftIndex, bvh, side, ray, intersects );\n\n\t\t\t}\n\n\t\t\tconst rightIndex = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\t\tif ( intersectRay( rightIndex, float32Array, ray, _boxIntersection$3 ) ) {\n\n\t\t\t\t_raycast$1( rightIndex, bvh, side, ray, intersects );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/***********************************************************/\n\t/* This file is generated from \"raycastFirst.template.js\". */\n\t/***********************************************************/\n\tconst _boxIntersection$2 = /* @__PURE__ */ new three.Vector3();\n\tconst _xyzFields$1 = [ 'x', 'y', 'z' ];\n\tfunction raycastFirst( bvh, root, side, ray ) {\n\n\t\tBufferStack.setBuffer( bvh._roots[ root ] );\n\t\tconst result = _raycastFirst$1( 0, bvh, side, ray );\n\t\tBufferStack.clearBuffer();\n\n\t\treturn result;\n\n\t}\n\n\tfunction _raycastFirst$1( nodeIndex32, bvh, side, ray ) {\n\n\t\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\t\tlet nodeIndex16 = nodeIndex32 * 2;\n\n\t\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\t\tif ( isLeaf ) {\n\n\t\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\n\t\t\treturn intersectClosestTri( bvh, side, ray, offset, count );\n\n\n\t\t} else {\n\n\t\t\t// consider the position of the split plane with respect to the oncoming ray; whichever direction\n\t\t\t// the ray is coming from, look for an intersection among that side of the tree first\n\t\t\tconst splitAxis = SPLIT_AXIS( nodeIndex32, uint32Array );\n\t\t\tconst xyzAxis = _xyzFields$1[ splitAxis ];\n\t\t\tconst rayDir = ray.direction[ xyzAxis ];\n\t\t\tconst leftToRight = rayDir >= 0;\n\n\t\t\t// c1 is the child to check first\n\t\t\tlet c1, c2;\n\t\t\tif ( leftToRight ) {\n\n\t\t\t\tc1 = LEFT_NODE( nodeIndex32 );\n\t\t\t\tc2 = RIGHT_NODE( nodeIndex32, uint32Array );\n\n\t\t\t} else {\n\n\t\t\t\tc1 = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\t\t\tc2 = LEFT_NODE( nodeIndex32 );\n\n\t\t\t}\n\n\t\t\tconst c1Intersection = intersectRay( c1, float32Array, ray, _boxIntersection$2 );\n\t\t\tconst c1Result = c1Intersection ? _raycastFirst$1( c1, bvh, side, ray ) : null;\n\n\t\t\t// if we got an intersection in the first node and it's closer than the second node's bounding\n\t\t\t// box, we don't need to consider the second node because it couldn't possibly be a better result\n\t\t\tif ( c1Result ) {\n\n\t\t\t\t// check if the point is within the second bounds\n\t\t\t\t// \"point\" is in the local frame of the bvh\n\t\t\t\tconst point = c1Result.point[ xyzAxis ];\n\t\t\t\tconst isOutside = leftToRight ?\n\t\t\t\t\tpoint <= float32Array[ c2 + splitAxis ] : // min bounding data\n\t\t\t\t\tpoint >= float32Array[ c2 + splitAxis + 3 ]; // max bounding data\n\n\t\t\t\tif ( isOutside ) {\n\n\t\t\t\t\treturn c1Result;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// either there was no intersection in the first node, or there could still be a closer\n\t\t\t// intersection in the second, so check the second node and then take the better of the two\n\t\t\tconst c2Intersection = intersectRay( c2, float32Array, ray, _boxIntersection$2 );\n\t\t\tconst c2Result = c2Intersection ? _raycastFirst$1( c2, bvh, side, ray ) : null;\n\n\t\t\tif ( c1Result && c2Result ) {\n\n\t\t\t\treturn c1Result.distance <= c2Result.distance ? c1Result : c2Result;\n\n\t\t\t} else {\n\n\t\t\t\treturn c1Result || c2Result || null;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/*****************************************************************/\n\t/* This file is generated from \"intersectsGeometry.template.js\". */\n\t/*****************************************************************/\n\t/* eslint-disable indent */\n\n\tconst boundingBox$2 = /* @__PURE__ */ new three.Box3();\n\tconst triangle$1 = /* @__PURE__ */ new ExtendedTriangle();\n\tconst triangle2$1 = /* @__PURE__ */ new ExtendedTriangle();\n\tconst invertedMat$1 = /* @__PURE__ */ new three.Matrix4();\n\n\tconst obb$4 = /* @__PURE__ */ new OrientedBox();\n\tconst obb2$3 = /* @__PURE__ */ new OrientedBox();\n\n\tfunction intersectsGeometry( bvh, root, otherGeometry, geometryToBvh ) {\n\n\t\tBufferStack.setBuffer( bvh._roots[ root ] );\n\t\tconst result = _intersectsGeometry$1( 0, bvh, otherGeometry, geometryToBvh );\n\t\tBufferStack.clearBuffer();\n\n\t\treturn result;\n\n\t}\n\n\tfunction _intersectsGeometry$1( nodeIndex32, bvh, otherGeometry, geometryToBvh, cachedObb = null ) {\n\n\t\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\t\tlet nodeIndex16 = nodeIndex32 * 2;\n\n\t\tif ( cachedObb === null ) {\n\n\t\t\tif ( ! otherGeometry.boundingBox ) {\n\n\t\t\t\totherGeometry.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tobb$4.set( otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh );\n\t\t\tcachedObb = obb$4;\n\n\t\t}\n\n\t\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\t\tif ( isLeaf ) {\n\n\t\t\tconst thisGeometry = bvh.geometry;\n\t\t\tconst thisIndex = thisGeometry.index;\n\t\t\tconst thisPos = thisGeometry.attributes.position;\n\n\t\t\tconst index = otherGeometry.index;\n\t\t\tconst pos = otherGeometry.attributes.position;\n\n\t\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\t\t\t// get the inverse of the geometry matrix so we can transform our triangles into the\n\t\t\t// geometry space we're trying to test. We assume there are fewer triangles being checked\n\t\t\t// here.\n\t\t\tinvertedMat$1.copy( geometryToBvh ).invert();\n\n\t\t\tif ( otherGeometry.boundsTree ) {\n\n\t\t\t\t// if there's a bounds tree\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( nodeIndex32 ), float32Array, obb2$3 );\n\t\t\t\tobb2$3.matrix.copy( invertedMat$1 );\n\t\t\t\tobb2$3.needsUpdate = true;\n\n\t\t\t\t// TODO: use a triangle iteration function here\n\t\t\t\tconst res = otherGeometry.boundsTree.shapecast( {\n\n\t\t\t\t\tintersectsBounds: box => obb2$3.intersectsBox( box ),\n\n\t\t\t\t\tintersectsTriangle: tri => {\n\n\t\t\t\t\t\ttri.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttri.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttri.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttri.needsUpdate = true;\n\n\n\t\t\t\t\t\tfor ( let i = offset * 3, l = ( count + offset ) * 3; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t// this triangle needs to be transformed into the current BVH coordinate frame\n\t\t\t\t\t\t\tsetTriangle( triangle2$1, i, thisIndex, thisPos );\n\t\t\t\t\t\t\ttriangle2$1.needsUpdate = true;\n\t\t\t\t\t\t\tif ( tri.intersectsTriangle( triangle2$1 ) ) {\n\n\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\treturn res;\n\n\t\t\t} else {\n\n\t\t\t\t// if we're just dealing with raw geometry\n\n\t\t\t\tfor ( let i = offset * 3, l = ( count + offset ) * 3; i < l; i += 3 ) {\n\n\t\t\t\t\t// this triangle needs to be transformed into the current BVH coordinate frame\n\t\t\t\t\tsetTriangle( triangle$1, i, thisIndex, thisPos );\n\n\n\t\t\t\t\ttriangle$1.a.applyMatrix4( invertedMat$1 );\n\t\t\t\t\ttriangle$1.b.applyMatrix4( invertedMat$1 );\n\t\t\t\t\ttriangle$1.c.applyMatrix4( invertedMat$1 );\n\t\t\t\t\ttriangle$1.needsUpdate = true;\n\n\t\t\t\t\tfor ( let i2 = 0, l2 = index.count; i2 < l2; i2 += 3 ) {\n\n\t\t\t\t\t\tsetTriangle( triangle2$1, i2, index, pos );\n\t\t\t\t\t\ttriangle2$1.needsUpdate = true;\n\n\t\t\t\t\t\tif ( triangle$1.intersectsTriangle( triangle2$1 ) ) {\n\n\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst left = nodeIndex32 + 8;\n\t\t\tconst right = uint32Array[ nodeIndex32 + 6 ];\n\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( left ), float32Array, boundingBox$2 );\n\t\t\tconst leftIntersection =\n\t\t\t\tcachedObb.intersectsBox( boundingBox$2 ) &&\n\t\t\t\t_intersectsGeometry$1( left, bvh, otherGeometry, geometryToBvh, cachedObb );\n\n\t\t\tif ( leftIntersection ) return true;\n\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( right ), float32Array, boundingBox$2 );\n\t\t\tconst rightIntersection =\n\t\t\t\tcachedObb.intersectsBox( boundingBox$2 ) &&\n\t\t\t\t_intersectsGeometry$1( right, bvh, otherGeometry, geometryToBvh, cachedObb );\n\n\t\t\tif ( rightIntersection ) return true;\n\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\t/*********************************************************************/\n\t/* This file is generated from \"closestPointToGeometry.template.js\". */\n\t/*********************************************************************/\n\n\tconst tempMatrix$1 = /* @__PURE__ */ new three.Matrix4();\n\tconst obb$3 = /* @__PURE__ */ new OrientedBox();\n\tconst obb2$2 = /* @__PURE__ */ new OrientedBox();\n\tconst temp1$1 = /* @__PURE__ */ new three.Vector3();\n\tconst temp2$1 = /* @__PURE__ */ new three.Vector3();\n\tconst temp3$1 = /* @__PURE__ */ new three.Vector3();\n\tconst temp4$1 = /* @__PURE__ */ new three.Vector3();\n\n\tfunction closestPointToGeometry(\n\t\tbvh,\n\t\totherGeometry,\n\t\tgeometryToBvh,\n\t\ttarget1 = { },\n\t\ttarget2 = { },\n\t\tminThreshold = 0,\n\t\tmaxThreshold = Infinity,\n\t) {\n\n\t\tif ( ! otherGeometry.boundingBox ) {\n\n\t\t\totherGeometry.computeBoundingBox();\n\n\t\t}\n\n\t\tobb$3.set( otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh );\n\t\tobb$3.needsUpdate = true;\n\n\t\tconst geometry = bvh.geometry;\n\t\tconst pos = geometry.attributes.position;\n\t\tconst index = geometry.index;\n\t\tconst otherPos = otherGeometry.attributes.position;\n\t\tconst otherIndex = otherGeometry.index;\n\t\tconst triangle = ExtendedTrianglePool.getPrimitive();\n\t\tconst triangle2 = ExtendedTrianglePool.getPrimitive();\n\n\t\tlet tempTarget1 = temp1$1;\n\t\tlet tempTargetDest1 = temp2$1;\n\t\tlet tempTarget2 = null;\n\t\tlet tempTargetDest2 = null;\n\n\t\tif ( target2 ) {\n\n\t\t\ttempTarget2 = temp3$1;\n\t\t\ttempTargetDest2 = temp4$1;\n\n\t\t}\n\n\t\tlet closestDistance = Infinity;\n\t\tlet closestDistanceTriIndex = null;\n\t\tlet closestDistanceOtherTriIndex = null;\n\t\ttempMatrix$1.copy( geometryToBvh ).invert();\n\t\tobb2$2.matrix.copy( tempMatrix$1 );\n\t\tbvh.shapecast(\n\t\t\t{\n\n\t\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\t\treturn obb$3.distanceToBox( box );\n\n\t\t\t\t},\n\n\t\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\t\tif ( score < closestDistance && score < maxThreshold ) {\n\n\t\t\t\t\t\t// if we know the triangles of this bounds will be intersected next then\n\t\t\t\t\t\t// save the bounds to use during triangle checks.\n\t\t\t\t\t\tif ( isLeaf ) {\n\n\t\t\t\t\t\t\tobb2$2.min.copy( box.min );\n\t\t\t\t\t\t\tobb2$2.max.copy( box.max );\n\t\t\t\t\t\t\tobb2$2.needsUpdate = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t},\n\n\t\t\t\tintersectsRange: ( offset, count ) => {\n\n\t\t\t\t\tif ( otherGeometry.boundsTree ) {\n\n\t\t\t\t\t\t// if the other geometry has a bvh then use the accelerated path where we use shapecast to find\n\t\t\t\t\t\t// the closest bounds in the other geometry to check.\n\t\t\t\t\t\tconst otherBvh = otherGeometry.boundsTree;\n\t\t\t\t\t\treturn otherBvh.shapecast( {\n\t\t\t\t\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\t\t\t\t\treturn obb2$2.distanceToBox( box );\n\n\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\t\t\t\t\treturn score < closestDistance && score < maxThreshold;\n\n\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\tintersectsRange: ( otherOffset, otherCount ) => {\n\n\t\t\t\t\t\t\t\tfor ( let i2 = otherOffset, l2 = otherOffset + otherCount; i2 < l2; i2 ++ ) {\n\n\n\t\t\t\t\t\t\t\t\tsetTriangle( triangle2, 3 * i2, otherIndex, otherPos );\n\n\t\t\t\t\t\t\t\t\ttriangle2.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\t\ttriangle2.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\t\ttriangle2.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\t\t\t\t\tfor ( let i = offset, l = offset + count; i < l; i ++ ) {\n\n\n\t\t\t\t\t\t\t\t\t\tsetTriangle( triangle, 3 * i, index, pos );\n\n\t\t\t\t\t\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\t\t\t\t\t\tconst dist = triangle.distanceToTriangle( triangle2, tempTarget1, tempTarget2 );\n\t\t\t\t\t\t\t\t\t\tif ( dist < closestDistance ) {\n\n\t\t\t\t\t\t\t\t\t\t\ttempTargetDest1.copy( tempTarget1 );\n\n\t\t\t\t\t\t\t\t\t\t\tif ( tempTargetDest2 ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\ttempTargetDest2.copy( tempTarget2 );\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tclosestDistance = dist;\n\t\t\t\t\t\t\t\t\t\t\tclosestDistanceTriIndex = i;\n\t\t\t\t\t\t\t\t\t\t\tclosestDistanceOtherTriIndex = i2;\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// stop traversal if we find a point that's under the given threshold\n\t\t\t\t\t\t\t\t\t\tif ( dist < minThreshold ) {\n\n\t\t\t\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// If no bounds tree then we'll just check every triangle.\n\t\t\t\t\t\tconst triCount = getTriCount( otherGeometry );\n\t\t\t\t\t\tfor ( let i2 = 0, l2 = triCount; i2 < l2; i2 ++ ) {\n\n\t\t\t\t\t\t\tsetTriangle( triangle2, 3 * i2, otherIndex, otherPos );\n\t\t\t\t\t\t\ttriangle2.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\ttriangle2.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\ttriangle2.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\t\t\tfor ( let i = offset, l = offset + count; i < l; i ++ ) {\n\n\n\t\t\t\t\t\t\t\tsetTriangle( triangle, 3 * i, index, pos );\n\n\t\t\t\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\t\t\t\tconst dist = triangle.distanceToTriangle( triangle2, tempTarget1, tempTarget2 );\n\t\t\t\t\t\t\t\tif ( dist < closestDistance ) {\n\n\t\t\t\t\t\t\t\t\ttempTargetDest1.copy( tempTarget1 );\n\n\t\t\t\t\t\t\t\t\tif ( tempTargetDest2 ) {\n\n\t\t\t\t\t\t\t\t\t\ttempTargetDest2.copy( tempTarget2 );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tclosestDistance = dist;\n\t\t\t\t\t\t\t\t\tclosestDistanceTriIndex = i;\n\t\t\t\t\t\t\t\t\tclosestDistanceOtherTriIndex = i2;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// stop traversal if we find a point that's under the given threshold\n\t\t\t\t\t\t\t\tif ( dist < minThreshold ) {\n\n\t\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t}\n\n\t\t);\n\n\t\tExtendedTrianglePool.releasePrimitive( triangle );\n\t\tExtendedTrianglePool.releasePrimitive( triangle2 );\n\n\t\tif ( closestDistance === Infinity ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( ! target1.point ) {\n\n\t\t\ttarget1.point = tempTargetDest1.clone();\n\n\t\t} else {\n\n\t\t\ttarget1.point.copy( tempTargetDest1 );\n\n\t\t}\n\n\t\ttarget1.distance = closestDistance,\n\t\ttarget1.faceIndex = closestDistanceTriIndex;\n\n\t\tif ( target2 ) {\n\n\t\t\tif ( ! target2.point ) target2.point = tempTargetDest2.clone();\n\t\t\telse target2.point.copy( tempTargetDest2 );\n\t\t\ttarget2.point.applyMatrix4( tempMatrix$1 );\n\t\t\ttempTargetDest1.applyMatrix4( tempMatrix$1 );\n\t\t\ttarget2.distance = tempTargetDest1.sub( target2.point ).length();\n\t\t\ttarget2.faceIndex = closestDistanceOtherTriIndex;\n\n\t\t}\n\n\t\treturn target1;\n\n\t}\n\n\t/****************************************************/\n\t/* This file is generated from \"refit.template.js\". */\n\t/****************************************************/\n\n\tfunction refit_indirect( bvh, nodeIndices = null ) {\n\n\t\tif ( nodeIndices && Array.isArray( nodeIndices ) ) {\n\n\t\t\tnodeIndices = new Set( nodeIndices );\n\n\t\t}\n\n\t\tconst geometry = bvh.geometry;\n\t\tconst indexArr = geometry.index ? geometry.index.array : null;\n\t\tconst posAttr = geometry.attributes.position;\n\n\t\tlet buffer, uint32Array, uint16Array, float32Array;\n\t\tlet byteOffset = 0;\n\t\tconst roots = bvh._roots;\n\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\t\tbuffer = roots[ i ];\n\t\t\tuint32Array = new Uint32Array( buffer );\n\t\t\tuint16Array = new Uint16Array( buffer );\n\t\t\tfloat32Array = new Float32Array( buffer );\n\n\t\t\t_traverse( 0, byteOffset );\n\t\t\tbyteOffset += buffer.byteLength;\n\n\t\t}\n\n\t\tfunction _traverse( node32Index, byteOffset, force = false ) {\n\n\t\t\tconst node16Index = node32Index * 2;\n\t\t\tconst isLeaf = uint16Array[ node16Index + 15 ] === IS_LEAFNODE_FLAG;\n\t\t\tif ( isLeaf ) {\n\n\t\t\t\tconst offset = uint32Array[ node32Index + 6 ];\n\t\t\t\tconst count = uint16Array[ node16Index + 14 ];\n\n\t\t\t\tlet minx = Infinity;\n\t\t\t\tlet miny = Infinity;\n\t\t\t\tlet minz = Infinity;\n\t\t\t\tlet maxx = - Infinity;\n\t\t\t\tlet maxy = - Infinity;\n\t\t\t\tlet maxz = - Infinity;\n\n\t\t\t\tfor ( let i = offset, l = offset + count; i < l; i ++ ) {\n\n\t\t\t\t\tconst t = 3 * bvh.resolveTriangleIndex( i );\n\t\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\tlet index = t + j;\n\t\t\t\t\t\tindex = indexArr ? indexArr[ index ] : index;\n\n\t\t\t\t\t\tconst x = posAttr.getX( index );\n\t\t\t\t\t\tconst y = posAttr.getY( index );\n\t\t\t\t\t\tconst z = posAttr.getZ( index );\n\n\t\t\t\t\t\tif ( x < minx ) minx = x;\n\t\t\t\t\t\tif ( x > maxx ) maxx = x;\n\n\t\t\t\t\t\tif ( y < miny ) miny = y;\n\t\t\t\t\t\tif ( y > maxy ) maxy = y;\n\n\t\t\t\t\t\tif ( z < minz ) minz = z;\n\t\t\t\t\t\tif ( z > maxz ) maxz = z;\n\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t\tif (\n\t\t\t\t\tfloat32Array[ node32Index + 0 ] !== minx ||\n\t\t\t\t\tfloat32Array[ node32Index + 1 ] !== miny ||\n\t\t\t\t\tfloat32Array[ node32Index + 2 ] !== minz ||\n\n\t\t\t\t\tfloat32Array[ node32Index + 3 ] !== maxx ||\n\t\t\t\t\tfloat32Array[ node32Index + 4 ] !== maxy ||\n\t\t\t\t\tfloat32Array[ node32Index + 5 ] !== maxz\n\t\t\t\t) {\n\n\t\t\t\t\tfloat32Array[ node32Index + 0 ] = minx;\n\t\t\t\t\tfloat32Array[ node32Index + 1 ] = miny;\n\t\t\t\t\tfloat32Array[ node32Index + 2 ] = minz;\n\n\t\t\t\t\tfloat32Array[ node32Index + 3 ] = maxx;\n\t\t\t\t\tfloat32Array[ node32Index + 4 ] = maxy;\n\t\t\t\t\tfloat32Array[ node32Index + 5 ] = maxz;\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst left = node32Index + 8;\n\t\t\t\tconst right = uint32Array[ node32Index + 6 ];\n\n\t\t\t\t// the identifying node indices provided by the shapecast function include offsets of all\n\t\t\t\t// root buffers to guarantee they're unique between roots so offset left and right indices here.\n\t\t\t\tconst offsetLeft = left + byteOffset;\n\t\t\t\tconst offsetRight = right + byteOffset;\n\t\t\t\tlet forceChildren = force;\n\t\t\t\tlet includesLeft = false;\n\t\t\t\tlet includesRight = false;\n\n\t\t\t\tif ( nodeIndices ) {\n\n\t\t\t\t\t// if we see that neither the left or right child are included in the set that need to be updated\n\t\t\t\t\t// then we assume that all children need to be updated.\n\t\t\t\t\tif ( ! forceChildren ) {\n\n\t\t\t\t\t\tincludesLeft = nodeIndices.has( offsetLeft );\n\t\t\t\t\t\tincludesRight = nodeIndices.has( offsetRight );\n\t\t\t\t\t\tforceChildren = ! includesLeft && ! includesRight;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tincludesLeft = true;\n\t\t\t\t\tincludesRight = true;\n\n\t\t\t\t}\n\n\t\t\t\tconst traverseLeft = forceChildren || includesLeft;\n\t\t\t\tconst traverseRight = forceChildren || includesRight;\n\n\t\t\t\tlet leftChange = false;\n\t\t\t\tif ( traverseLeft ) {\n\n\t\t\t\t\tleftChange = _traverse( left, byteOffset, forceChildren );\n\n\t\t\t\t}\n\n\t\t\t\tlet rightChange = false;\n\t\t\t\tif ( traverseRight ) {\n\n\t\t\t\t\trightChange = _traverse( right, byteOffset, forceChildren );\n\n\t\t\t\t}\n\n\t\t\t\tconst didChange = leftChange || rightChange;\n\t\t\t\tif ( didChange ) {\n\n\t\t\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\t\tconst lefti = left + i;\n\t\t\t\t\t\tconst righti = right + i;\n\t\t\t\t\t\tconst minLeftValue = float32Array[ lefti ];\n\t\t\t\t\t\tconst maxLeftValue = float32Array[ lefti + 3 ];\n\t\t\t\t\t\tconst minRightValue = float32Array[ righti ];\n\t\t\t\t\t\tconst maxRightValue = float32Array[ righti + 3 ];\n\n\t\t\t\t\t\tfloat32Array[ node32Index + i ] = minLeftValue < minRightValue ? minLeftValue : minRightValue;\n\t\t\t\t\t\tfloat32Array[ node32Index + i + 3 ] = maxLeftValue > maxRightValue ? maxLeftValue : maxRightValue;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn didChange;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/******************************************************/\n\t/* This file is generated from \"raycast.template.js\". */\n\t/******************************************************/\n\n\tconst _boxIntersection$1 = /* @__PURE__ */ new three.Vector3();\n\tfunction raycast_indirect( bvh, root, side, ray, intersects ) {\n\n\t\tBufferStack.setBuffer( bvh._roots[ root ] );\n\t\t_raycast( 0, bvh, side, ray, intersects );\n\t\tBufferStack.clearBuffer();\n\n\t}\n\n\tfunction _raycast( nodeIndex32, bvh, side, ray, intersects ) {\n\n\t\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\t\tconst nodeIndex16 = nodeIndex32 * 2;\n\t\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\t\tif ( isLeaf ) {\n\n\t\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\t\t\tintersectTris_indirect( bvh, side, ray, offset, count, intersects );\n\n\n\t\t} else {\n\n\t\t\tconst leftIndex = LEFT_NODE( nodeIndex32 );\n\t\t\tif ( intersectRay( leftIndex, float32Array, ray, _boxIntersection$1 ) ) {\n\n\t\t\t\t_raycast( leftIndex, bvh, side, ray, intersects );\n\n\t\t\t}\n\n\t\t\tconst rightIndex = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\t\tif ( intersectRay( rightIndex, float32Array, ray, _boxIntersection$1 ) ) {\n\n\t\t\t\t_raycast( rightIndex, bvh, side, ray, intersects );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/***********************************************************/\n\t/* This file is generated from \"raycastFirst.template.js\". */\n\t/***********************************************************/\n\tconst _boxIntersection = /* @__PURE__ */ new three.Vector3();\n\tconst _xyzFields = [ 'x', 'y', 'z' ];\n\tfunction raycastFirst_indirect( bvh, root, side, ray ) {\n\n\t\tBufferStack.setBuffer( bvh._roots[ root ] );\n\t\tconst result = _raycastFirst( 0, bvh, side, ray );\n\t\tBufferStack.clearBuffer();\n\n\t\treturn result;\n\n\t}\n\n\tfunction _raycastFirst( nodeIndex32, bvh, side, ray ) {\n\n\t\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\t\tlet nodeIndex16 = nodeIndex32 * 2;\n\n\t\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\t\tif ( isLeaf ) {\n\n\t\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\t\t\treturn intersectClosestTri_indirect( bvh, side, ray, offset, count );\n\n\n\t\t} else {\n\n\t\t\t// consider the position of the split plane with respect to the oncoming ray; whichever direction\n\t\t\t// the ray is coming from, look for an intersection among that side of the tree first\n\t\t\tconst splitAxis = SPLIT_AXIS( nodeIndex32, uint32Array );\n\t\t\tconst xyzAxis = _xyzFields[ splitAxis ];\n\t\t\tconst rayDir = ray.direction[ xyzAxis ];\n\t\t\tconst leftToRight = rayDir >= 0;\n\n\t\t\t// c1 is the child to check first\n\t\t\tlet c1, c2;\n\t\t\tif ( leftToRight ) {\n\n\t\t\t\tc1 = LEFT_NODE( nodeIndex32 );\n\t\t\t\tc2 = RIGHT_NODE( nodeIndex32, uint32Array );\n\n\t\t\t} else {\n\n\t\t\t\tc1 = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\t\t\tc2 = LEFT_NODE( nodeIndex32 );\n\n\t\t\t}\n\n\t\t\tconst c1Intersection = intersectRay( c1, float32Array, ray, _boxIntersection );\n\t\t\tconst c1Result = c1Intersection ? _raycastFirst( c1, bvh, side, ray ) : null;\n\n\t\t\t// if we got an intersection in the first node and it's closer than the second node's bounding\n\t\t\t// box, we don't need to consider the second node because it couldn't possibly be a better result\n\t\t\tif ( c1Result ) {\n\n\t\t\t\t// check if the point is within the second bounds\n\t\t\t\t// \"point\" is in the local frame of the bvh\n\t\t\t\tconst point = c1Result.point[ xyzAxis ];\n\t\t\t\tconst isOutside = leftToRight ?\n\t\t\t\t\tpoint <= float32Array[ c2 + splitAxis ] : // min bounding data\n\t\t\t\t\tpoint >= float32Array[ c2 + splitAxis + 3 ]; // max bounding data\n\n\t\t\t\tif ( isOutside ) {\n\n\t\t\t\t\treturn c1Result;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// either there was no intersection in the first node, or there could still be a closer\n\t\t\t// intersection in the second, so check the second node and then take the better of the two\n\t\t\tconst c2Intersection = intersectRay( c2, float32Array, ray, _boxIntersection );\n\t\t\tconst c2Result = c2Intersection ? _raycastFirst( c2, bvh, side, ray ) : null;\n\n\t\t\tif ( c1Result && c2Result ) {\n\n\t\t\t\treturn c1Result.distance <= c2Result.distance ? c1Result : c2Result;\n\n\t\t\t} else {\n\n\t\t\t\treturn c1Result || c2Result || null;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/*****************************************************************/\n\t/* This file is generated from \"intersectsGeometry.template.js\". */\n\t/*****************************************************************/\n\t/* eslint-disable indent */\n\n\tconst boundingBox$1 = /* @__PURE__ */ new three.Box3();\n\tconst triangle = /* @__PURE__ */ new ExtendedTriangle();\n\tconst triangle2 = /* @__PURE__ */ new ExtendedTriangle();\n\tconst invertedMat = /* @__PURE__ */ new three.Matrix4();\n\n\tconst obb$2 = /* @__PURE__ */ new OrientedBox();\n\tconst obb2$1 = /* @__PURE__ */ new OrientedBox();\n\n\tfunction intersectsGeometry_indirect( bvh, root, otherGeometry, geometryToBvh ) {\n\n\t\tBufferStack.setBuffer( bvh._roots[ root ] );\n\t\tconst result = _intersectsGeometry( 0, bvh, otherGeometry, geometryToBvh );\n\t\tBufferStack.clearBuffer();\n\n\t\treturn result;\n\n\t}\n\n\tfunction _intersectsGeometry( nodeIndex32, bvh, otherGeometry, geometryToBvh, cachedObb = null ) {\n\n\t\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\t\tlet nodeIndex16 = nodeIndex32 * 2;\n\n\t\tif ( cachedObb === null ) {\n\n\t\t\tif ( ! otherGeometry.boundingBox ) {\n\n\t\t\t\totherGeometry.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tobb$2.set( otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh );\n\t\t\tcachedObb = obb$2;\n\n\t\t}\n\n\t\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\t\tif ( isLeaf ) {\n\n\t\t\tconst thisGeometry = bvh.geometry;\n\t\t\tconst thisIndex = thisGeometry.index;\n\t\t\tconst thisPos = thisGeometry.attributes.position;\n\n\t\t\tconst index = otherGeometry.index;\n\t\t\tconst pos = otherGeometry.attributes.position;\n\n\t\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\t\t\t// get the inverse of the geometry matrix so we can transform our triangles into the\n\t\t\t// geometry space we're trying to test. We assume there are fewer triangles being checked\n\t\t\t// here.\n\t\t\tinvertedMat.copy( geometryToBvh ).invert();\n\n\t\t\tif ( otherGeometry.boundsTree ) {\n\n\t\t\t\t// if there's a bounds tree\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( nodeIndex32 ), float32Array, obb2$1 );\n\t\t\t\tobb2$1.matrix.copy( invertedMat );\n\t\t\t\tobb2$1.needsUpdate = true;\n\n\t\t\t\t// TODO: use a triangle iteration function here\n\t\t\t\tconst res = otherGeometry.boundsTree.shapecast( {\n\n\t\t\t\t\tintersectsBounds: box => obb2$1.intersectsBox( box ),\n\n\t\t\t\t\tintersectsTriangle: tri => {\n\n\t\t\t\t\t\ttri.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttri.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttri.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttri.needsUpdate = true;\n\n\t\t\t\t\t\tfor ( let i = offset, l = count + offset; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t// this triangle needs to be transformed into the current BVH coordinate frame\n\t\t\t\t\t\t\tsetTriangle( triangle2, 3 * bvh.resolveTriangleIndex( i ), thisIndex, thisPos );\n\t\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\t\t\t\t\t\t\tif ( tri.intersectsTriangle( triangle2 ) ) {\n\n\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\treturn res;\n\n\t\t\t} else {\n\n\t\t\t\t// if we're just dealing with raw geometry\n\t\t\t\tfor ( let i = offset, l = count + offset; i < l; i ++ ) {\n\n\t\t\t\t\t// this triangle needs to be transformed into the current BVH coordinate frame\n\t\t\t\t\tconst ti = bvh.resolveTriangleIndex( i );\n\t\t\t\t\tsetTriangle( triangle, 3 * ti, thisIndex, thisPos );\n\n\n\t\t\t\t\ttriangle.a.applyMatrix4( invertedMat );\n\t\t\t\t\ttriangle.b.applyMatrix4( invertedMat );\n\t\t\t\t\ttriangle.c.applyMatrix4( invertedMat );\n\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\tfor ( let i2 = 0, l2 = index.count; i2 < l2; i2 += 3 ) {\n\n\t\t\t\t\t\tsetTriangle( triangle2, i2, index, pos );\n\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\t\tif ( triangle.intersectsTriangle( triangle2 ) ) {\n\n\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst left = nodeIndex32 + 8;\n\t\t\tconst right = uint32Array[ nodeIndex32 + 6 ];\n\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( left ), float32Array, boundingBox$1 );\n\t\t\tconst leftIntersection =\n\t\t\t\tcachedObb.intersectsBox( boundingBox$1 ) &&\n\t\t\t\t_intersectsGeometry( left, bvh, otherGeometry, geometryToBvh, cachedObb );\n\n\t\t\tif ( leftIntersection ) return true;\n\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( right ), float32Array, boundingBox$1 );\n\t\t\tconst rightIntersection =\n\t\t\t\tcachedObb.intersectsBox( boundingBox$1 ) &&\n\t\t\t\t_intersectsGeometry( right, bvh, otherGeometry, geometryToBvh, cachedObb );\n\n\t\t\tif ( rightIntersection ) return true;\n\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\t/*********************************************************************/\n\t/* This file is generated from \"closestPointToGeometry.template.js\". */\n\t/*********************************************************************/\n\n\tconst tempMatrix = /* @__PURE__ */ new three.Matrix4();\n\tconst obb$1 = /* @__PURE__ */ new OrientedBox();\n\tconst obb2 = /* @__PURE__ */ new OrientedBox();\n\tconst temp1 = /* @__PURE__ */ new three.Vector3();\n\tconst temp2 = /* @__PURE__ */ new three.Vector3();\n\tconst temp3 = /* @__PURE__ */ new three.Vector3();\n\tconst temp4 = /* @__PURE__ */ new three.Vector3();\n\n\tfunction closestPointToGeometry_indirect(\n\t\tbvh,\n\t\totherGeometry,\n\t\tgeometryToBvh,\n\t\ttarget1 = { },\n\t\ttarget2 = { },\n\t\tminThreshold = 0,\n\t\tmaxThreshold = Infinity,\n\t) {\n\n\t\tif ( ! otherGeometry.boundingBox ) {\n\n\t\t\totherGeometry.computeBoundingBox();\n\n\t\t}\n\n\t\tobb$1.set( otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh );\n\t\tobb$1.needsUpdate = true;\n\n\t\tconst geometry = bvh.geometry;\n\t\tconst pos = geometry.attributes.position;\n\t\tconst index = geometry.index;\n\t\tconst otherPos = otherGeometry.attributes.position;\n\t\tconst otherIndex = otherGeometry.index;\n\t\tconst triangle = ExtendedTrianglePool.getPrimitive();\n\t\tconst triangle2 = ExtendedTrianglePool.getPrimitive();\n\n\t\tlet tempTarget1 = temp1;\n\t\tlet tempTargetDest1 = temp2;\n\t\tlet tempTarget2 = null;\n\t\tlet tempTargetDest2 = null;\n\n\t\tif ( target2 ) {\n\n\t\t\ttempTarget2 = temp3;\n\t\t\ttempTargetDest2 = temp4;\n\n\t\t}\n\n\t\tlet closestDistance = Infinity;\n\t\tlet closestDistanceTriIndex = null;\n\t\tlet closestDistanceOtherTriIndex = null;\n\t\ttempMatrix.copy( geometryToBvh ).invert();\n\t\tobb2.matrix.copy( tempMatrix );\n\t\tbvh.shapecast(\n\t\t\t{\n\n\t\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\t\treturn obb$1.distanceToBox( box );\n\n\t\t\t\t},\n\n\t\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\t\tif ( score < closestDistance && score < maxThreshold ) {\n\n\t\t\t\t\t\t// if we know the triangles of this bounds will be intersected next then\n\t\t\t\t\t\t// save the bounds to use during triangle checks.\n\t\t\t\t\t\tif ( isLeaf ) {\n\n\t\t\t\t\t\t\tobb2.min.copy( box.min );\n\t\t\t\t\t\t\tobb2.max.copy( box.max );\n\t\t\t\t\t\t\tobb2.needsUpdate = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t},\n\n\t\t\t\tintersectsRange: ( offset, count ) => {\n\n\t\t\t\t\tif ( otherGeometry.boundsTree ) {\n\n\t\t\t\t\t\t// if the other geometry has a bvh then use the accelerated path where we use shapecast to find\n\t\t\t\t\t\t// the closest bounds in the other geometry to check.\n\t\t\t\t\t\tconst otherBvh = otherGeometry.boundsTree;\n\t\t\t\t\t\treturn otherBvh.shapecast( {\n\t\t\t\t\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\t\t\t\t\treturn obb2.distanceToBox( box );\n\n\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\t\t\t\t\treturn score < closestDistance && score < maxThreshold;\n\n\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\tintersectsRange: ( otherOffset, otherCount ) => {\n\n\t\t\t\t\t\t\t\tfor ( let i2 = otherOffset, l2 = otherOffset + otherCount; i2 < l2; i2 ++ ) {\n\n\t\t\t\t\t\t\t\t\tconst ti2 = otherBvh.resolveTriangleIndex( i2 );\n\t\t\t\t\t\t\t\t\tsetTriangle( triangle2, 3 * ti2, otherIndex, otherPos );\n\n\t\t\t\t\t\t\t\t\ttriangle2.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\t\ttriangle2.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\t\ttriangle2.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\t\t\t\t\tfor ( let i = offset, l = offset + count; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\t\t\tconst ti = bvh.resolveTriangleIndex( i );\n\t\t\t\t\t\t\t\t\t\tsetTriangle( triangle, 3 * ti, index, pos );\n\n\t\t\t\t\t\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\t\t\t\t\t\tconst dist = triangle.distanceToTriangle( triangle2, tempTarget1, tempTarget2 );\n\t\t\t\t\t\t\t\t\t\tif ( dist < closestDistance ) {\n\n\t\t\t\t\t\t\t\t\t\t\ttempTargetDest1.copy( tempTarget1 );\n\n\t\t\t\t\t\t\t\t\t\t\tif ( tempTargetDest2 ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\ttempTargetDest2.copy( tempTarget2 );\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tclosestDistance = dist;\n\t\t\t\t\t\t\t\t\t\t\tclosestDistanceTriIndex = i;\n\t\t\t\t\t\t\t\t\t\t\tclosestDistanceOtherTriIndex = i2;\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// stop traversal if we find a point that's under the given threshold\n\t\t\t\t\t\t\t\t\t\tif ( dist < minThreshold ) {\n\n\t\t\t\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// If no bounds tree then we'll just check every triangle.\n\t\t\t\t\t\tconst triCount = getTriCount( otherGeometry );\n\t\t\t\t\t\tfor ( let i2 = 0, l2 = triCount; i2 < l2; i2 ++ ) {\n\n\t\t\t\t\t\t\tsetTriangle( triangle2, 3 * i2, otherIndex, otherPos );\n\t\t\t\t\t\t\ttriangle2.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\ttriangle2.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\ttriangle2.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\t\t\tfor ( let i = offset, l = offset + count; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tconst ti = bvh.resolveTriangleIndex( i );\n\t\t\t\t\t\t\t\tsetTriangle( triangle, 3 * ti, index, pos );\n\n\t\t\t\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\t\t\t\tconst dist = triangle.distanceToTriangle( triangle2, tempTarget1, tempTarget2 );\n\t\t\t\t\t\t\t\tif ( dist < closestDistance ) {\n\n\t\t\t\t\t\t\t\t\ttempTargetDest1.copy( tempTarget1 );\n\n\t\t\t\t\t\t\t\t\tif ( tempTargetDest2 ) {\n\n\t\t\t\t\t\t\t\t\t\ttempTargetDest2.copy( tempTarget2 );\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tclosestDistance = dist;\n\t\t\t\t\t\t\t\t\tclosestDistanceTriIndex = i;\n\t\t\t\t\t\t\t\t\tclosestDistanceOtherTriIndex = i2;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// stop traversal if we find a point that's under the given threshold\n\t\t\t\t\t\t\t\tif ( dist < minThreshold ) {\n\n\t\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t}\n\n\t\t);\n\n\t\tExtendedTrianglePool.releasePrimitive( triangle );\n\t\tExtendedTrianglePool.releasePrimitive( triangle2 );\n\n\t\tif ( closestDistance === Infinity ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( ! target1.point ) {\n\n\t\t\ttarget1.point = tempTargetDest1.clone();\n\n\t\t} else {\n\n\t\t\ttarget1.point.copy( tempTargetDest1 );\n\n\t\t}\n\n\t\ttarget1.distance = closestDistance,\n\t\ttarget1.faceIndex = closestDistanceTriIndex;\n\n\t\tif ( target2 ) {\n\n\t\t\tif ( ! target2.point ) target2.point = tempTargetDest2.clone();\n\t\t\telse target2.point.copy( tempTargetDest2 );\n\t\t\ttarget2.point.applyMatrix4( tempMatrix );\n\t\t\ttempTargetDest1.applyMatrix4( tempMatrix );\n\t\t\ttarget2.distance = tempTargetDest1.sub( target2.point ).length();\n\t\t\ttarget2.faceIndex = closestDistanceOtherTriIndex;\n\n\t\t}\n\n\t\treturn target1;\n\n\t}\n\n\tfunction isSharedArrayBufferSupported() {\n\n\t\treturn typeof SharedArrayBuffer !== 'undefined';\n\n\t}\n\n\tconst _bufferStack1 = new BufferStack.constructor();\n\tconst _bufferStack2 = new BufferStack.constructor();\n\tconst _boxPool = new PrimitivePool( () => new three.Box3() );\n\tconst _leftBox1 = new three.Box3();\n\tconst _rightBox1 = new three.Box3();\n\n\tconst _leftBox2 = new three.Box3();\n\tconst _rightBox2 = new three.Box3();\n\n\tlet _active = false;\n\n\tfunction bvhcast( bvh, otherBvh, matrixToLocal, intersectsRanges ) {\n\n\t\tif ( _active ) {\n\n\t\t\tthrow new Error( 'MeshBVH: Recursive calls to bvhcast not supported.' );\n\n\t\t}\n\n\t\t_active = true;\n\n\t\tconst roots = bvh._roots;\n\t\tconst otherRoots = otherBvh._roots;\n\t\tlet result;\n\t\tlet offset1 = 0;\n\t\tlet offset2 = 0;\n\t\tconst invMat = new three.Matrix4().copy( matrixToLocal ).invert();\n\n\t\t// iterate over the first set of roots\n\t\tfor ( let i = 0, il = roots.length; i < il; i ++ ) {\n\n\t\t\t_bufferStack1.setBuffer( roots[ i ] );\n\t\t\toffset2 = 0;\n\n\t\t\t// prep the initial root box\n\t\t\tconst localBox = _boxPool.getPrimitive();\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( 0 ), _bufferStack1.float32Array, localBox );\n\t\t\tlocalBox.applyMatrix4( invMat );\n\n\t\t\t// iterate over the second set of roots\n\t\t\tfor ( let j = 0, jl = otherRoots.length; j < jl; j ++ ) {\n\n\t\t\t\t_bufferStack2.setBuffer( otherRoots[ i ] );\n\n\t\t\t\tresult = _traverse(\n\t\t\t\t\t0, 0, matrixToLocal, invMat, intersectsRanges,\n\t\t\t\t\toffset1, offset2, 0, 0,\n\t\t\t\t\tlocalBox,\n\t\t\t\t);\n\n\t\t\t\t_bufferStack2.clearBuffer();\n\t\t\t\toffset2 += otherRoots[ j ].length;\n\n\t\t\t\tif ( result ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// release stack info\n\t\t\t_boxPool.releasePrimitive( localBox );\n\t\t\t_bufferStack1.clearBuffer();\n\t\t\toffset1 += roots[ i ].length;\n\n\t\t\tif ( result ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\t_active = false;\n\t\treturn result;\n\n\t}\n\n\tfunction _traverse(\n\t\tnode1Index32,\n\t\tnode2Index32,\n\t\tmatrix2to1,\n\t\tmatrix1to2,\n\t\tintersectsRangesFunc,\n\n\t\t// offsets for ids\n\t\tnode1IndexByteOffset = 0,\n\t\tnode2IndexByteOffset = 0,\n\n\t\t// tree depth\n\t\tdepth1 = 0,\n\t\tdepth2 = 0,\n\n\t\tcurrBox = null,\n\t\treversed = false,\n\n\t) {\n\n\t\t// get the buffer stacks associated with the current indices\n\t\tlet bufferStack1, bufferStack2;\n\t\tif ( reversed ) {\n\n\t\t\tbufferStack1 = _bufferStack2;\n\t\t\tbufferStack2 = _bufferStack1;\n\n\t\t} else {\n\n\t\t\tbufferStack1 = _bufferStack1;\n\t\t\tbufferStack2 = _bufferStack2;\n\n\t\t}\n\n\t\t// get the local instances of the typed buffers\n\t\tconst\n\t\t\tfloat32Array1 = bufferStack1.float32Array,\n\t\t\tuint32Array1 = bufferStack1.uint32Array,\n\t\t\tuint16Array1 = bufferStack1.uint16Array,\n\t\t\tfloat32Array2 = bufferStack2.float32Array,\n\t\t\tuint32Array2 = bufferStack2.uint32Array,\n\t\t\tuint16Array2 = bufferStack2.uint16Array;\n\n\t\tconst node1Index16 = node1Index32 * 2;\n\t\tconst node2Index16 = node2Index32 * 2;\n\t\tconst isLeaf1 = IS_LEAF( node1Index16, uint16Array1 );\n\t\tconst isLeaf2 = IS_LEAF( node2Index16, uint16Array2 );\n\t\tlet result = false;\n\t\tif ( isLeaf2 && isLeaf1 ) {\n\n\t\t\t// if both bounds are leaf nodes then fire the callback if the boxes intersect\n\t\t\tif ( reversed ) {\n\n\t\t\t\tresult = intersectsRangesFunc(\n\t\t\t\t\tOFFSET( node2Index32, uint32Array2 ), COUNT( node2Index32 * 2, uint16Array2 ),\n\t\t\t\t\tOFFSET( node1Index32, uint32Array1 ), COUNT( node1Index32 * 2, uint16Array1 ),\n\t\t\t\t\tdepth2, node2IndexByteOffset + node2Index32,\n\t\t\t\t\tdepth1, node1IndexByteOffset + node1Index32,\n\t\t\t\t);\n\n\t\t\t} else {\n\n\t\t\t\tresult = intersectsRangesFunc(\n\t\t\t\t\tOFFSET( node1Index32, uint32Array1 ), COUNT( node1Index32 * 2, uint16Array1 ),\n\t\t\t\t\tOFFSET( node2Index32, uint32Array2 ), COUNT( node2Index32 * 2, uint16Array2 ),\n\t\t\t\t\tdepth1, node1IndexByteOffset + node1Index32,\n\t\t\t\t\tdepth2, node2IndexByteOffset + node2Index32,\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t} else if ( isLeaf2 ) {\n\n\t\t\t// SWAP\n\t\t\t// If we've traversed to the leaf node on the other bvh then we need to swap over\n\t\t\t// to traverse down the first one\n\n\t\t\t// get the new box to use\n\t\t\tconst newBox = _boxPool.getPrimitive();\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( node2Index32 ), float32Array2, newBox );\n\t\t\tnewBox.applyMatrix4( matrix2to1 );\n\n\t\t\t// get the child bounds to check before traversal\n\t\t\tconst cl1 = LEFT_NODE( node1Index32 );\n\t\t\tconst cr1 = RIGHT_NODE( node1Index32, uint32Array1 );\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( cl1 ), float32Array1, _leftBox1 );\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( cr1 ), float32Array1, _rightBox1 );\n\n\t\t\t// precompute the intersections otherwise the global boxes will be modified during traversal\n\t\t\tconst intersectCl1 = newBox.intersectsBox( _leftBox1 );\n\t\t\tconst intersectCr1 = newBox.intersectsBox( _rightBox1 );\n\t\t\tresult = (\n\t\t\t\tintersectCl1 && _traverse(\n\t\t\t\t\tnode2Index32, cl1, matrix1to2, matrix2to1, intersectsRangesFunc,\n\t\t\t\t\tnode2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1,\n\t\t\t\t\tnewBox, ! reversed,\n\t\t\t\t)\n\t\t\t) || (\n\t\t\t\tintersectCr1 && _traverse(\n\t\t\t\t\tnode2Index32, cr1, matrix1to2, matrix2to1, intersectsRangesFunc,\n\t\t\t\t\tnode2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1,\n\t\t\t\t\tnewBox, ! reversed,\n\t\t\t\t)\n\t\t\t);\n\n\t\t\t_boxPool.releasePrimitive( newBox );\n\n\t\t} else {\n\n\t\t\t// if neither are leaves then we should swap if one of the children does not\n\t\t\t// intersect with the current bounds\n\n\t\t\t// get the child bounds to check\n\t\t\tconst cl2 = LEFT_NODE( node2Index32 );\n\t\t\tconst cr2 = RIGHT_NODE( node2Index32, uint32Array2 );\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( cl2 ), float32Array2, _leftBox2 );\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( cr2 ), float32Array2, _rightBox2 );\n\n\t\t\tconst leftIntersects = currBox.intersectsBox( _leftBox2 );\n\t\t\tconst rightIntersects = currBox.intersectsBox( _rightBox2 );\n\t\t\tif ( leftIntersects && rightIntersects ) {\n\n\t\t\t\t// continue to traverse both children if they both intersect\n\t\t\t\tresult = _traverse(\n\t\t\t\t\tnode1Index32, cl2, matrix2to1, matrix1to2, intersectsRangesFunc,\n\t\t\t\t\tnode1IndexByteOffset, node2IndexByteOffset, depth1, depth2 + 1,\n\t\t\t\t\tcurrBox, reversed,\n\t\t\t\t) || _traverse(\n\t\t\t\t\tnode1Index32, cr2, matrix2to1, matrix1to2, intersectsRangesFunc,\n\t\t\t\t\tnode1IndexByteOffset, node2IndexByteOffset, depth1, depth2 + 1,\n\t\t\t\t\tcurrBox, reversed,\n\t\t\t\t);\n\n\t\t\t} else if ( leftIntersects ) {\n\n\t\t\t\tif ( isLeaf1 ) {\n\n\t\t\t\t\t// if the current box is a leaf then just continue\n\t\t\t\t\tresult = _traverse(\n\t\t\t\t\t\tnode1Index32, cl2, matrix2to1, matrix1to2, intersectsRangesFunc,\n\t\t\t\t\t\tnode1IndexByteOffset, node2IndexByteOffset, depth1, depth2 + 1,\n\t\t\t\t\t\tcurrBox, reversed,\n\t\t\t\t\t);\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// SWAP\n\t\t\t\t\t// if only one box intersects then we have to swap to the other bvh to continue\n\t\t\t\t\tconst newBox = _boxPool.getPrimitive();\n\t\t\t\t\tnewBox.copy( _leftBox2 ).applyMatrix4( matrix2to1 );\n\n\t\t\t\t\tconst cl1 = LEFT_NODE( node1Index32 );\n\t\t\t\t\tconst cr1 = RIGHT_NODE( node1Index32, uint32Array1 );\n\t\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( cl1 ), float32Array1, _leftBox1 );\n\t\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( cr1 ), float32Array1, _rightBox1 );\n\n\t\t\t\t\t// precompute the intersections otherwise the global boxes will be modified during traversal\n\t\t\t\t\tconst intersectCl1 = newBox.intersectsBox( _leftBox1 );\n\t\t\t\t\tconst intersectCr1 = newBox.intersectsBox( _rightBox1 );\n\t\t\t\t\tresult = (\n\t\t\t\t\t\tintersectCl1 && _traverse(\n\t\t\t\t\t\t\tcl2, cl1, matrix1to2, matrix2to1, intersectsRangesFunc,\n\t\t\t\t\t\t\tnode2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1,\n\t\t\t\t\t\t\tnewBox, ! reversed,\n\t\t\t\t\t\t)\n\t\t\t\t\t) || (\n\t\t\t\t\t\tintersectCr1 && _traverse(\n\t\t\t\t\t\t\tcl2, cr1, matrix1to2, matrix2to1, intersectsRangesFunc,\n\t\t\t\t\t\t\tnode2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1,\n\t\t\t\t\t\t\tnewBox, ! reversed,\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\n\t\t\t\t\t_boxPool.releasePrimitive( newBox );\n\n\t\t\t\t}\n\n\t\t\t} else if ( rightIntersects ) {\n\n\t\t\t\tif ( isLeaf1 ) {\n\n\t\t\t\t\t// if the current box is a leaf then just continue\n\t\t\t\t\tresult = _traverse(\n\t\t\t\t\t\tnode1Index32, cr2, matrix2to1, matrix1to2, intersectsRangesFunc,\n\t\t\t\t\t\tnode1IndexByteOffset, node2IndexByteOffset, depth1, depth2 + 1,\n\t\t\t\t\t\tcurrBox, reversed,\n\t\t\t\t\t);\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// SWAP\n\t\t\t\t\t// if only one box intersects then we have to swap to the other bvh to continue\n\t\t\t\t\tconst newBox = _boxPool.getPrimitive();\n\t\t\t\t\tnewBox.copy( _rightBox2 ).applyMatrix4( matrix2to1 );\n\n\t\t\t\t\tconst cl1 = LEFT_NODE( node1Index32 );\n\t\t\t\t\tconst cr1 = RIGHT_NODE( node1Index32, uint32Array1 );\n\t\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( cl1 ), float32Array1, _leftBox1 );\n\t\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( cr1 ), float32Array1, _rightBox1 );\n\n\t\t\t\t\t// precompute the intersections otherwise the global boxes will be modified during traversal\n\t\t\t\t\tconst intersectCl1 = newBox.intersectsBox( _leftBox1 );\n\t\t\t\t\tconst intersectCr1 = newBox.intersectsBox( _rightBox1 );\n\t\t\t\t\tresult = (\n\t\t\t\t\t\tintersectCl1 && _traverse(\n\t\t\t\t\t\t\tcr2, cl1, matrix1to2, matrix2to1, intersectsRangesFunc,\n\t\t\t\t\t\t\tnode2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1,\n\t\t\t\t\t\t\tnewBox, ! reversed,\n\t\t\t\t\t\t)\n\t\t\t\t\t) || (\n\t\t\t\t\t\tintersectCr1 && _traverse(\n\t\t\t\t\t\t\tcr2, cr1, matrix1to2, matrix2to1, intersectsRangesFunc,\n\t\t\t\t\t\t\tnode2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1,\n\t\t\t\t\t\t\tnewBox, ! reversed,\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\n\t\t\t\t\t_boxPool.releasePrimitive( newBox );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tconst obb = /* @__PURE__ */ new OrientedBox();\n\tconst tempBox = /* @__PURE__ */ new three.Box3();\n\n\tclass MeshBVH {\n\n\t\tstatic serialize( bvh, options = {} ) {\n\n\t\t\toptions = {\n\t\t\t\tcloneBuffers: true,\n\t\t\t\t...options,\n\t\t\t};\n\n\t\t\tconst geometry = bvh.geometry;\n\t\t\tconst rootData = bvh._roots;\n\t\t\tconst indirectBuffer = bvh._indirectBuffer;\n\t\t\tconst indexAttribute = geometry.getIndex();\n\t\t\tlet result;\n\t\t\tif ( options.cloneBuffers ) {\n\n\t\t\t\tresult = {\n\t\t\t\t\troots: rootData.map( root => root.slice() ),\n\t\t\t\t\tindex: indexAttribute.array.slice(),\n\t\t\t\t\tindirectBuffer: indirectBuffer ? indirectBuffer.slice() : null,\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tresult = {\n\t\t\t\t\troots: rootData,\n\t\t\t\t\tindex: indexAttribute.array,\n\t\t\t\t\tindirectBuffer: indirectBuffer,\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t\tstatic deserialize( data, geometry, options = {} ) {\n\n\t\t\toptions = {\n\t\t\t\tsetIndex: true,\n\t\t\t\tindirect: Boolean( data.indirectBuffer ),\n\t\t\t\t...options,\n\t\t\t};\n\n\t\t\tconst { index, roots, indirectBuffer } = data;\n\t\t\tconst bvh = new MeshBVH( geometry, { ...options, [ SKIP_GENERATION ]: true } );\n\t\t\tbvh._roots = roots;\n\t\t\tbvh._indirectBuffer = indirectBuffer || null;\n\n\t\t\tif ( options.setIndex ) {\n\n\t\t\t\tconst indexAttribute = geometry.getIndex();\n\t\t\t\tif ( indexAttribute === null ) {\n\n\t\t\t\t\tconst newIndex = new three.BufferAttribute( data.index, 1, false );\n\t\t\t\t\tgeometry.setIndex( newIndex );\n\n\t\t\t\t} else if ( indexAttribute.array !== index ) {\n\n\t\t\t\t\tindexAttribute.array.set( index );\n\t\t\t\t\tindexAttribute.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn bvh;\n\n\t\t}\n\n\t\tget indirect() {\n\n\t\t\treturn ! ! this._indirectBuffer;\n\n\t\t}\n\n\t\tconstructor( geometry, options = {} ) {\n\n\t\t\tif ( ! geometry.isBufferGeometry ) {\n\n\t\t\t\tthrow new Error( 'MeshBVH: Only BufferGeometries are supported.' );\n\n\t\t\t} else if ( geometry.index && geometry.index.isInterleavedBufferAttribute ) {\n\n\t\t\t\tthrow new Error( 'MeshBVH: InterleavedBufferAttribute is not supported for the index attribute.' );\n\n\t\t\t}\n\n\t\t\t// default options\n\t\t\toptions = Object.assign( {\n\n\t\t\t\tstrategy: CENTER,\n\t\t\t\tmaxDepth: 40,\n\t\t\t\tmaxLeafTris: 10,\n\t\t\t\tverbose: true,\n\t\t\t\tuseSharedArrayBuffer: false,\n\t\t\t\tsetBoundingBox: true,\n\t\t\t\tonProgress: null,\n\t\t\t\tindirect: false,\n\n\t\t\t\t// undocumented options\n\n\t\t\t\t// Whether to skip generating the tree. Used for deserialization.\n\t\t\t\t[ SKIP_GENERATION ]: false,\n\n\t\t\t}, options );\n\n\t\t\tif ( options.useSharedArrayBuffer && ! isSharedArrayBufferSupported() ) {\n\n\t\t\t\tthrow new Error( 'MeshBVH: SharedArrayBuffer is not available.' );\n\n\t\t\t}\n\n\t\t\t// retain references to the geometry so we can use them it without having to\n\t\t\t// take a geometry reference in every function.\n\t\t\tthis.geometry = geometry;\n\t\t\tthis._roots = null;\n\t\t\tthis._indirectBuffer = null;\n\t\t\tif ( ! options[ SKIP_GENERATION ] ) {\n\n\t\t\t\tbuildPackedTree( this, options );\n\n\t\t\t\tif ( ! geometry.boundingBox && options.setBoundingBox ) {\n\n\t\t\t\t\tgeometry.boundingBox = this.getBoundingBox( new three.Box3() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst { _indirectBuffer } = this;\n\t\t\tthis.resolveTriangleIndex = options.indirect ? i => _indirectBuffer[ i ] : i => i;\n\n\t\t}\n\n\t\trefit( nodeIndices = null ) {\n\n\t\t\tconst refitFunc = this.indirect ? refit_indirect : refit;\n\t\t\treturn refitFunc( this, nodeIndices );\n\n\t\t}\n\n\t\ttraverse( callback, rootIndex = 0 ) {\n\n\t\t\tconst buffer = this._roots[ rootIndex ];\n\t\t\tconst uint32Array = new Uint32Array( buffer );\n\t\t\tconst uint16Array = new Uint16Array( buffer );\n\t\t\t_traverse( 0 );\n\n\t\t\tfunction _traverse( node32Index, depth = 0 ) {\n\n\t\t\t\tconst node16Index = node32Index * 2;\n\t\t\t\tconst isLeaf = uint16Array[ node16Index + 15 ] === IS_LEAFNODE_FLAG;\n\t\t\t\tif ( isLeaf ) {\n\n\t\t\t\t\tconst offset = uint32Array[ node32Index + 6 ];\n\t\t\t\t\tconst count = uint16Array[ node16Index + 14 ];\n\t\t\t\t\tcallback( depth, isLeaf, new Float32Array( buffer, node32Index * 4, 6 ), offset, count );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// TODO: use node functions here\n\t\t\t\t\tconst left = node32Index + BYTES_PER_NODE / 4;\n\t\t\t\t\tconst right = uint32Array[ node32Index + 6 ];\n\t\t\t\t\tconst splitAxis = uint32Array[ node32Index + 7 ];\n\t\t\t\t\tconst stopTraversal = callback( depth, isLeaf, new Float32Array( buffer, node32Index * 4, 6 ), splitAxis );\n\n\t\t\t\t\tif ( ! stopTraversal ) {\n\n\t\t\t\t\t\t_traverse( left, depth + 1 );\n\t\t\t\t\t\t_traverse( right, depth + 1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t/* Core Cast Functions */\n\t\traycast( ray, materialOrSide = three.FrontSide ) {\n\n\t\t\tconst roots = this._roots;\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst intersects = [];\n\t\t\tconst isMaterial = materialOrSide.isMaterial;\n\t\t\tconst isArrayMaterial = Array.isArray( materialOrSide );\n\n\t\t\tconst groups = geometry.groups;\n\t\t\tconst side = isMaterial ? materialOrSide.side : materialOrSide;\n\t\t\tconst raycastFunc = this.indirect ? raycast_indirect : raycast;\n\t\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\t\t\tconst materialSide = isArrayMaterial ? materialOrSide[ groups[ i ].materialIndex ].side : side;\n\t\t\t\tconst startCount = intersects.length;\n\n\t\t\t\traycastFunc( this, i, materialSide, ray, intersects );\n\n\t\t\t\tif ( isArrayMaterial ) {\n\n\t\t\t\t\tconst materialIndex = groups[ i ].materialIndex;\n\t\t\t\t\tfor ( let j = startCount, jl = intersects.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tintersects[ j ].face.materialIndex = materialIndex;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn intersects;\n\n\t\t}\n\n\t\traycastFirst( ray, materialOrSide = three.FrontSide ) {\n\n\t\t\tconst roots = this._roots;\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst isMaterial = materialOrSide.isMaterial;\n\t\t\tconst isArrayMaterial = Array.isArray( materialOrSide );\n\n\t\t\tlet closestResult = null;\n\n\t\t\tconst groups = geometry.groups;\n\t\t\tconst side = isMaterial ? materialOrSide.side : materialOrSide;\n\t\t\tconst raycastFirstFunc = this.indirect ? raycastFirst_indirect : raycastFirst;\n\t\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\t\t\tconst materialSide = isArrayMaterial ? materialOrSide[ groups[ i ].materialIndex ].side : side;\n\t\t\t\tconst result = raycastFirstFunc( this, i, materialSide, ray );\n\t\t\t\tif ( result != null && ( closestResult == null || result.distance < closestResult.distance ) ) {\n\n\t\t\t\t\tclosestResult = result;\n\t\t\t\t\tif ( isArrayMaterial ) {\n\n\t\t\t\t\t\tresult.face.materialIndex = groups[ i ].materialIndex;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn closestResult;\n\n\t\t}\n\n\t\tintersectsGeometry( otherGeometry, geomToMesh ) {\n\n\t\t\tlet result = false;\n\t\t\tconst roots = this._roots;\n\t\t\tconst intersectsGeometryFunc = this.indirect ? intersectsGeometry_indirect : intersectsGeometry;\n\t\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\t\t\tresult = intersectsGeometryFunc( this, i, otherGeometry, geomToMesh );\n\n\t\t\t\tif ( result ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn result;\n\n\t\t}\n\n\t\tshapecast( callbacks ) {\n\n\t\t\tconst triangle = ExtendedTrianglePool.getPrimitive();\n\t\t\tconst iterateFunc = this.indirect ? iterateOverTriangles_indirect : iterateOverTriangles;\n\t\t\tlet {\n\t\t\t\tboundsTraverseOrder,\n\t\t\t\tintersectsBounds,\n\t\t\t\tintersectsRange,\n\t\t\t\tintersectsTriangle,\n\t\t\t} = callbacks;\n\n\t\t\t// wrap the intersectsRange function\n\t\t\tif ( intersectsRange && intersectsTriangle ) {\n\n\t\t\t\tconst originalIntersectsRange = intersectsRange;\n\t\t\t\tintersectsRange = ( offset, count, contained, depth, nodeIndex ) => {\n\n\t\t\t\t\tif ( ! originalIntersectsRange( offset, count, contained, depth, nodeIndex ) ) {\n\n\t\t\t\t\t\treturn iterateFunc( offset, count, this, intersectsTriangle, contained, depth, triangle );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t};\n\n\t\t\t} else if ( ! intersectsRange ) {\n\n\t\t\t\tif ( intersectsTriangle ) {\n\n\t\t\t\t\tintersectsRange = ( offset, count, contained, depth ) => {\n\n\t\t\t\t\t\treturn iterateFunc( offset, count, this, intersectsTriangle, contained, depth, triangle );\n\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\tintersectsRange = ( offset, count, contained ) => {\n\n\t\t\t\t\t\treturn contained;\n\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// run shapecast\n\t\t\tlet result = false;\n\t\t\tlet byteOffset = 0;\n\t\t\tconst roots = this._roots;\n\t\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\t\t\tconst root = roots[ i ];\n\t\t\t\tresult = shapecast( this, i, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset );\n\n\t\t\t\tif ( result ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tbyteOffset += root.byteLength;\n\n\t\t\t}\n\n\t\t\tExtendedTrianglePool.releasePrimitive( triangle );\n\n\t\t\treturn result;\n\n\t\t}\n\n\t\tbvhcast( otherBvh, matrixToLocal, callbacks ) {\n\n\t\t\tlet {\n\t\t\t\tintersectsRanges,\n\t\t\t\tintersectsTriangles,\n\t\t\t} = callbacks;\n\n\t\t\tconst triangle1 = ExtendedTrianglePool.getPrimitive();\n\t\t\tconst indexAttr1 = this.geometry.index;\n\t\t\tconst positionAttr1 = this.geometry.attributes.position;\n\t\t\tconst assignTriangle1 = this.indirect ?\n\t\t\t\ti1 => {\n\n\n\t\t\t\t\tconst ti = this.resolveTriangleIndex( i1 );\n\t\t\t\t\tsetTriangle( triangle1, ti * 3, indexAttr1, positionAttr1 );\n\n\t\t\t\t} :\n\t\t\t\ti1 => {\n\n\t\t\t\t\tsetTriangle( triangle1, i1 * 3, indexAttr1, positionAttr1 );\n\n\t\t\t\t};\n\n\t\t\tconst triangle2 = ExtendedTrianglePool.getPrimitive();\n\t\t\tconst indexAttr2 = otherBvh.geometry.index;\n\t\t\tconst positionAttr2 = otherBvh.geometry.attributes.position;\n\t\t\tconst assignTriangle2 = otherBvh.indirect ?\n\t\t\t\ti2 => {\n\n\t\t\t\t\tconst ti2 = otherBvh.resolveTriangleIndex( i2 );\n\t\t\t\t\tsetTriangle( triangle2, ti2 * 3, indexAttr2, positionAttr2 );\n\n\t\t\t\t} :\n\t\t\t\ti2 => {\n\n\t\t\t\t\tsetTriangle( triangle2, i2 * 3, indexAttr2, positionAttr2 );\n\n\t\t\t\t};\n\n\t\t\t// generate triangle callback if needed\n\t\t\tif ( intersectsTriangles ) {\n\n\t\t\t\tconst iterateOverDoubleTriangles = ( offset1, count1, offset2, count2, depth1, index1, depth2, index2 ) => {\n\n\t\t\t\t\tfor ( let i2 = offset2, l2 = offset2 + count2; i2 < l2; i2 ++ ) {\n\n\t\t\t\t\t\tassignTriangle2( i2 );\n\n\t\t\t\t\t\ttriangle2.a.applyMatrix4( matrixToLocal );\n\t\t\t\t\t\ttriangle2.b.applyMatrix4( matrixToLocal );\n\t\t\t\t\t\ttriangle2.c.applyMatrix4( matrixToLocal );\n\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\t\tfor ( let i1 = offset1, l1 = offset1 + count1; i1 < l1; i1 ++ ) {\n\n\t\t\t\t\t\t\tassignTriangle1( i1 );\n\n\t\t\t\t\t\t\ttriangle1.needsUpdate = true;\n\n\t\t\t\t\t\t\tif ( intersectsTriangles( triangle1, triangle2, i1, i2, depth1, index1, depth2, index2 ) ) {\n\n\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t};\n\n\t\t\t\tif ( intersectsRanges ) {\n\n\t\t\t\t\tconst originalIntersectsRanges = intersectsRanges;\n\t\t\t\t\tintersectsRanges = function ( offset1, count1, offset2, count2, depth1, index1, depth2, index2 ) {\n\n\t\t\t\t\t\tif ( ! originalIntersectsRanges( offset1, count1, offset2, count2, depth1, index1, depth2, index2 ) ) {\n\n\t\t\t\t\t\t\treturn iterateOverDoubleTriangles( offset1, count1, offset2, count2, depth1, index1, depth2, index2 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\tintersectsRanges = iterateOverDoubleTriangles;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn bvhcast( this, otherBvh, matrixToLocal, intersectsRanges );\n\n\t\t}\n\n\n\t\t/* Derived Cast Functions */\n\t\tintersectsBox( box, boxToMesh ) {\n\n\t\t\tobb.set( box.min, box.max, boxToMesh );\n\t\t\tobb.needsUpdate = true;\n\n\t\t\treturn this.shapecast(\n\t\t\t\t{\n\t\t\t\t\tintersectsBounds: box => obb.intersectsBox( box ),\n\t\t\t\t\tintersectsTriangle: tri => obb.intersectsTriangle( tri )\n\t\t\t\t}\n\t\t\t);\n\n\t\t}\n\n\t\tintersectsSphere( sphere ) {\n\n\t\t\treturn this.shapecast(\n\t\t\t\t{\n\t\t\t\t\tintersectsBounds: box => sphere.intersectsBox( box ),\n\t\t\t\t\tintersectsTriangle: tri => tri.intersectsSphere( sphere )\n\t\t\t\t}\n\t\t\t);\n\n\t\t}\n\n\t\tclosestPointToGeometry( otherGeometry, geometryToBvh, target1 = { }, target2 = { }, minThreshold = 0, maxThreshold = Infinity ) {\n\n\t\t\tconst closestPointToGeometryFunc = this.indirect ? closestPointToGeometry_indirect : closestPointToGeometry;\n\t\t\treturn closestPointToGeometryFunc(\n\t\t\t\tthis,\n\t\t\t\totherGeometry,\n\t\t\t\tgeometryToBvh,\n\t\t\t\ttarget1,\n\t\t\t\ttarget2,\n\t\t\t\tminThreshold,\n\t\t\t\tmaxThreshold,\n\t\t\t);\n\n\t\t}\n\n\t\tclosestPointToPoint( point, target = { }, minThreshold = 0, maxThreshold = Infinity ) {\n\n\t\t\treturn closestPointToPoint(\n\t\t\t\tthis,\n\t\t\t\tpoint,\n\t\t\t\ttarget,\n\t\t\t\tminThreshold,\n\t\t\t\tmaxThreshold,\n\t\t\t);\n\n\t\t}\n\n\t\tgetBoundingBox( target ) {\n\n\t\t\ttarget.makeEmpty();\n\n\t\t\tconst roots = this._roots;\n\t\t\troots.forEach( buffer => {\n\n\t\t\t\tarrayToBox( 0, new Float32Array( buffer ), tempBox );\n\t\t\t\ttarget.union( tempBox );\n\n\t\t\t} );\n\n\t\t\treturn target;\n\n\t\t}\n\n\t}\n\n\tconst boundingBox = /* @__PURE__ */ new three.Box3();\n\tclass MeshBVHRootVisualizer extends three.Object3D {\n\n\t\tget isMesh() {\n\n\t\t\treturn ! this.displayEdges;\n\n\t\t}\n\n\t\tget isLineSegments() {\n\n\t\t\treturn this.displayEdges;\n\n\t\t}\n\n\t\tget isLine() {\n\n\t\t\treturn this.displayEdges;\n\n\t\t}\n\n\t\tconstructor( mesh, material, depth = 10, group = 0 ) {\n\n\t\t\tsuper();\n\n\t\t\tthis.material = material;\n\t\t\tthis.geometry = new three.BufferGeometry();\n\t\t\tthis.name = 'MeshBVHRootVisualizer';\n\t\t\tthis.depth = depth;\n\t\t\tthis.displayParents = false;\n\t\t\tthis.mesh = mesh;\n\t\t\tthis.displayEdges = true;\n\t\t\tthis._group = group;\n\n\t\t}\n\n\t\traycast() {}\n\n\t\tupdate() {\n\n\t\t\tconst geometry = this.geometry;\n\t\t\tconst boundsTree = this.mesh.geometry.boundsTree;\n\t\t\tconst group = this._group;\n\t\t\tgeometry.dispose();\n\t\t\tthis.visible = false;\n\t\t\tif ( boundsTree ) {\n\n\t\t\t\t// count the number of bounds required\n\t\t\t\tconst targetDepth = this.depth - 1;\n\t\t\t\tconst displayParents = this.displayParents;\n\t\t\t\tlet boundsCount = 0;\n\t\t\t\tboundsTree.traverse( ( depth, isLeaf ) => {\n\n\t\t\t\t\tif ( depth === targetDepth || isLeaf ) {\n\n\t\t\t\t\t\tboundsCount ++;\n\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t} else if ( displayParents ) {\n\n\t\t\t\t\t\tboundsCount ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}, group );\n\n\t\t\t\t// fill in the position buffer with the bounds corners\n\t\t\t\tlet posIndex = 0;\n\t\t\t\tconst positionArray = new Float32Array( 8 * 3 * boundsCount );\n\t\t\t\tboundsTree.traverse( ( depth, isLeaf, boundingData ) => {\n\n\t\t\t\t\tconst terminate = depth === targetDepth || isLeaf;\n\t\t\t\t\tif ( terminate || displayParents ) {\n\n\t\t\t\t\t\tarrayToBox( 0, boundingData, boundingBox );\n\n\t\t\t\t\t\tconst { min, max } = boundingBox;\n\t\t\t\t\t\tfor ( let x = - 1; x <= 1; x += 2 ) {\n\n\t\t\t\t\t\t\tconst xVal = x < 0 ? min.x : max.x;\n\t\t\t\t\t\t\tfor ( let y = - 1; y <= 1; y += 2 ) {\n\n\t\t\t\t\t\t\t\tconst yVal = y < 0 ? min.y : max.y;\n\t\t\t\t\t\t\t\tfor ( let z = - 1; z <= 1; z += 2 ) {\n\n\t\t\t\t\t\t\t\t\tconst zVal = z < 0 ? min.z : max.z;\n\t\t\t\t\t\t\t\t\tpositionArray[ posIndex + 0 ] = xVal;\n\t\t\t\t\t\t\t\t\tpositionArray[ posIndex + 1 ] = yVal;\n\t\t\t\t\t\t\t\t\tpositionArray[ posIndex + 2 ] = zVal;\n\n\t\t\t\t\t\t\t\t\tposIndex += 3;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn terminate;\n\n\t\t\t\t\t}\n\n\t\t\t\t}, group );\n\n\t\t\t\tlet indexArray;\n\t\t\t\tlet indices;\n\t\t\t\tif ( this.displayEdges ) {\n\n\t\t\t\t\t// fill in the index buffer to point to the corner points\n\t\t\t\t\tindices = new Uint8Array( [\n\t\t\t\t\t\t// x axis\n\t\t\t\t\t\t0, 4,\n\t\t\t\t\t\t1, 5,\n\t\t\t\t\t\t2, 6,\n\t\t\t\t\t\t3, 7,\n\n\t\t\t\t\t\t// y axis\n\t\t\t\t\t\t0, 2,\n\t\t\t\t\t\t1, 3,\n\t\t\t\t\t\t4, 6,\n\t\t\t\t\t\t5, 7,\n\n\t\t\t\t\t\t// z axis\n\t\t\t\t\t\t0, 1,\n\t\t\t\t\t\t2, 3,\n\t\t\t\t\t\t4, 5,\n\t\t\t\t\t\t6, 7,\n\t\t\t\t\t] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tindices = new Uint8Array( [\n\n\t\t\t\t\t\t// X-, X+\n\t\t\t\t\t\t0, 1, 2,\n\t\t\t\t\t\t2, 1, 3,\n\n\t\t\t\t\t\t4, 6, 5,\n\t\t\t\t\t\t6, 7, 5,\n\n\t\t\t\t\t\t// Y-, Y+\n\t\t\t\t\t\t1, 4, 5,\n\t\t\t\t\t\t0, 4, 1,\n\n\t\t\t\t\t\t2, 3, 6,\n\t\t\t\t\t\t3, 7, 6,\n\n\t\t\t\t\t\t// Z-, Z+\n\t\t\t\t\t\t0, 2, 4,\n\t\t\t\t\t\t2, 6, 4,\n\n\t\t\t\t\t\t1, 5, 3,\n\t\t\t\t\t\t3, 5, 7,\n\n\t\t\t\t\t] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( positionArray.length > 65535 ) {\n\n\t\t\t\t\tindexArray = new Uint32Array( indices.length * boundsCount );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tindexArray = new Uint16Array( indices.length * boundsCount );\n\n\t\t\t\t}\n\n\t\t\t\tconst indexLength = indices.length;\n\t\t\t\tfor ( let i = 0; i < boundsCount; i ++ ) {\n\n\t\t\t\t\tconst posOffset = i * 8;\n\t\t\t\t\tconst indexOffset = i * indexLength;\n\t\t\t\t\tfor ( let j = 0; j < indexLength; j ++ ) {\n\n\t\t\t\t\t\tindexArray[ indexOffset + j ] = posOffset + indices[ j ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// update the geometry\n\t\t\t\tgeometry.setIndex(\n\t\t\t\t\tnew three.BufferAttribute( indexArray, 1, false ),\n\t\t\t\t);\n\t\t\t\tgeometry.setAttribute(\n\t\t\t\t\t'position',\n\t\t\t\t\tnew three.BufferAttribute( positionArray, 3, false ),\n\t\t\t\t);\n\t\t\t\tthis.visible = true;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tclass MeshBVHVisualizer extends three.Group {\n\n\t\tget color() {\n\n\t\t\treturn this.edgeMaterial.color;\n\n\t\t}\n\n\t\tget opacity() {\n\n\t\t\treturn this.edgeMaterial.opacity;\n\n\t\t}\n\n\t\tset opacity( v ) {\n\n\t\t\tthis.edgeMaterial.opacity = v;\n\t\t\tthis.meshMaterial.opacity = v;\n\n\t\t}\n\n\t\tconstructor( mesh, depth = 10 ) {\n\n\t\t\tsuper();\n\n\t\t\tthis.name = 'MeshBVHVisualizer';\n\t\t\tthis.depth = depth;\n\t\t\tthis.mesh = mesh;\n\t\t\tthis.displayParents = false;\n\t\t\tthis.displayEdges = true;\n\t\t\tthis._roots = [];\n\n\t\t\tconst edgeMaterial = new three.LineBasicMaterial( {\n\t\t\t\tcolor: 0x00FF88,\n\t\t\t\ttransparent: true,\n\t\t\t\topacity: 0.3,\n\t\t\t\tdepthWrite: false,\n\t\t\t} );\n\n\t\t\tconst meshMaterial = new three.MeshBasicMaterial( {\n\t\t\t\tcolor: 0x00FF88,\n\t\t\t\ttransparent: true,\n\t\t\t\topacity: 0.3,\n\t\t\t\tdepthWrite: false,\n\t\t\t} );\n\n\t\t\tmeshMaterial.color = edgeMaterial.color;\n\n\t\t\tthis.edgeMaterial = edgeMaterial;\n\t\t\tthis.meshMaterial = meshMaterial;\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tupdate() {\n\n\t\t\tconst bvh = this.mesh.geometry.boundsTree;\n\t\t\tconst totalRoots = bvh ? bvh._roots.length : 0;\n\t\t\twhile ( this._roots.length > totalRoots ) {\n\n\t\t\t\tconst root = this._roots.pop();\n\t\t\t\troot.geometry.dispose();\n\t\t\t\tthis.remove( root );\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0; i < totalRoots; i ++ ) {\n\n\t\t\t\tif ( i >= this._roots.length ) {\n\n\t\t\t\t\tconst root = new MeshBVHRootVisualizer( this.mesh, this.edgeMaterial, this.depth, i );\n\t\t\t\t\tthis.add( root );\n\t\t\t\t\tthis._roots.push( root );\n\n\t\t\t\t}\n\n\t\t\t\tconst root = this._roots[ i ];\n\t\t\t\troot.depth = this.depth;\n\t\t\t\troot.mesh = this.mesh;\n\t\t\t\troot.displayParents = this.displayParents;\n\t\t\t\troot.displayEdges = this.displayEdges;\n\t\t\t\troot.material = this.displayEdges ? this.edgeMaterial : this.meshMaterial;\n\t\t\t\troot.update();\n\n\t\t\t}\n\n\t\t}\n\n\t\tupdateMatrixWorld( ...args ) {\n\n\t\t\tthis.position.copy( this.mesh.position );\n\t\t\tthis.rotation.copy( this.mesh.rotation );\n\t\t\tthis.scale.copy( this.mesh.scale );\n\n\t\t\tsuper.updateMatrixWorld( ...args );\n\n\t\t}\n\n\t\tcopy( source ) {\n\n\t\t\tthis.depth = source.depth;\n\t\t\tthis.mesh = source.mesh;\n\n\t\t}\n\n\t\tclone() {\n\n\t\t\treturn new MeshBVHVisualizer( this.mesh, this.depth );\n\n\t\t}\n\n\t\tdispose() {\n\n\t\t\tthis.edgeMaterial.dispose();\n\t\t\tthis.meshMaterial.dispose();\n\n\t\t\tconst children = this.children;\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].geometry.dispose();\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tconst _box1 = /* @__PURE__ */ new three.Box3();\n\tconst _box2 = /* @__PURE__ */ new three.Box3();\n\tconst _vec = /* @__PURE__ */ new three.Vector3();\n\n\t// https://stackoverflow.com/questions/1248302/how-to-get-the-size-of-a-javascript-object\n\tfunction getPrimitiveSize( el ) {\n\n\t\tswitch ( typeof el ) {\n\n\t\t\tcase 'number':\n\t\t\t\treturn 8;\n\t\t\tcase 'string':\n\t\t\t\treturn el.length * 2;\n\t\t\tcase 'boolean':\n\t\t\t\treturn 4;\n\t\t\tdefault:\n\t\t\t\treturn 0;\n\n\t\t}\n\n\t}\n\n\tfunction isTypedArray( arr ) {\n\n\t\tconst regex = /(Uint|Int|Float)(8|16|32)Array/;\n\t\treturn regex.test( arr.constructor.name );\n\n\t}\n\n\tfunction getRootExtremes( bvh, group ) {\n\n\t\tconst result = {\n\t\t\tnodeCount: 0,\n\t\t\tleafNodeCount: 0,\n\n\t\t\tdepth: {\n\t\t\t\tmin: Infinity, max: - Infinity\n\t\t\t},\n\t\t\ttris: {\n\t\t\t\tmin: Infinity, max: - Infinity\n\t\t\t},\n\t\t\tsplits: [ 0, 0, 0 ],\n\t\t\tsurfaceAreaScore: 0,\n\t\t};\n\n\t\tbvh.traverse( ( depth, isLeaf, boundingData, offsetOrSplit, count ) => {\n\n\t\t\tconst l0 = boundingData[ 0 + 3 ] - boundingData[ 0 ];\n\t\t\tconst l1 = boundingData[ 1 + 3 ] - boundingData[ 1 ];\n\t\t\tconst l2 = boundingData[ 2 + 3 ] - boundingData[ 2 ];\n\n\t\t\tconst surfaceArea = 2 * ( l0 * l1 + l1 * l2 + l2 * l0 );\n\n\t\t\tresult.nodeCount ++;\n\t\t\tif ( isLeaf ) {\n\n\t\t\t\tresult.leafNodeCount ++;\n\n\t\t\t\tresult.depth.min = Math.min( depth, result.depth.min );\n\t\t\t\tresult.depth.max = Math.max( depth, result.depth.max );\n\n\t\t\t\tresult.tris.min = Math.min( count, result.tris.min );\n\t\t\t\tresult.tris.max = Math.max( count, result.tris.max );\n\n\t\t\t\tresult.surfaceAreaScore += surfaceArea * TRIANGLE_INTERSECT_COST * count;\n\n\t\t\t} else {\n\n\t\t\t\tresult.splits[ offsetOrSplit ] ++;\n\n\t\t\t\tresult.surfaceAreaScore += surfaceArea * TRAVERSAL_COST;\n\n\t\t\t}\n\n\t\t}, group );\n\n\t\t// If there are no leaf nodes because the tree hasn't finished generating yet.\n\t\tif ( result.tris.min === Infinity ) {\n\n\t\t\tresult.tris.min = 0;\n\t\t\tresult.tris.max = 0;\n\n\t\t}\n\n\t\tif ( result.depth.min === Infinity ) {\n\n\t\t\tresult.depth.min = 0;\n\t\t\tresult.depth.max = 0;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tfunction getBVHExtremes( bvh ) {\n\n\t\treturn bvh._roots.map( ( root, i ) => getRootExtremes( bvh, i ) );\n\n\t}\n\n\tfunction estimateMemoryInBytes( obj ) {\n\n\t\tconst traversed = new Set();\n\t\tconst stack = [ obj ];\n\t\tlet bytes = 0;\n\n\t\twhile ( stack.length ) {\n\n\t\t\tconst curr = stack.pop();\n\t\t\tif ( traversed.has( curr ) ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\ttraversed.add( curr );\n\n\t\t\tfor ( let key in curr ) {\n\n\t\t\t\tif ( ! curr.hasOwnProperty( key ) ) {\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tbytes += getPrimitiveSize( key );\n\n\t\t\t\tconst value = curr[ key ];\n\t\t\t\tif ( value && ( typeof value === 'object' || typeof value === 'function' ) ) {\n\n\t\t\t\t\tif ( isTypedArray( value ) ) {\n\n\t\t\t\t\t\tbytes += value.byteLength;\n\n\t\t\t\t\t} else if ( isSharedArrayBufferSupported() && value instanceof SharedArrayBuffer ) {\n\n\t\t\t\t\t\tbytes += value.byteLength;\n\n\t\t\t\t\t} else if ( value instanceof ArrayBuffer ) {\n\n\t\t\t\t\t\tbytes += value.byteLength;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstack.push( value );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbytes += getPrimitiveSize( value );\n\n\t\t\t\t}\n\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn bytes;\n\n\t}\n\n\tfunction validateBounds( bvh ) {\n\n\t\tconst geometry = bvh.geometry;\n\t\tconst depthStack = [];\n\t\tconst index = geometry.index;\n\t\tconst position = geometry.getAttribute( 'position' );\n\t\tlet passes = true;\n\n\t\tbvh.traverse( ( depth, isLeaf, boundingData, offset, count ) => {\n\n\t\t\tconst info = {\n\t\t\t\tdepth,\n\t\t\t\tisLeaf,\n\t\t\t\tboundingData,\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t};\n\t\t\tdepthStack[ depth ] = info;\n\n\t\t\tarrayToBox( 0, boundingData, _box1 );\n\t\t\tconst parent = depthStack[ depth - 1 ];\n\n\t\t\tif ( isLeaf ) {\n\n\t\t\t\t// check triangles\n\t\t\t\tfor ( let i = offset * 3, l = ( offset + count ) * 3; i < l; i += 3 ) {\n\n\t\t\t\t\tconst i0 = index.getX( i );\n\t\t\t\t\tconst i1 = index.getX( i + 1 );\n\t\t\t\t\tconst i2 = index.getX( i + 2 );\n\n\t\t\t\t\tlet isContained;\n\n\t\t\t\t\t_vec.fromBufferAttribute( position, i0 );\n\t\t\t\t\tisContained = _box1.containsPoint( _vec );\n\n\t\t\t\t\t_vec.fromBufferAttribute( position, i1 );\n\t\t\t\t\tisContained = isContained && _box1.containsPoint( _vec );\n\n\t\t\t\t\t_vec.fromBufferAttribute( position, i2 );\n\t\t\t\t\tisContained = isContained && _box1.containsPoint( _vec );\n\n\t\t\t\t\tconsole.assert( isContained, 'Leaf bounds does not fully contain triangle.' );\n\t\t\t\t\tpasses = passes && isContained;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( parent ) {\n\n\t\t\t\t// check if my bounds fit in my parents\n\t\t\t\tarrayToBox( 0, boundingData, _box2 );\n\n\t\t\t\tconst isContained = _box2.containsBox( _box1 );\n\t\t\t\tconsole.assert( isContained, 'Parent bounds does not fully contain child.' );\n\t\t\t\tpasses = passes && isContained;\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn passes;\n\n\t}\n\n\t// Returns a simple, human readable object that represents the BVH.\n\tfunction getJSONStructure( bvh ) {\n\n\t\tconst depthStack = [];\n\n\t\tbvh.traverse( ( depth, isLeaf, boundingData, offset, count ) => {\n\n\t\t\tconst info = {\n\t\t\t\tbounds: arrayToBox( 0, boundingData, new three.Box3() ),\n\t\t\t};\n\n\t\t\tif ( isLeaf ) {\n\n\t\t\t\tinfo.count = count;\n\t\t\t\tinfo.offset = offset;\n\n\t\t\t} else {\n\n\t\t\t\tinfo.left = null;\n\t\t\t\tinfo.right = null;\n\n\t\t\t}\n\n\t\t\tdepthStack[ depth ] = info;\n\n\t\t\t// traversal hits the left then right node\n\t\t\tconst parent = depthStack[ depth - 1 ];\n\t\t\tif ( parent ) {\n\n\t\t\t\tif ( parent.left === null ) {\n\n\t\t\t\t\tparent.left = info;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tparent.right = info;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn depthStack[ 0 ];\n\n\t}\n\n\t// converts the given BVH raycast intersection to align with the three.js raycast\n\t// structure (include object, world space distance and point).\n\tfunction convertRaycastIntersect( hit, object, raycaster ) {\n\n\t\tif ( hit === null ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\thit.point.applyMatrix4( object.matrixWorld );\n\t\thit.distance = hit.point.distanceTo( raycaster.ray.origin );\n\t\thit.object = object;\n\n\t\tif ( hit.distance < raycaster.near || hit.distance > raycaster.far ) {\n\n\t\t\treturn null;\n\n\t\t} else {\n\n\t\t\treturn hit;\n\n\t\t}\n\n\t}\n\n\tconst ray = /* @__PURE__ */ new three.Ray();\n\tconst tmpInverseMatrix = /* @__PURE__ */ new three.Matrix4();\n\tconst origMeshRaycastFunc = three.Mesh.prototype.raycast;\n\n\tfunction acceleratedRaycast( raycaster, intersects ) {\n\n\t\tif ( this.geometry.boundsTree ) {\n\n\t\t\tif ( this.material === undefined ) return;\n\n\t\t\ttmpInverseMatrix.copy( this.matrixWorld ).invert();\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( tmpInverseMatrix );\n\n\t\t\tconst bvh = this.geometry.boundsTree;\n\t\t\tif ( raycaster.firstHitOnly === true ) {\n\n\t\t\t\tconst hit = convertRaycastIntersect( bvh.raycastFirst( ray, this.material ), this, raycaster );\n\t\t\t\tif ( hit ) {\n\n\t\t\t\t\tintersects.push( hit );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst hits = bvh.raycast( ray, this.material );\n\t\t\t\tfor ( let i = 0, l = hits.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst hit = convertRaycastIntersect( hits[ i ], this, raycaster );\n\t\t\t\t\tif ( hit ) {\n\n\t\t\t\t\t\tintersects.push( hit );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\torigMeshRaycastFunc.call( this, raycaster, intersects );\n\n\t\t}\n\n\t}\n\n\tfunction computeBoundsTree( options ) {\n\n\t\tthis.boundsTree = new MeshBVH( this, options );\n\t\treturn this.boundsTree;\n\n\t}\n\n\tfunction disposeBoundsTree() {\n\n\t\tthis.boundsTree = null;\n\n\t}\n\n\tfunction countToStringFormat( count ) {\n\n\t\tswitch ( count ) {\n\n\t\t\tcase 1: return 'R';\n\t\t\tcase 2: return 'RG';\n\t\t\tcase 3: return 'RGBA';\n\t\t\tcase 4: return 'RGBA';\n\n\t\t}\n\n\t\tthrow new Error();\n\n\t}\n\n\tfunction countToFormat( count ) {\n\n\t\tswitch ( count ) {\n\n\t\t\tcase 1: return three.RedFormat;\n\t\t\tcase 2: return three.RGFormat;\n\t\t\tcase 3: return three.RGBAFormat;\n\t\t\tcase 4: return three.RGBAFormat;\n\n\t\t}\n\n\t}\n\n\tfunction countToIntFormat( count ) {\n\n\t\tswitch ( count ) {\n\n\t\t\tcase 1: return three.RedIntegerFormat;\n\t\t\tcase 2: return three.RGIntegerFormat;\n\t\t\tcase 3: return three.RGBAIntegerFormat;\n\t\t\tcase 4: return three.RGBAIntegerFormat;\n\n\t\t}\n\n\t}\n\n\tclass VertexAttributeTexture extends three.DataTexture {\n\n\t\tconstructor() {\n\n\t\t\tsuper();\n\t\t\tthis.minFilter = three.NearestFilter;\n\t\t\tthis.magFilter = three.NearestFilter;\n\t\t\tthis.generateMipmaps = false;\n\t\t\tthis.overrideItemSize = null;\n\t\t\tthis._forcedType = null;\n\n\t\t}\n\n\t\tupdateFrom( attr ) {\n\n\t\t\tconst overrideItemSize = this.overrideItemSize;\n\t\t\tconst originalItemSize = attr.itemSize;\n\t\t\tconst originalCount = attr.count;\n\t\t\tif ( overrideItemSize !== null ) {\n\n\t\t\t\tif ( ( originalItemSize * originalCount ) % overrideItemSize !== 0.0 ) {\n\n\t\t\t\t\tthrow new Error( 'VertexAttributeTexture: overrideItemSize must divide evenly into buffer length.' );\n\n\t\t\t\t}\n\n\t\t\t\tattr.itemSize = overrideItemSize;\n\t\t\t\tattr.count = originalCount * originalItemSize / overrideItemSize;\n\n\t\t\t}\n\n\t\t\tconst itemSize = attr.itemSize;\n\t\t\tconst count = attr.count;\n\t\t\tconst normalized = attr.normalized;\n\t\t\tconst originalBufferCons = attr.array.constructor;\n\t\t\tconst byteCount = originalBufferCons.BYTES_PER_ELEMENT;\n\t\t\tlet targetType = this._forcedType;\n\t\t\tlet finalStride = itemSize;\n\n\t\t\t// derive the type of texture this should be in the shader\n\t\t\tif ( targetType === null ) {\n\n\t\t\t\tswitch ( originalBufferCons ) {\n\n\t\t\t\t\tcase Float32Array:\n\t\t\t\t\t\ttargetType = three.FloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase Uint8Array:\n\t\t\t\t\tcase Uint16Array:\n\t\t\t\t\tcase Uint32Array:\n\t\t\t\t\t\ttargetType = three.UnsignedIntType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase Int8Array:\n\t\t\t\t\tcase Int16Array:\n\t\t\t\t\tcase Int32Array:\n\t\t\t\t\t\ttargetType = three.IntType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// get the target format to store the texture as\n\t\t\tlet type, format, normalizeValue, targetBufferCons;\n\t\t\tlet internalFormat = countToStringFormat( itemSize );\n\t\t\tswitch ( targetType ) {\n\n\t\t\t\tcase three.FloatType:\n\t\t\t\t\tnormalizeValue = 1.0;\n\t\t\t\t\tformat = countToFormat( itemSize );\n\n\t\t\t\t\tif ( normalized && byteCount === 1 ) {\n\n\t\t\t\t\t\ttargetBufferCons = originalBufferCons;\n\t\t\t\t\t\tinternalFormat += '8';\n\n\t\t\t\t\t\tif ( originalBufferCons === Uint8Array ) {\n\n\t\t\t\t\t\t\ttype = three.UnsignedByteType;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ttype = three.ByteType;\n\t\t\t\t\t\t\tinternalFormat += '_SNORM';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttargetBufferCons = Float32Array;\n\t\t\t\t\t\tinternalFormat += '32F';\n\t\t\t\t\t\ttype = three.FloatType;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase three.IntType:\n\t\t\t\t\tinternalFormat += byteCount * 8 + 'I';\n\t\t\t\t\tnormalizeValue = normalized ? Math.pow( 2, originalBufferCons.BYTES_PER_ELEMENT * 8 - 1 ) : 1.0;\n\t\t\t\t\tformat = countToIntFormat( itemSize );\n\n\t\t\t\t\tif ( byteCount === 1 ) {\n\n\t\t\t\t\t\ttargetBufferCons = Int8Array;\n\t\t\t\t\t\ttype = three.ByteType;\n\n\t\t\t\t\t} else if ( byteCount === 2 ) {\n\n\t\t\t\t\t\ttargetBufferCons = Int16Array;\n\t\t\t\t\t\ttype = three.ShortType;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttargetBufferCons = Int32Array;\n\t\t\t\t\t\ttype = three.IntType;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase three.UnsignedIntType:\n\t\t\t\t\tinternalFormat += byteCount * 8 + 'UI';\n\t\t\t\t\tnormalizeValue = normalized ? Math.pow( 2, originalBufferCons.BYTES_PER_ELEMENT * 8 - 1 ) : 1.0;\n\t\t\t\t\tformat = countToIntFormat( itemSize );\n\n\t\t\t\t\tif ( byteCount === 1 ) {\n\n\t\t\t\t\t\ttargetBufferCons = Uint8Array;\n\t\t\t\t\t\ttype = three.UnsignedByteType;\n\n\t\t\t\t\t} else if ( byteCount === 2 ) {\n\n\t\t\t\t\t\ttargetBufferCons = Uint16Array;\n\t\t\t\t\t\ttype = three.UnsignedShortType;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttargetBufferCons = Uint32Array;\n\t\t\t\t\t\ttype = three.UnsignedIntType;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\t// there will be a mismatch between format length and final length because\n\t\t\t// RGBFormat and RGBIntegerFormat was removed\n\t\t\tif ( finalStride === 3 && ( format === three.RGBAFormat || format === three.RGBAIntegerFormat ) ) {\n\n\t\t\t\tfinalStride = 4;\n\n\t\t\t}\n\n\t\t\t// copy the data over to the new texture array\n\t\t\tconst dimension = Math.ceil( Math.sqrt( count ) );\n\t\t\tconst length = finalStride * dimension * dimension;\n\t\t\tconst dataArray = new targetBufferCons( length );\n\n\t\t\t// temporarily set the normalized state to false since we have custom normalization logic\n\t\t\tconst originalNormalized = attr.normalized;\n\t\t\tattr.normalized = false;\n\t\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\t\tconst ii = finalStride * i;\n\t\t\t\tdataArray[ ii ] = attr.getX( i ) / normalizeValue;\n\n\t\t\t\tif ( itemSize >= 2 ) {\n\n\t\t\t\t\tdataArray[ ii + 1 ] = attr.getY( i ) / normalizeValue;\n\n\t\t\t\t}\n\n\t\t\t\tif ( itemSize >= 3 ) {\n\n\t\t\t\t\tdataArray[ ii + 2 ] = attr.getZ( i ) / normalizeValue;\n\n\t\t\t\t\tif ( finalStride === 4 ) {\n\n\t\t\t\t\t\tdataArray[ ii + 3 ] = 1.0;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( itemSize >= 4 ) {\n\n\t\t\t\t\tdataArray[ ii + 3 ] = attr.getW( i ) / normalizeValue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tattr.normalized = originalNormalized;\n\n\t\t\tthis.internalFormat = internalFormat;\n\t\t\tthis.format = format;\n\t\t\tthis.type = type;\n\t\t\tthis.image.width = dimension;\n\t\t\tthis.image.height = dimension;\n\t\t\tthis.image.data = dataArray;\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.dispose();\n\n\t\t\tattr.itemSize = originalItemSize;\n\t\t\tattr.count = originalCount;\n\n\t\t}\n\n\t}\n\n\tclass UIntVertexAttributeTexture extends VertexAttributeTexture {\n\n\t\tconstructor() {\n\n\t\t\tsuper();\n\t\t\tthis._forcedType = three.UnsignedIntType;\n\n\t\t}\n\n\t}\n\n\tclass IntVertexAttributeTexture extends VertexAttributeTexture {\n\n\t\tconstructor() {\n\n\t\t\tsuper();\n\t\t\tthis._forcedType = three.IntType;\n\n\t\t}\n\n\n\t}\n\n\tclass FloatVertexAttributeTexture extends VertexAttributeTexture {\n\n\t\tconstructor() {\n\n\t\t\tsuper();\n\t\t\tthis._forcedType = three.FloatType;\n\n\t\t}\n\n\t}\n\n\tclass MeshBVHUniformStruct {\n\n\t\tconstructor() {\n\n\t\t\tthis.index = new UIntVertexAttributeTexture();\n\t\t\tthis.position = new FloatVertexAttributeTexture();\n\t\t\tthis.bvhBounds = new three.DataTexture();\n\t\t\tthis.bvhContents = new three.DataTexture();\n\t\t\tthis._cachedIndexAttr = null;\n\n\t\t\tthis.index.overrideItemSize = 3;\n\n\t\t}\n\n\t\tupdateFrom( bvh ) {\n\n\t\t\tconst { geometry } = bvh;\n\t\t\tbvhToTextures( bvh, this.bvhBounds, this.bvhContents );\n\n\t\t\tthis.position.updateFrom( geometry.attributes.position );\n\n\t\t\t// dereference a new index attribute if we're using indirect storage\n\t\t\tif ( bvh.indirect ) {\n\n\t\t\t\tconst indirectBuffer = bvh._indirectBuffer;\n\t\t\t\tif (\n\t\t\t\t\tthis._cachedIndexAttr === null ||\n\t\t\t\t\tthis._cachedIndexAttr.count !== indirectBuffer.length\n\t\t\t\t) {\n\n\t\t\t\t\tif ( geometry.index ) {\n\n\t\t\t\t\t\tthis._cachedIndexAttr = geometry.index.clone();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst array = getIndexArray( getVertexCount( geometry ) );\n\t\t\t\t\t\tthis._cachedIndexAttr = new three.BufferAttribute( array, 1, false );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tdereferenceIndex( geometry, indirectBuffer, this._cachedIndexAttr );\n\t\t\t\tthis.index.updateFrom( this._cachedIndexAttr );\n\n\t\t\t} else {\n\n\t\t\t\tthis.index.updateFrom( geometry.index );\n\n\t\t\t}\n\n\t\t}\n\n\t\tdispose() {\n\n\t\t\tconst { index, position, bvhBounds, bvhContents } = this;\n\n\t\t\tif ( index ) index.dispose();\n\t\t\tif ( position ) position.dispose();\n\t\t\tif ( bvhBounds ) bvhBounds.dispose();\n\t\t\tif ( bvhContents ) bvhContents.dispose();\n\n\t\t}\n\n\t}\n\n\tfunction dereferenceIndex( geometry, indirectBuffer, target ) {\n\n\t\tconst unpacked = target.array;\n\t\tconst indexArray = geometry.index ? geometry.index.array : null;\n\t\tfor ( let i = 0, l = indirectBuffer.length; i < l; i ++ ) {\n\n\t\t\tconst i3 = 3 * i;\n\t\t\tconst v3 = 3 * indirectBuffer[ i ];\n\t\t\tfor ( let c = 0; c < 3; c ++ ) {\n\n\t\t\t\tunpacked[ i3 + c ] = indexArray ? indexArray[ v3 + c ] : v3 + c;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction bvhToTextures( bvh, boundsTexture, contentsTexture ) {\n\n\t\tconst roots = bvh._roots;\n\n\t\tif ( roots.length !== 1 ) {\n\n\t\t\tthrow new Error( 'MeshBVHUniformStruct: Multi-root BVHs not supported.' );\n\n\t\t}\n\n\t\tconst root = roots[ 0 ];\n\t\tconst uint16Array = new Uint16Array( root );\n\t\tconst uint32Array = new Uint32Array( root );\n\t\tconst float32Array = new Float32Array( root );\n\n\t\t// Both bounds need two elements per node so compute the height so it's twice as long as\n\t\t// the width so we can expand the row by two and still have a square texture\n\t\tconst nodeCount = root.byteLength / BYTES_PER_NODE;\n\t\tconst boundsDimension = 2 * Math.ceil( Math.sqrt( nodeCount / 2 ) );\n\t\tconst boundsArray = new Float32Array( 4 * boundsDimension * boundsDimension );\n\n\t\tconst contentsDimension = Math.ceil( Math.sqrt( nodeCount ) );\n\t\tconst contentsArray = new Uint32Array( 2 * contentsDimension * contentsDimension );\n\n\t\tfor ( let i = 0; i < nodeCount; i ++ ) {\n\n\t\t\tconst nodeIndex32 = i * BYTES_PER_NODE / 4;\n\t\t\tconst nodeIndex16 = nodeIndex32 * 2;\n\t\t\tconst boundsIndex = BOUNDING_DATA_INDEX( nodeIndex32 );\n\t\t\tfor ( let b = 0; b < 3; b ++ ) {\n\n\t\t\t\tboundsArray[ 8 * i + 0 + b ] = float32Array[ boundsIndex + 0 + b ];\n\t\t\t\tboundsArray[ 8 * i + 4 + b ] = float32Array[ boundsIndex + 3 + b ];\n\n\t\t\t}\n\n\t\t\tif ( IS_LEAF( nodeIndex16, uint16Array ) ) {\n\n\t\t\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\t\t\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\n\t\t\t\tconst mergedLeafCount = 0xffff0000 | count;\n\t\t\t\tcontentsArray[ i * 2 + 0 ] = mergedLeafCount;\n\t\t\t\tcontentsArray[ i * 2 + 1 ] = offset;\n\n\t\t\t} else {\n\n\t\t\t\tconst rightIndex = 4 * RIGHT_NODE( nodeIndex32, uint32Array ) / BYTES_PER_NODE;\n\t\t\t\tconst splitAxis = SPLIT_AXIS( nodeIndex32, uint32Array );\n\n\t\t\t\tcontentsArray[ i * 2 + 0 ] = splitAxis;\n\t\t\t\tcontentsArray[ i * 2 + 1 ] = rightIndex;\n\n\t\t\t}\n\n\t\t}\n\n\t\tboundsTexture.image.data = boundsArray;\n\t\tboundsTexture.image.width = boundsDimension;\n\t\tboundsTexture.image.height = boundsDimension;\n\t\tboundsTexture.format = three.RGBAFormat;\n\t\tboundsTexture.type = three.FloatType;\n\t\tboundsTexture.internalFormat = 'RGBA32F';\n\t\tboundsTexture.minFilter = three.NearestFilter;\n\t\tboundsTexture.magFilter = three.NearestFilter;\n\t\tboundsTexture.generateMipmaps = false;\n\t\tboundsTexture.needsUpdate = true;\n\t\tboundsTexture.dispose();\n\n\t\tcontentsTexture.image.data = contentsArray;\n\t\tcontentsTexture.image.width = contentsDimension;\n\t\tcontentsTexture.image.height = contentsDimension;\n\t\tcontentsTexture.format = three.RGIntegerFormat;\n\t\tcontentsTexture.type = three.UnsignedIntType;\n\t\tcontentsTexture.internalFormat = 'RG32UI';\n\t\tcontentsTexture.minFilter = three.NearestFilter;\n\t\tcontentsTexture.magFilter = three.NearestFilter;\n\t\tcontentsTexture.generateMipmaps = false;\n\t\tcontentsTexture.needsUpdate = true;\n\t\tcontentsTexture.dispose();\n\n\t}\n\n\t// Note that a struct cannot be used for the hit record including faceIndices, faceNormal, barycoord,\n\t// side, and dist because on some mobile GPUS (such as Adreno) numbers are afforded less precision specifically\n\t// when in a struct leading to inaccurate hit results. See KhronosGroup/WebGL#3351 for more details.\n\tconst shaderStructs = /* glsl */`\n#ifndef TRI_INTERSECT_EPSILON\n#define TRI_INTERSECT_EPSILON 1e-5\n#endif\n\n#ifndef INFINITY\n#define INFINITY 1e20\n#endif\n\nstruct BVH {\n\n\tusampler2D index;\n\tsampler2D position;\n\n\tsampler2D bvhBounds;\n\tusampler2D bvhContents;\n\n};\n`;\n\n\tconst shaderIntersectFunction = /* glsl */`\n\n// Utilities\nuvec4 uTexelFetch1D( usampler2D tex, uint index ) {\n\n\tuint width = uint( textureSize( tex, 0 ).x );\n\tuvec2 uv;\n\tuv.x = index % width;\n\tuv.y = index / width;\n\n\treturn texelFetch( tex, ivec2( uv ), 0 );\n\n}\n\nivec4 iTexelFetch1D( isampler2D tex, uint index ) {\n\n\tuint width = uint( textureSize( tex, 0 ).x );\n\tuvec2 uv;\n\tuv.x = index % width;\n\tuv.y = index / width;\n\n\treturn texelFetch( tex, ivec2( uv ), 0 );\n\n}\n\nvec4 texelFetch1D( sampler2D tex, uint index ) {\n\n\tuint width = uint( textureSize( tex, 0 ).x );\n\tuvec2 uv;\n\tuv.x = index % width;\n\tuv.y = index / width;\n\n\treturn texelFetch( tex, ivec2( uv ), 0 );\n\n}\n\nvec4 textureSampleBarycoord( sampler2D tex, vec3 barycoord, uvec3 faceIndices ) {\n\n\treturn\n\t\tbarycoord.x * texelFetch1D( tex, faceIndices.x ) +\n\t\tbarycoord.y * texelFetch1D( tex, faceIndices.y ) +\n\t\tbarycoord.z * texelFetch1D( tex, faceIndices.z );\n\n}\n\nvoid ndcToCameraRay(\n\tvec2 coord, mat4 cameraWorld, mat4 invProjectionMatrix,\n\tout vec3 rayOrigin, out vec3 rayDirection\n) {\n\n\t// get camera look direction and near plane for camera clipping\n\tvec4 lookDirection = cameraWorld * vec4( 0.0, 0.0, - 1.0, 0.0 );\n\tvec4 nearVector = invProjectionMatrix * vec4( 0.0, 0.0, - 1.0, 1.0 );\n\tfloat near = abs( nearVector.z / nearVector.w );\n\n\t// get the camera direction and position from camera matrices\n\tvec4 origin = cameraWorld * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec4 direction = invProjectionMatrix * vec4( coord, 0.5, 1.0 );\n\tdirection /= direction.w;\n\tdirection = cameraWorld * direction - origin;\n\n\t// slide the origin along the ray until it sits at the near clip plane position\n\torigin.xyz += direction.xyz * near / dot( direction, lookDirection );\n\n\trayOrigin = origin.xyz;\n\trayDirection = direction.xyz;\n\n}\n\n// Raycasting\nfloat intersectsBounds( vec3 rayOrigin, vec3 rayDirection, vec3 boundsMin, vec3 boundsMax ) {\n\n\t// https://www.reddit.com/r/opengl/comments/8ntzz5/fast_glsl_ray_box_intersection/\n\t// https://tavianator.com/2011/ray_box.html\n\tvec3 invDir = 1.0 / rayDirection;\n\n\t// find intersection distances for each plane\n\tvec3 tMinPlane = invDir * ( boundsMin - rayOrigin );\n\tvec3 tMaxPlane = invDir * ( boundsMax - rayOrigin );\n\n\t// get the min and max distances from each intersection\n\tvec3 tMinHit = min( tMaxPlane, tMinPlane );\n\tvec3 tMaxHit = max( tMaxPlane, tMinPlane );\n\n\t// get the furthest hit distance\n\tvec2 t = max( tMinHit.xx, tMinHit.yz );\n\tfloat t0 = max( t.x, t.y );\n\n\t// get the minimum hit distance\n\tt = min( tMaxHit.xx, tMaxHit.yz );\n\tfloat t1 = min( t.x, t.y );\n\n\t// set distance to 0.0 if the ray starts inside the box\n\tfloat dist = max( t0, 0.0 );\n\n\treturn t1 >= dist ? dist : INFINITY;\n\n}\n\nbool intersectsTriangle(\n\tvec3 rayOrigin, vec3 rayDirection, vec3 a, vec3 b, vec3 c,\n\tout vec3 barycoord, out vec3 norm, out float dist, out float side\n) {\n\n\t// https://stackoverflow.com/questions/42740765/intersection-between-line-and-triangle-in-3d\n\tvec3 edge1 = b - a;\n\tvec3 edge2 = c - a;\n\tnorm = cross( edge1, edge2 );\n\n\tfloat det = - dot( rayDirection, norm );\n\tfloat invdet = 1.0 / det;\n\n\tvec3 AO = rayOrigin - a;\n\tvec3 DAO = cross( AO, rayDirection );\n\n\tvec4 uvt;\n\tuvt.x = dot( edge2, DAO ) * invdet;\n\tuvt.y = - dot( edge1, DAO ) * invdet;\n\tuvt.z = dot( AO, norm ) * invdet;\n\tuvt.w = 1.0 - uvt.x - uvt.y;\n\n\t// set the hit information\n\tbarycoord = uvt.wxy; // arranged in A, B, C order\n\tdist = uvt.z;\n\tside = sign( det );\n\tnorm = side * normalize( norm );\n\n\t// add an epsilon to avoid misses between triangles\n\tuvt += vec4( TRI_INTERSECT_EPSILON );\n\n\treturn all( greaterThanEqual( uvt, vec4( 0.0 ) ) );\n\n}\n\nbool intersectTriangles(\n\tBVH bvh, vec3 rayOrigin, vec3 rayDirection, uint offset, uint count,\n\tinout float minDistance, inout uvec4 faceIndices, inout vec3 faceNormal, inout vec3 barycoord,\n\tinout float side, inout float dist\n) {\n\n\tbool found = false;\n\tvec3 localBarycoord, localNormal;\n\tfloat localDist, localSide;\n\tfor ( uint i = offset, l = offset + count; i < l; i ++ ) {\n\n\t\tuvec3 indices = uTexelFetch1D( bvh.index, i ).xyz;\n\t\tvec3 a = texelFetch1D( bvh.position, indices.x ).rgb;\n\t\tvec3 b = texelFetch1D( bvh.position, indices.y ).rgb;\n\t\tvec3 c = texelFetch1D( bvh.position, indices.z ).rgb;\n\n\t\tif (\n\t\t\tintersectsTriangle( rayOrigin, rayDirection, a, b, c, localBarycoord, localNormal, localDist, localSide )\n\t\t\t&& localDist < minDistance\n\t\t) {\n\n\t\t\tfound = true;\n\t\t\tminDistance = localDist;\n\n\t\t\tfaceIndices = uvec4( indices.xyz, i );\n\t\t\tfaceNormal = localNormal;\n\n\t\t\tside = localSide;\n\t\t\tbarycoord = localBarycoord;\n\t\t\tdist = localDist;\n\n\t\t}\n\n\t}\n\n\treturn found;\n\n}\n\nfloat intersectsBVHNodeBounds( vec3 rayOrigin, vec3 rayDirection, BVH bvh, uint currNodeIndex ) {\n\n\tvec3 boundsMin = texelFetch1D( bvh.bvhBounds, currNodeIndex * 2u + 0u ).xyz;\n\tvec3 boundsMax = texelFetch1D( bvh.bvhBounds, currNodeIndex * 2u + 1u ).xyz;\n\treturn intersectsBounds( rayOrigin, rayDirection, boundsMin, boundsMax );\n\n}\n\nbool bvhIntersectFirstHit(\n\tBVH bvh, vec3 rayOrigin, vec3 rayDirection,\n\n\t// output variables\n\tinout uvec4 faceIndices, inout vec3 faceNormal, inout vec3 barycoord,\n\tinout float side, inout float dist\n) {\n\n\t// stack needs to be twice as long as the deepest tree we expect because\n\t// we push both the left and right child onto the stack every traversal\n\tint ptr = 0;\n\tuint stack[ 60 ];\n\tstack[ 0 ] = 0u;\n\n\tfloat triangleDistance = 1e20;\n\tbool found = false;\n\twhile ( ptr > - 1 && ptr < 60 ) {\n\n\t\tuint currNodeIndex = stack[ ptr ];\n\t\tptr --;\n\n\t\t// check if we intersect the current bounds\n\t\tfloat boundsHitDistance = intersectsBVHNodeBounds( rayOrigin, rayDirection, bvh, currNodeIndex );\n\t\tif ( boundsHitDistance == INFINITY || boundsHitDistance > triangleDistance ) {\n\n\t\t\tcontinue;\n\n\t\t}\n\n\t\tuvec2 boundsInfo = uTexelFetch1D( bvh.bvhContents, currNodeIndex ).xy;\n\t\tbool isLeaf = bool( boundsInfo.x & 0xffff0000u );\n\n\t\tif ( isLeaf ) {\n\n\t\t\tuint count = boundsInfo.x & 0x0000ffffu;\n\t\t\tuint offset = boundsInfo.y;\n\n\t\t\tfound = intersectTriangles(\n\t\t\t\tbvh, rayOrigin, rayDirection, offset, count, triangleDistance,\n\t\t\t\tfaceIndices, faceNormal, barycoord, side, dist\n\t\t\t) || found;\n\n\t\t} else {\n\n\t\t\tuint leftIndex = currNodeIndex + 1u;\n\t\t\tuint splitAxis = boundsInfo.x & 0x0000ffffu;\n\t\t\tuint rightIndex = boundsInfo.y;\n\n\t\t\tbool leftToRight = rayDirection[ splitAxis ] >= 0.0;\n\t\t\tuint c1 = leftToRight ? leftIndex : rightIndex;\n\t\t\tuint c2 = leftToRight ? rightIndex : leftIndex;\n\n\t\t\t// set c2 in the stack so we traverse it later. We need to keep track of a pointer in\n\t\t\t// the stack while we traverse. The second pointer added is the one that will be\n\t\t\t// traversed first\n\t\t\tptr ++;\n\t\t\tstack[ ptr ] = c2;\n\n\t\t\tptr ++;\n\t\t\tstack[ ptr ] = c1;\n\n\t\t}\n\n\t}\n\n\treturn found;\n\n}\n`;\n\n\t// Distance to Point\n\tconst shaderDistanceFunction = /* glsl */`\n\nfloat dot2( vec3 v ) {\n\n\treturn dot( v, v );\n\n}\n\n// https://www.shadertoy.com/view/ttfGWl\nvec3 closestPointToTriangle( vec3 p, vec3 v0, vec3 v1, vec3 v2, out vec3 barycoord ) {\n\n    vec3 v10 = v1 - v0;\n    vec3 v21 = v2 - v1;\n    vec3 v02 = v0 - v2;\n\n\tvec3 p0 = p - v0;\n\tvec3 p1 = p - v1;\n\tvec3 p2 = p - v2;\n\n    vec3 nor = cross( v10, v02 );\n\n    // method 2, in barycentric space\n    vec3  q = cross( nor, p0 );\n    float d = 1.0 / dot2( nor );\n    float u = d * dot( q, v02 );\n    float v = d * dot( q, v10 );\n    float w = 1.0 - u - v;\n\n\tif( u < 0.0 ) {\n\n\t\tw = clamp( dot( p2, v02 ) / dot2( v02 ), 0.0, 1.0 );\n\t\tu = 0.0;\n\t\tv = 1.0 - w;\n\n\t} else if( v < 0.0 ) {\n\n\t\tu = clamp( dot( p0, v10 ) / dot2( v10 ), 0.0, 1.0 );\n\t\tv = 0.0;\n\t\tw = 1.0 - u;\n\n\t} else if( w < 0.0 ) {\n\n\t\tv = clamp( dot( p1, v21 ) / dot2( v21 ), 0.0, 1.0 );\n\t\tw = 0.0;\n\t\tu = 1.0-v;\n\n\t}\n\n\tbarycoord = vec3( u, v, w );\n    return u * v1 + v * v2 + w * v0;\n\n}\n\nfloat distanceToTriangles(\n\tBVH bvh, vec3 point, uint offset, uint count, float closestDistanceSquared,\n\n\tinout uvec4 faceIndices, inout vec3 faceNormal, inout vec3 barycoord, inout float side, inout vec3 outPoint\n) {\n\n\tbool found = false;\n\tuvec3 localIndices;\n\tvec3 localBarycoord;\n\tvec3 localNormal;\n\tfor ( uint i = offset, l = offset + count; i < l; i ++ ) {\n\n\t\tuvec3 indices = uTexelFetch1D( bvh.index, i ).xyz;\n\t\tvec3 a = texelFetch1D( bvh.position, indices.x ).rgb;\n\t\tvec3 b = texelFetch1D( bvh.position, indices.y ).rgb;\n\t\tvec3 c = texelFetch1D( bvh.position, indices.z ).rgb;\n\n\t\t// get the closest point and barycoord\n\t\tvec3 closestPoint = closestPointToTriangle( point, a, b, c, localBarycoord );\n\t\tvec3 delta = point - closestPoint;\n\t\tfloat sqDist = dot2( delta );\n\t\tif ( sqDist < closestDistanceSquared ) {\n\n\t\t\t// set the output results\n\t\t\tclosestDistanceSquared = sqDist;\n\t\t\tfaceIndices = uvec4( indices.xyz, i );\n\t\t\tfaceNormal = normalize( cross( a - b, b - c ) );\n\t\t\tbarycoord = localBarycoord;\n\t\t\toutPoint = closestPoint;\n\t\t\tside = sign( dot( faceNormal, delta ) );\n\n\t\t}\n\n\t}\n\n\treturn closestDistanceSquared;\n\n}\n\nfloat distanceSqToBounds( vec3 point, vec3 boundsMin, vec3 boundsMax ) {\n\n\tvec3 clampedPoint = clamp( point, boundsMin, boundsMax );\n\tvec3 delta = point - clampedPoint;\n\treturn dot( delta, delta );\n\n}\n\nfloat distanceSqToBVHNodeBoundsPoint( vec3 point, BVH bvh, uint currNodeIndex ) {\n\n\tvec3 boundsMin = texelFetch1D( bvh.bvhBounds, currNodeIndex * 2u + 0u ).xyz;\n\tvec3 boundsMax = texelFetch1D( bvh.bvhBounds, currNodeIndex * 2u + 1u ).xyz;\n\treturn distanceSqToBounds( point, boundsMin, boundsMax );\n\n}\n\nfloat bvhClosestPointToPoint(\n\tBVH bvh, vec3 point,\n\n\t// output variables\n\tinout uvec4 faceIndices, inout vec3 faceNormal, inout vec3 barycoord,\n\tinout float side, inout vec3 outPoint\n ) {\n\n\t// stack needs to be twice as long as the deepest tree we expect because\n\t// we push both the left and right child onto the stack every traversal\n\tint ptr = 0;\n\tuint stack[ 60 ];\n\tstack[ 0 ] = 0u;\n\tfloat closestDistanceSquared = pow( 100000.0, 2.0 );\n\tbool found = false;\n\twhile ( ptr > - 1 && ptr < 60 ) {\n\n\t\tuint currNodeIndex = stack[ ptr ];\n\t\tptr --;\n\n\t\t// check if we intersect the current bounds\n\t\tfloat boundsHitDistance = distanceSqToBVHNodeBoundsPoint( point, bvh, currNodeIndex );\n\t\tif ( boundsHitDistance > closestDistanceSquared ) {\n\n\t\t\tcontinue;\n\n\t\t}\n\n\t\tuvec2 boundsInfo = uTexelFetch1D( bvh.bvhContents, currNodeIndex ).xy;\n\t\tbool isLeaf = bool( boundsInfo.x & 0xffff0000u );\n\t\tif ( isLeaf ) {\n\n\t\t\tuint count = boundsInfo.x & 0x0000ffffu;\n\t\t\tuint offset = boundsInfo.y;\n\t\t\tclosestDistanceSquared = distanceToTriangles(\n\t\t\t\tbvh, point, offset, count, closestDistanceSquared,\n\n\t\t\t\t// outputs\n\t\t\t\tfaceIndices, faceNormal, barycoord, side, outPoint\n\t\t\t);\n\n\t\t} else {\n\n\t\t\tuint leftIndex = currNodeIndex + 1u;\n\t\t\tuint splitAxis = boundsInfo.x & 0x0000ffffu;\n\t\t\tuint rightIndex = boundsInfo.y;\n\t\t\tbool leftToRight = distanceSqToBVHNodeBoundsPoint( point, bvh, leftIndex ) < distanceSqToBVHNodeBoundsPoint( point, bvh, rightIndex );//rayDirection[ splitAxis ] >= 0.0;\n\t\t\tuint c1 = leftToRight ? leftIndex : rightIndex;\n\t\t\tuint c2 = leftToRight ? rightIndex : leftIndex;\n\n\t\t\t// set c2 in the stack so we traverse it later. We need to keep track of a pointer in\n\t\t\t// the stack while we traverse. The second pointer added is the one that will be\n\t\t\t// traversed first\n\t\t\tptr ++;\n\t\t\tstack[ ptr ] = c2;\n\t\t\tptr ++;\n\t\t\tstack[ ptr ] = c1;\n\n\t\t}\n\n\t}\n\n\treturn sqrt( closestDistanceSquared );\n\n}\n`;\n\n\tconst _positionVector = /*@__PURE__*/ new three.Vector3();\n\tconst _normalVector = /*@__PURE__*/ new three.Vector3();\n\tconst _tangentVector = /*@__PURE__*/ new three.Vector3();\n\tconst _tangentVector4 = /*@__PURE__*/ new three.Vector4();\n\n\tconst _morphVector = /*@__PURE__*/ new three.Vector3();\n\tconst _temp = /*@__PURE__*/ new three.Vector3();\n\n\tconst _skinIndex = /*@__PURE__*/ new three.Vector4();\n\tconst _skinWeight = /*@__PURE__*/ new three.Vector4();\n\tconst _matrix = /*@__PURE__*/ new three.Matrix4();\n\tconst _boneMatrix = /*@__PURE__*/ new three.Matrix4();\n\n\t// Confirms that the two provided attributes are compatible\n\tfunction validateAttributes( attr1, attr2 ) {\n\n\t\tif ( ! attr1 && ! attr2 ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst sameCount = attr1.count === attr2.count;\n\t\tconst sameNormalized = attr1.normalized === attr2.normalized;\n\t\tconst sameType = attr1.array.constructor === attr2.array.constructor;\n\t\tconst sameItemSize = attr1.itemSize === attr2.itemSize;\n\n\t\tif ( ! sameCount || ! sameNormalized || ! sameType || ! sameItemSize ) {\n\n\t\t\tthrow new Error();\n\n\t\t}\n\n\t}\n\n\t// Clones the given attribute with a new compatible buffer attribute but no data\n\tfunction createAttributeClone( attr, countOverride = null ) {\n\n\t\tconst cons = attr.array.constructor;\n\t\tconst normalized = attr.normalized;\n\t\tconst itemSize = attr.itemSize;\n\t\tconst count = countOverride === null ? attr.count : countOverride;\n\n\t\treturn new three.BufferAttribute( new cons( itemSize * count ), itemSize, normalized );\n\n\t}\n\n\t// target offset is the number of elements in the target buffer stride to skip before copying the\n\t// attributes contents in to.\n\tfunction copyAttributeContents( attr, target, targetOffset = 0 ) {\n\n\t\tif ( attr.isInterleavedBufferAttribute ) {\n\n\t\t\tconst itemSize = attr.itemSize;\n\t\t\tfor ( let i = 0, l = attr.count; i < l; i ++ ) {\n\n\t\t\t\tconst io = i + targetOffset;\n\t\t\t\ttarget.setX( io, attr.getX( i ) );\n\t\t\t\tif ( itemSize >= 2 ) target.setY( io, attr.getY( i ) );\n\t\t\t\tif ( itemSize >= 3 ) target.setZ( io, attr.getZ( i ) );\n\t\t\t\tif ( itemSize >= 4 ) target.setW( io, attr.getW( i ) );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst array = target.array;\n\t\t\tconst cons = array.constructor;\n\t\t\tconst byteOffset = array.BYTES_PER_ELEMENT * attr.itemSize * targetOffset;\n\t\t\tconst temp = new cons( array.buffer, byteOffset, attr.array.length );\n\t\t\ttemp.set( attr.array );\n\n\t\t}\n\n\t}\n\n\t// Adds the \"matrix\" multiplied by \"scale\" to \"target\"\n\tfunction addScaledMatrix( target, matrix, scale ) {\n\n\t\tconst targetArray = target.elements;\n\t\tconst matrixArray = matrix.elements;\n\t\tfor ( let i = 0, l = matrixArray.length; i < l; i ++ ) {\n\n\t\t\ttargetArray[ i ] += matrixArray[ i ] * scale;\n\n\t\t}\n\n\t}\n\n\t// A version of \"SkinnedMesh.boneTransform\" for normals\n\tfunction boneNormalTransform( mesh, index, target ) {\n\n\t\tconst skeleton = mesh.skeleton;\n\t\tconst geometry = mesh.geometry;\n\t\tconst bones = skeleton.bones;\n\t\tconst boneInverses = skeleton.boneInverses;\n\n\t\t_skinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );\n\t\t_skinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );\n\n\t\t_matrix.elements.fill( 0 );\n\n\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\tconst weight = _skinWeight.getComponent( i );\n\n\t\t\tif ( weight !== 0 ) {\n\n\t\t\t\tconst boneIndex = _skinIndex.getComponent( i );\n\t\t\t\t_boneMatrix.multiplyMatrices( bones[ boneIndex ].matrixWorld, boneInverses[ boneIndex ] );\n\n\t\t\t\taddScaledMatrix( _matrix, _boneMatrix, weight );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_matrix.multiply( mesh.bindMatrix ).premultiply( mesh.bindMatrixInverse );\n\t\ttarget.transformDirection( _matrix );\n\n\t\treturn target;\n\n\t}\n\n\t// Applies the morph target data to the target vector\n\tfunction applyMorphTarget( morphData, morphInfluences, morphTargetsRelative, i, target ) {\n\n\t\t_morphVector.set( 0, 0, 0 );\n\t\tfor ( let j = 0, jl = morphData.length; j < jl; j ++ ) {\n\n\t\t\tconst influence = morphInfluences[ j ];\n\t\t\tconst morphAttribute = morphData[ j ];\n\n\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t_temp.fromBufferAttribute( morphAttribute, i );\n\n\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t_morphVector.addScaledVector( _temp, influence );\n\n\t\t\t} else {\n\n\t\t\t\t_morphVector.addScaledVector( _temp.sub( target ), influence );\n\n\t\t\t}\n\n\t\t}\n\n\t\ttarget.add( _morphVector );\n\n\t}\n\n\t// Modified version of BufferGeometryUtils.mergeBufferGeometries that ignores morph targets and updates a attributes in place\n\tfunction mergeBufferGeometries( geometries, options = { useGroups: false, updateIndex: false, skipAttributes: [] }, targetGeometry = new three.BufferGeometry() ) {\n\n\t\tconst isIndexed = geometries[ 0 ].index !== null;\n\t\tconst { useGroups = false, updateIndex = false, skipAttributes = [] } = options;\n\n\t\tconst attributesUsed = new Set( Object.keys( geometries[ 0 ].attributes ) );\n\t\tconst attributes = {};\n\n\t\tlet offset = 0;\n\n\t\ttargetGeometry.clearGroups();\n\t\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\t\tconst geometry = geometries[ i ];\n\t\t\tlet attributesCount = 0;\n\n\t\t\t// ensure that all geometries are indexed, or none\n\t\t\tif ( isIndexed !== ( geometry.index !== null ) ) {\n\n\t\t\t\tthrow new Error( 'StaticGeometryGenerator: All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.' );\n\n\t\t\t}\n\n\t\t\t// gather attributes, exit early if they're different\n\t\t\tfor ( const name in geometry.attributes ) {\n\n\t\t\t\tif ( ! attributesUsed.has( name ) ) {\n\n\t\t\t\t\tthrow new Error( 'StaticGeometryGenerator: All geometries must have compatible attributes; make sure \"' + name + '\" attribute exists among all geometries, or in none of them.' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( attributes[ name ] === undefined ) {\n\n\t\t\t\t\tattributes[ name ] = [];\n\n\t\t\t\t}\n\n\t\t\t\tattributes[ name ].push( geometry.attributes[ name ] );\n\t\t\t\tattributesCount ++;\n\n\t\t\t}\n\n\t\t\t// ensure geometries have the same number of attributes\n\t\t\tif ( attributesCount !== attributesUsed.size ) {\n\n\t\t\t\tthrow new Error( 'StaticGeometryGenerator: Make sure all geometries have the same number of attributes.' );\n\n\t\t\t}\n\n\t\t\tif ( useGroups ) {\n\n\t\t\t\tlet count;\n\t\t\t\tif ( isIndexed ) {\n\n\t\t\t\t\tcount = geometry.index.count;\n\n\t\t\t\t} else if ( geometry.attributes.position !== undefined ) {\n\n\t\t\t\t\tcount = geometry.attributes.position.count;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'StaticGeometryGenerator: The geometry must have either an index or a position attribute' );\n\n\t\t\t\t}\n\n\t\t\t\ttargetGeometry.addGroup( offset, count, i );\n\t\t\t\toffset += count;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// merge indices\n\t\tif ( isIndexed ) {\n\n\t\t\tlet forceUpdateIndex = false;\n\t\t\tif ( ! targetGeometry.index ) {\n\n\t\t\t\tlet indexCount = 0;\n\t\t\t\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\t\t\t\tindexCount += geometries[ i ].index.count;\n\n\t\t\t\t}\n\n\t\t\t\ttargetGeometry.setIndex( new three.BufferAttribute( new Uint32Array( indexCount ), 1, false ) );\n\t\t\t\tforceUpdateIndex = true;\n\n\t\t\t}\n\n\t\t\tif ( updateIndex || forceUpdateIndex ) {\n\n\t\t\t\tconst targetIndex = targetGeometry.index;\n\t\t\t\tlet targetOffset = 0;\n\t\t\t\tlet indexOffset = 0;\n\t\t\t\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\t\t\t\tconst geometry = geometries[ i ];\n\t\t\t\t\tconst index = geometry.index;\n\t\t\t\t\tif ( skipAttributes[ i ] !== true ) {\n\n\t\t\t\t\t\tfor ( let j = 0; j < index.count; ++ j ) {\n\n\t\t\t\t\t\t\ttargetIndex.setX( targetOffset, index.getX( j ) + indexOffset );\n\t\t\t\t\t\t\ttargetOffset ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tindexOffset += geometry.attributes.position.count;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// merge attributes\n\t\tfor ( const name in attributes ) {\n\n\t\t\tconst attrList = attributes[ name ];\n\t\t\tif ( ! ( name in targetGeometry.attributes ) ) {\n\n\t\t\t\tlet count = 0;\n\t\t\t\tfor ( const key in attrList ) {\n\n\t\t\t\t\tcount += attrList[ key ].count;\n\n\t\t\t\t}\n\n\t\t\t\ttargetGeometry.setAttribute( name, createAttributeClone( attributes[ name ][ 0 ], count ) );\n\n\t\t\t}\n\n\t\t\tconst targetAttribute = targetGeometry.attributes[ name ];\n\t\t\tlet offset = 0;\n\t\t\tfor ( let i = 0, l = attrList.length; i < l; i ++ ) {\n\n\t\t\t\tconst attr = attrList[ i ];\n\t\t\t\tif ( skipAttributes[ i ] !== true ) {\n\n\t\t\t\t\tcopyAttributeContents( attr, targetAttribute, offset );\n\n\t\t\t\t}\n\n\t\t\t\toffset += attr.count;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn targetGeometry;\n\n\t}\n\n\tfunction checkTypedArrayEquality( a, b ) {\n\n\t\tif ( a === null || b === null ) {\n\n\t\t\treturn a === b;\n\n\t\t}\n\n\t\tif ( a.length !== b.length ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tfor ( let i = 0, l = a.length; i < l; i ++ ) {\n\n\t\t\tif ( a[ i ] !== b[ i ] ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t// Checks whether the geometry changed between this and last evaluation\n\tclass GeometryDiff {\n\n\t\tconstructor( mesh ) {\n\n\t\t\tthis.matrixWorld = new three.Matrix4();\n\t\t\tthis.geometryHash = null;\n\t\t\tthis.boneMatrices = null;\n\t\t\tthis.primitiveCount = - 1;\n\t\t\tthis.mesh = mesh;\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tupdate() {\n\n\t\t\tconst mesh = this.mesh;\n\t\t\tconst geometry = mesh.geometry;\n\t\t\tconst skeleton = mesh.skeleton;\n\t\t\tconst primitiveCount = ( geometry.index ? geometry.index.count : geometry.attributes.position.count ) / 3;\n\t\t\tthis.matrixWorld.copy( mesh.matrixWorld );\n\t\t\tthis.geometryHash = geometry.attributes.position.version;\n\t\t\tthis.primitiveCount = primitiveCount;\n\n\t\t\tif ( skeleton ) {\n\n\t\t\t\t// ensure the bone matrix array is updated to the appropriate length\n\t\t\t\tif ( ! skeleton.boneTexture ) {\n\n\t\t\t\t\tskeleton.computeBoneTexture();\n\n\t\t\t\t}\n\n\t\t\t\tskeleton.update();\n\n\t\t\t\t// copy data if possible otherwise clone it\n\t\t\t\tconst boneMatrices = skeleton.boneMatrices;\n\t\t\t\tif ( ! this.boneMatrices || this.boneMatrices.length !== boneMatrices.length ) {\n\n\t\t\t\t\tthis.boneMatrices = boneMatrices.slice();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.boneMatrices.set( boneMatrices );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.boneMatrices = null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdidChange() {\n\n\t\t\tconst mesh = this.mesh;\n\t\t\tconst geometry = mesh.geometry;\n\t\t\tconst primitiveCount = ( geometry.index ? geometry.index.count : geometry.attributes.position.count ) / 3;\n\t\t\tconst identical =\n\t\t\t\tthis.matrixWorld.equals( mesh.matrixWorld ) &&\n\t\t\t\tthis.geometryHash === geometry.attributes.position.version &&\n\t\t\t\tcheckTypedArrayEquality( mesh.skeleton && mesh.skeleton.boneMatrices || null, this.boneMatrices ) &&\n\t\t\t\tthis.primitiveCount === primitiveCount;\n\n\t\t\treturn ! identical;\n\n\t\t}\n\n\t}\n\n\tclass StaticGeometryGenerator {\n\n\t\tconstructor( meshes ) {\n\n\t\t\tif ( ! Array.isArray( meshes ) ) {\n\n\t\t\t\tmeshes = [ meshes ];\n\n\t\t\t}\n\n\t\t\tconst finalMeshes = [];\n\t\t\tmeshes.forEach( object => {\n\n\t\t\t\tobject.traverseVisible( c => {\n\n\t\t\t\t\tif ( c.isMesh ) {\n\n\t\t\t\t\t\tfinalMeshes.push( c );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t} );\n\n\t\t\tthis.meshes = finalMeshes;\n\t\t\tthis.useGroups = true;\n\t\t\tthis.applyWorldTransforms = true;\n\t\t\tthis.attributes = [ 'position', 'normal', 'color', 'tangent', 'uv', 'uv2' ];\n\t\t\tthis._intermediateGeometry = new Array( finalMeshes.length ).fill().map( () => new three.BufferGeometry() );\n\t\t\tthis._diffMap = new WeakMap();\n\n\t\t}\n\n\t\tgetMaterials() {\n\n\t\t\tconst materials = [];\n\t\t\tthis.meshes.forEach( mesh => {\n\n\t\t\t\tif ( Array.isArray( mesh.material ) ) {\n\n\t\t\t\t\tmaterials.push( ...mesh.material );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterials.push( mesh.material );\n\n\t\t\t\t}\n\n\t\t\t} );\n\t\t\treturn materials;\n\n\t\t}\n\n\t\tgenerate( targetGeometry = new three.BufferGeometry() ) {\n\n\t\t\t// track which attributes have been updated and which to skip to avoid unnecessary attribute copies\n\t\t\tlet skipAttributes = [];\n\t\t\tconst { meshes, useGroups, _intermediateGeometry, _diffMap } = this;\n\t\t\tfor ( let i = 0, l = meshes.length; i < l; i ++ ) {\n\n\t\t\t\tconst mesh = meshes[ i ];\n\t\t\t\tconst geom = _intermediateGeometry[ i ];\n\t\t\t\tconst diff = _diffMap.get( mesh );\n\t\t\t\tif ( ! diff || diff.didChange( mesh ) ) {\n\n\t\t\t\t\tthis._convertToStaticGeometry( mesh, geom );\n\t\t\t\t\tskipAttributes.push( false );\n\n\t\t\t\t\tif ( ! diff ) {\n\n\t\t\t\t\t\t_diffMap.set( mesh, new GeometryDiff( mesh ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdiff.update();\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tskipAttributes.push( true );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tmergeBufferGeometries( _intermediateGeometry, { useGroups, skipAttributes }, targetGeometry );\n\n\t\t\tfor ( const key in targetGeometry.attributes ) {\n\n\t\t\t\ttargetGeometry.attributes[ key ].needsUpdate = true;\n\n\t\t\t}\n\n\t\t\treturn targetGeometry;\n\n\t\t}\n\n\t\t_convertToStaticGeometry( mesh, targetGeometry = new three.BufferGeometry() ) {\n\n\t\t\tconst geometry = mesh.geometry;\n\t\t\tconst applyWorldTransforms = this.applyWorldTransforms;\n\t\t\tconst includeNormal = this.attributes.includes( 'normal' );\n\t\t\tconst includeTangent = this.attributes.includes( 'tangent' );\n\t\t\tconst attributes = geometry.attributes;\n\t\t\tconst targetAttributes = targetGeometry.attributes;\n\n\t\t\t// initialize the attributes if they don't exist\n\t\t\tif ( ! targetGeometry.index ) {\n\n\t\t\t\ttargetGeometry.index = geometry.index;\n\n\t\t\t}\n\n\t\t\tif ( ! targetAttributes.position ) {\n\n\t\t\t\ttargetGeometry.setAttribute( 'position', createAttributeClone( attributes.position ) );\n\n\t\t\t}\n\n\t\t\tif ( includeNormal && ! targetAttributes.normal && attributes.normal ) {\n\n\t\t\t\ttargetGeometry.setAttribute( 'normal', createAttributeClone( attributes.normal ) );\n\n\t\t\t}\n\n\t\t\tif ( includeTangent && ! targetAttributes.tangent && attributes.tangent ) {\n\n\t\t\t\ttargetGeometry.setAttribute( 'tangent', createAttributeClone( attributes.tangent ) );\n\n\t\t\t}\n\n\t\t\t// ensure the attributes are consistent\n\t\t\tvalidateAttributes( geometry.index, targetGeometry.index );\n\t\t\tvalidateAttributes( attributes.position, targetAttributes.position );\n\n\t\t\tif ( includeNormal ) {\n\n\t\t\t\tvalidateAttributes( attributes.normal, targetAttributes.normal );\n\n\t\t\t}\n\n\t\t\tif ( includeTangent ) {\n\n\t\t\t\tvalidateAttributes( attributes.tangent, targetAttributes.tangent );\n\n\t\t\t}\n\n\t\t\t// generate transformed vertex attribute data\n\t\t\tconst position = attributes.position;\n\t\t\tconst normal = includeNormal ? attributes.normal : null;\n\t\t\tconst tangent = includeTangent ? attributes.tangent : null;\n\t\t\tconst morphPosition = geometry.morphAttributes.position;\n\t\t\tconst morphNormal = geometry.morphAttributes.normal;\n\t\t\tconst morphTangent = geometry.morphAttributes.tangent;\n\t\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\tconst morphInfluences = mesh.morphTargetInfluences;\n\t\t\tconst normalMatrix = new three.Matrix3();\n\t\t\tnormalMatrix.getNormalMatrix( mesh.matrixWorld );\n\n\t\t\tfor ( let i = 0, l = attributes.position.count; i < l; i ++ ) {\n\n\t\t\t\t_positionVector.fromBufferAttribute( position, i );\n\t\t\t\tif ( normal ) {\n\n\t\t\t\t\t_normalVector.fromBufferAttribute( normal, i );\n\n\t\t\t\t}\n\n\t\t\t\tif ( tangent ) {\n\n\t\t\t\t\t_tangentVector4.fromBufferAttribute( tangent, i );\n\t\t\t\t\t_tangentVector.fromBufferAttribute( tangent, i );\n\n\t\t\t\t}\n\n\t\t\t\t// apply morph target transform\n\t\t\t\tif ( morphInfluences ) {\n\n\t\t\t\t\tif ( morphPosition ) {\n\n\t\t\t\t\t\tapplyMorphTarget( morphPosition, morphInfluences, morphTargetsRelative, i, _positionVector );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( morphNormal ) {\n\n\t\t\t\t\t\tapplyMorphTarget( morphNormal, morphInfluences, morphTargetsRelative, i, _normalVector );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( morphTangent ) {\n\n\t\t\t\t\t\tapplyMorphTarget( morphTangent, morphInfluences, morphTargetsRelative, i, _tangentVector );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// apply bone transform\n\t\t\t\tif ( mesh.isSkinnedMesh ) {\n\n\t\t\t\t\tmesh.applyBoneTransform( i, _positionVector );\n\t\t\t\t\tif ( normal ) {\n\n\t\t\t\t\t\tboneNormalTransform( mesh, i, _normalVector );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( tangent ) {\n\n\t\t\t\t\t\tboneNormalTransform( mesh, i, _tangentVector );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// update the vectors of the attributes\n\t\t\t\tif ( applyWorldTransforms ) {\n\n\t\t\t\t\t_positionVector.applyMatrix4( mesh.matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\ttargetAttributes.position.setXYZ( i, _positionVector.x, _positionVector.y, _positionVector.z );\n\n\t\t\t\tif ( normal ) {\n\n\t\t\t\t\tif ( applyWorldTransforms ) {\n\n\t\t\t\t\t\t_normalVector.applyNormalMatrix( normalMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetAttributes.normal.setXYZ( i, _normalVector.x, _normalVector.y, _normalVector.z );\n\n\t\t\t\t}\n\n\t\t\t\tif ( tangent ) {\n\n\t\t\t\t\tif ( applyWorldTransforms ) {\n\n\t\t\t\t\t\t_tangentVector.transformDirection( mesh.matrixWorld );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetAttributes.tangent.setXYZW( i, _tangentVector.x, _tangentVector.y, _tangentVector.z, _tangentVector4.w );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// copy other attributes over\n\t\t\tfor ( const i in this.attributes ) {\n\n\t\t\t\tconst key = this.attributes[ i ];\n\t\t\t\tif ( key === 'position' || key === 'tangent' || key === 'normal' || ! ( key in attributes ) ) {\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! targetAttributes[ key ] ) {\n\n\t\t\t\t\ttargetGeometry.setAttribute( key, createAttributeClone( attributes[ key ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tvalidateAttributes( attributes[ key ], targetAttributes[ key ] );\n\t\t\t\tcopyAttributeContents( attributes[ key ], targetAttributes[ key ] );\n\n\t\t\t}\n\n\t\t\treturn targetGeometry;\n\n\t\t}\n\n\t}\n\n\texports.AVERAGE = AVERAGE;\n\texports.CENTER = CENTER;\n\texports.CONTAINED = CONTAINED;\n\texports.ExtendedTriangle = ExtendedTriangle;\n\texports.FloatVertexAttributeTexture = FloatVertexAttributeTexture;\n\texports.INTERSECTED = INTERSECTED;\n\texports.IntVertexAttributeTexture = IntVertexAttributeTexture;\n\texports.MeshBVH = MeshBVH;\n\texports.MeshBVHUniformStruct = MeshBVHUniformStruct;\n\texports.MeshBVHVisualizer = MeshBVHVisualizer;\n\texports.NOT_INTERSECTED = NOT_INTERSECTED;\n\texports.OrientedBox = OrientedBox;\n\texports.SAH = SAH;\n\texports.StaticGeometryGenerator = StaticGeometryGenerator;\n\texports.UIntVertexAttributeTexture = UIntVertexAttributeTexture;\n\texports.VertexAttributeTexture = VertexAttributeTexture;\n\texports.acceleratedRaycast = acceleratedRaycast;\n\texports.computeBoundsTree = computeBoundsTree;\n\texports.disposeBoundsTree = disposeBoundsTree;\n\texports.estimateMemoryInBytes = estimateMemoryInBytes;\n\texports.getBVHExtremes = getBVHExtremes;\n\texports.getJSONStructure = getJSONStructure;\n\texports.getTriangleHitPointInfo = getTriangleHitPointInfo;\n\texports.shaderDistanceFunction = shaderDistanceFunction;\n\texports.shaderIntersectFunction = shaderIntersectFunction;\n\texports.shaderStructs = shaderStructs;\n\texports.validateBounds = validateBounds;\n\n}));\n//# sourceMappingURL=index.umd.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-mesh-bvh/build/index.umd.cjs\n");

/***/ })

};
;